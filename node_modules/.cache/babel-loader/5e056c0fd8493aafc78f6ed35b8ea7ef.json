{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Counter/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color,\n        vertical = props.vertical,\n        dis = props.dis,\n        dense = props.dense;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" default | square\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"leftColor\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the left button. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"value\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"This prop set a value of the component.\")\n  }, {\n    prop: \"rightColor\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set a color of the right button. Default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"leftIcon\",\n    type: React.createElement(React.Fragment, null, \"string | element\"),\n    desc: React.createElement(React.Fragment, null, \"Icon of the left button. Name of a Blueprint UI icon (or an icon element) to render before the text. For example, \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"\\\"tick\\\"\"), \" or\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"<Icon icon=\\\"tick\\\" iconSize={24} />\"))\n  }, {\n    prop: \"rightIcon\",\n    type: React.createElement(React.Fragment, null, \"string | element\"),\n    desc: React.createElement(React.Fragment, null, \"Icon of the right button. \")\n  }, {\n    prop: \"dense\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should use minimal styles.\")\n  }, {\n    prop: \"vertical\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Set a vertical position of buttons.\")\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the button will be disabled. The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"false\"))\n  }];\n  /** Code source */\n\n  const Code = \"  \\n  < Counter\\n      <i>type</i> = '\".concat(type, \"' \\n      <i>view</i> = '\").concat(view, \"' \\n      <i>leftColor</i> = 'default' \\n      <i>rightColor</i> = '\").concat(color, \"' \\n      <i>value</i> = { 0 }\\n      <i>leftIcon</i> = \").concat(vertical ? \"'chevron-down'\" : \"'minus'\", \"\\n      <i>rightIcon</i> = \").concat(vertical ? \"'chevron-up'\" : \"'plus'\", \"\\n      <i>dense</i> = { \").concat(dense ? \"true\" : \"false\", \" }\\n      <i>vertical</i> ={ \").concat(vertical ? \"true\" : \"false\", \" }\\n      <i>disabled</i> = \").concat(dis ? \"{true}\" : \"{false}\", \"\\n  />\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Counter/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","view","color","vertical","dis","dense","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, view, color, vertical, dis, dense } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> default | square</b>. The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | flat | smooth | outlined | raised </b>. The default state\r\n          is <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"leftColor\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the left button. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: <>number</>,\r\n      desc: <>This prop set a value of the component.</>\r\n    },\r\n    {\r\n      prop: \"rightColor\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set a color of the right button. Default state is{\" \"}\r\n          <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"leftIcon\",\r\n      type: <>string | element</>,\r\n      desc: (\r\n        <>\r\n          Icon of the left button. Name of a Blueprint UI icon (or an icon\r\n          element) to render before the text. For example, <b>\"tick\"</b> or{\" \"}\r\n          <b>{`<Icon icon=\"tick\" iconSize={24} />`}</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"rightIcon\",\r\n      type: <>string | element</>,\r\n      desc: <>Icon of the right button. </>\r\n    },\r\n    {\r\n      prop: \"dense\",\r\n      type: <>boolean</>,\r\n      desc: <>Whether this button should use minimal styles.</>\r\n    },\r\n    {\r\n      prop: \"vertical\",\r\n      type: <>boolean</>,\r\n      desc: <>Set a vertical position of buttons.</>\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the button will be disabled. The default state is{\" \"}\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n  < Counter\r\n      <i>type</i> = '${type}' \r\n      <i>view</i> = '${view}' \r\n      <i>leftColor</i> = 'default' \r\n      <i>rightColor</i> = '${color}' \r\n      <i>value</i> = { 0 }\r\n      <i>leftIcon</i> = ${vertical ? \"'chevron-down'\" : \"'minus'\"}\r\n      <i>rightIcon</i> = ${vertical ? \"'chevron-up'\" : \"'plus'\"}\r\n      <i>dense</i> = { ${dense ? \"true\" : \"false\"} }\r\n      <i>vertical</i> ={ ${vertical ? \"true\" : \"false\"} }\r\n      <i>disabled</i> = ${dis ? \"{true}\" : \"{false}\"}\r\n  />\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}