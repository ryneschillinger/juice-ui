{"ast":null,"code":"import _slicedToArray from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/docs/icons/demo.jsx\";\nimport React from \"react\";\nimport Typo from \"../../../core/Typography\";\nimport { SidebarContainer } from \"../../components/SidebarContainer\";\nimport SelectColorGroup from \"../../SelectColorGroup.jsx\";\nimport { Section } from \"./section\";\nimport PropsGroup from \"./PropsGroup.jsx\";\nimport { useDevice } from \"../../components/customHooks\";\nimport styles from \"./style.module.css\";\nimport DemoAppStyle from \"../../styles/style.module.css\";\nimport Color from \"../../../styles/color.module.css\";\n\nconst DemoIcons = props => {\n  React.useEffect(() => {\n    document.title = \"React Design System: Icons\";\n    document.getElementsByTagName(\"META\")[\"description\"].content = \"Demo Icons component for React Setproduct Design System with possible props.\";\n  });\n  let device = useDevice();\n\n  const _React$useState = React.useState(\"default\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        color = _React$useState2[0],\n        setColor = _React$useState2[1];\n\n  const _React$useState3 = React.useState(device !== \"mobile\" ? 64 : 32),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        iconSize = _React$useState4[0],\n        setIconSize = _React$useState4[1];\n\n  return React.createElement(\"div\", {\n    className: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Typo, {\n    type: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Icons\"), React.createElement(Typo, {\n    large: true,\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Blueprint provides over 300 vector UI icons in two sizes (16px and 20px) and two formats (SVG and fonts). It's easy to change their color or apply effects like text shadows via standard SVG or CSS properties.\"), React.createElement(Typo, {\n    large: true,\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Many Blueprint components support an icon prop which accepts an icon name (such as \\\"history\\\") or a JSX element to use as the icon, for example \", \"< Icon icon=\\\"add\\\" iconSize={24} />\", \".\"), React.createElement(Section, {\n    className: Color[color],\n    iconSize: iconSize,\n    device: device,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(SidebarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: DemoAppStyle[\"right_sidebar\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(PropsGroup, {\n    iconSize: iconSize,\n    setIconSize: setIconSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(SelectColorGroup, {\n    color: color,\n    setColor: setColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))));\n};\n\nexport default DemoIcons;","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/docs/icons/demo.jsx"],"names":["React","Typo","SidebarContainer","SelectColorGroup","Section","PropsGroup","useDevice","styles","DemoAppStyle","Color","DemoIcons","props","useEffect","document","title","getElementsByTagName","content","device","useState","color","setColor","iconSize","setIconSize","container","text"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,SAAT,QAA0B,8BAA1B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzBX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpBC,IAAAA,QAAQ,CAACC,KAAT;AACAD,IAAAA,QAAQ,CAACE,oBAAT,CAA8B,MAA9B,EACE,aADF,EAEEC,OAFF;AAGD,GALD;AAMA,MAAIC,MAAM,GAAGX,SAAS,EAAtB;;AAPyB,0BAQCN,KAAK,CAACkB,QAAN,CAAe,SAAf,CARD;AAAA;AAAA,QAQlBC,KARkB;AAAA,QAQXC,QARW;;AAAA,2BASOpB,KAAK,CAACkB,QAAN,CAAeD,MAAM,KAAK,QAAX,GAAsB,EAAtB,GAA2B,EAA1C,CATP;AAAA;AAAA,QASlBI,QATkB;AAAA,QASRC,WATQ;;AAWzB,SACE;AAAK,IAAA,SAAS,EAAEf,MAAM,CAACgB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,SAAS,EAAEhB,MAAM,CAACiB,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wNAHF,EAQE,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,SAAS,EAAEjB,MAAM,CAACiB,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sMARF,EAaE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAEf,KAAK,CAACU,KAAD,CAAzB;AAAkC,IAAA,QAAQ,EAAEE,QAA5C;AAAsD,IAAA,MAAM,EAAEJ,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAeE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAET,YAAY,CAAC,eAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEa,QAAtB;AAAgC,IAAA,WAAW,EAAEC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEH,KAAzB;AAAgC,IAAA,QAAQ,EAAEC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CAfF,CADF;AA0BD,CArCD;;AAuCA,eAAeV,SAAf","sourcesContent":["import React from \"react\";\r\nimport Typo from \"../../../core/Typography\";\r\nimport { SidebarContainer } from \"../../components/SidebarContainer\";\r\nimport SelectColorGroup from \"../../SelectColorGroup.jsx\";\r\nimport { Section } from \"./section\";\r\nimport PropsGroup from \"./PropsGroup.jsx\";\r\nimport { useDevice } from \"../../components/customHooks\";\r\n\r\nimport styles from \"./style.module.css\";\r\nimport DemoAppStyle from \"../../styles/style.module.css\";\r\nimport Color from \"../../../styles/color.module.css\";\r\n\r\nconst DemoIcons = props => {\r\n  React.useEffect(() => {\r\n    document.title = `React Design System: Icons`;\r\n    document.getElementsByTagName(\"META\")[\r\n      \"description\"\r\n    ].content = `Demo Icons component for React Setproduct Design System with possible props.`;\r\n  });\r\n  let device = useDevice();\r\n  const [color, setColor] = React.useState(\"default\");\r\n  const [iconSize, setIconSize] = React.useState(device !== \"mobile\" ? 64 : 32);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Typo type=\"h3\">Icons</Typo>\r\n\r\n      <Typo large className={styles.text}>\r\n        Blueprint provides over 300 vector UI icons in two sizes (16px and 20px)\r\n        and two formats (SVG and fonts). It's easy to change their color or\r\n        apply effects like text shadows via standard SVG or CSS properties.\r\n      </Typo>\r\n      <Typo large className={styles.text}>\r\n        Many Blueprint components support an icon prop which accepts an icon\r\n        name (such as \"history\") or a JSX element to use as the icon, for\r\n        example {`< Icon icon=\"add\" iconSize={24} />`}.\r\n      </Typo>\r\n      <Section className={Color[color]} iconSize={iconSize} device={device} />\r\n      {/* Props*/}\r\n      <SidebarContainer>\r\n        <div className={DemoAppStyle[\"right_sidebar\"]}>\r\n          {/**Set this Props component */}\r\n          <PropsGroup iconSize={iconSize} setIconSize={setIconSize} />\r\n          <SelectColorGroup color={color} setColor={setColor} />\r\n        </div>\r\n      </SidebarContainer>\r\n      {/***** */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemoIcons;\r\n"]},"metadata":{},"sourceType":"module"}