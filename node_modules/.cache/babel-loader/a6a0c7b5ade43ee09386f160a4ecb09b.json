{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Menu/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const type = props.type,\n        view = props.view,\n        name = props.name,\n        color = props.color;\n  const optionalText = React.createElement(React.Fragment, null, \"The Menu API includes three stateless React components:\", \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Menu, MenuItem, MenuDivider.\"), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"import MenuItem from \\\"../../core/Menu/MenuItem\\\"; \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }), \"import MenuDivider from \\\"../../core/Menu/MenuDivider\\\";\"), \"To add a submenu to a Menu, simply nest \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"MenuItem\"), \"'s within another\", \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"MenuItem\"), \". The submenu opens to the right of it's parent by default, but will adjust and flip to the left if there is not enough room to the right.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"MenuItem\"), \" API look at the API tab. \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Menu & MenuDivider\"), \" \", \"components API contains only \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"type, view, color\"), \" props. Type & View props can be omitted. \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"MenuDivider\"), \" API additional contains \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"title\"), \" - an optional header title (string).\");\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    text: optionalText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \" def \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"smooth\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \" smooth \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"smooth\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"text\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"An Item text, required for usability.\")\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether this menu item is non-interactive.\")\n  }, {\n    prop: \"href\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"A Link URL.\")\n  }, {\n    prop: \"target\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Link target attribute. Use \\\"_blank\\\" to open in a new window.\")\n  }, {\n    prop: \"icon\",\n    type: React.createElement(React.Fragment, null, \"string | element\"),\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon (or an icon element) to render before the text.\")\n  }, {\n    prop: \"label\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Right-aligned label text content, useful for displaying hotkeys.\")\n  }, {\n    prop: \"labelElement\",\n    type: React.createElement(React.Fragment, null, \"element\"),\n    desc: \"Right-aligned label content, useful for displaying hotkeys. For example, labelElement={<Icon icon='share' />}\"\n  }, {\n    prop: \"onClick\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Click event handler\")\n  }, {\n    prop: \"children\",\n    type: React.createElement(React.Fragment, null, \"array\"),\n    desc: React.createElement(React.Fragment, null, \"Children of this component will be rendered in a submenu that appears when hovering or clicking on this menu item.\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">Menu</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\" <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\" <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n&gt;      \\n      < MenuItem\\n        <i>type</i> = 'def'\\n        <i>view</i> = 'smooth'\\n        <i>color</i> = '\").concat(color, \"'\\n        <i>icon</i> = 'cog'\\n        <i>text</i> = 'Custom SVG icon'\\n        <i>label</i> = 'Label'\\n      />      \\n      < MenuDivider <i>type</i> = 'def' <i>view</i> = 'smooth' <i>color</i> = '\").concat(color, \"' />      \\n      < MenuItem\\n        <i>type</i> = 'def'\\n        <i>view</i> = 'smooth'\\n        <i>color</i> = '\").concat(color, \"'\\n        <i>icon</i> = 'new-text-box'\\n        <i>text</i> = 'New text box'\\n        />      \\n      < MenuItem <i>type</i> = 'def' <i>view</i> = 'smooth' <i>color</i> = '\").concat(color, \"' <i>text</i>=\\\"New object\\\" />      \\n      < MenuItem\\n        <i>type</i> = 'def'\\n        <i>view</i> = 'smooth'\\n        <i>color</i> = '\").concat(color, \"'\\n        <i>text</i> = 'New link'\\n        <i>labelElement</i> = { < Icon <i>icon</i>='new-link' /> }\\n      />      \\n      < MenuDivider <i>type</i> = 'def' <i>view</i> = 'smooth' <i>color</i> = '\").concat(color, \"' />      \\n      < MenuItem\\n        <i>type</i> = 'def'\\n        <i>view</i> = 'smooth'\\n        <i>color</i> = '\").concat(color, \"'\\n        <i>icon</i> = 'cog'\\n        <i>labelElement</i> = { < Icon <i>icon</i>='share' /> }\\n        <i>text</i> = 'Settings...'\\n      />\\n    </ Menu >\\n     \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Menu/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","type","view","name","color","optionalText","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { type, view, name, color } = props;\r\n\r\n  const optionalText = (\r\n    <>\r\n      The Menu API includes three stateless React components:{\" \"}\r\n      <b>Menu, MenuItem, MenuDivider.</b>\r\n      <pre>\r\n        import MenuItem from \"../../core/Menu/MenuItem\"; <br />\r\n        import MenuDivider from \"../../core/Menu/MenuDivider\";\r\n      </pre>\r\n      To add a submenu to a Menu, simply nest <b>MenuItem</b>'s within another{\" \"}\r\n      <b>MenuItem</b>. The submenu opens to the right of it's parent by default,\r\n      but will adjust and flip to the left if there is not enough room to the\r\n      right.\r\n      <br />\r\n      <b>MenuItem</b> API look at the API tab. <b>Menu & MenuDivider</b>{\" \"}\r\n      components API contains only <b>type, view, color</b> props. Type & View\r\n      props can be omitted. <br />\r\n      <b>MenuDivider</b> API additional contains <b>title</b> - an optional\r\n      header title (string).\r\n    </>\r\n  );\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} text={optionalText} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> def </b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>smooth</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> smooth </b>. The default state is <b>smooth</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"text\",\r\n      type: <>string</>,\r\n      desc: <>An Item text, required for usability.</>\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: <>boolean</>,\r\n      desc: <>Whether this menu item is non-interactive.</>\r\n    },\r\n    {\r\n      prop: \"href\",\r\n      type: <>string</>,\r\n      desc: <>A Link URL.</>\r\n    },\r\n    {\r\n      prop: \"target\",\r\n      type: <>string</>,\r\n      desc: <>Link target attribute. Use \"_blank\" to open in a new window.</>\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: <>string | element</>,\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon (or an icon element) to render before the\r\n          text.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"label\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>Right-aligned label text content, useful for displaying hotkeys.</>\r\n      )\r\n    },\r\n    {\r\n      prop: \"labelElement\",\r\n      type: <>element</>,\r\n      desc:\r\n        \"Right-aligned label content, useful for displaying hotkeys. For example, labelElement={<Icon icon='share' />}\"\r\n    },\r\n    {\r\n      prop: \"onClick\",\r\n      type: <>func</>,\r\n      desc: <>Click event handler</>\r\n    },\r\n    {\r\n      prop: \"children\",\r\n      type: <>array</>,\r\n      desc: (\r\n        <>\r\n          Children of this component will be rendered in a submenu that appears\r\n          when hovering or clicking on this menu item.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">Menu</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\" <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\" <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n&gt;      \r\n      < MenuItem\r\n        <i>type</i> = 'def'\r\n        <i>view</i> = 'smooth'\r\n        <i>color</i> = '${color}'\r\n        <i>icon</i> = 'cog'\r\n        <i>text</i> = 'Custom SVG icon'\r\n        <i>label</i> = 'Label'\r\n      />      \r\n      < MenuDivider <i>type</i> = 'def' <i>view</i> = 'smooth' <i>color</i> = '${color}' />      \r\n      < MenuItem\r\n        <i>type</i> = 'def'\r\n        <i>view</i> = 'smooth'\r\n        <i>color</i> = '${color}'\r\n        <i>icon</i> = 'new-text-box'\r\n        <i>text</i> = 'New text box'\r\n        />      \r\n      < MenuItem <i>type</i> = 'def' <i>view</i> = 'smooth' <i>color</i> = '${color}' <i>text</i>=\"New object\" />      \r\n      < MenuItem\r\n        <i>type</i> = 'def'\r\n        <i>view</i> = 'smooth'\r\n        <i>color</i> = '${color}'\r\n        <i>text</i> = 'New link'\r\n        <i>labelElement</i> = { < Icon <i>icon</i>='new-link' /> }\r\n      />      \r\n      < MenuDivider <i>type</i> = 'def' <i>view</i> = 'smooth' <i>color</i> = '${color}' />      \r\n      < MenuItem\r\n        <i>type</i> = 'def'\r\n        <i>view</i> = 'smooth'\r\n        <i>color</i> = '${color}'\r\n        <i>icon</i> = 'cog'\r\n        <i>labelElement</i> = { < Icon <i>icon</i>='share' /> }\r\n        <i>text</i> = 'Settings...'\r\n      />\r\n    </ Menu >\r\n     `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}