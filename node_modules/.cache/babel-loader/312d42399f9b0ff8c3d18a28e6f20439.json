{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX, HTMLSelect, Icon, Intent, Keys } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"./common/classes\";\nimport * as DateUtils from \"./common/dateUtils\";\nimport { getDefaultMaxTime, getDefaultMinTime, getTimeUnit, getTimeUnitClassName, isTimeUnitValid, setTimeUnit, TimeUnit, wrapTimeAtUnit } from \"./common/timeUnit\";\nimport * as Utils from \"./common/utils\";\nexport var TimePrecision = {\n  MILLISECOND: \"millisecond\",\n  MINUTE: \"minute\",\n  SECOND: \"second\"\n};\n\nvar TimePicker =\n/** @class */\nfunction (_super) {\n  __extends(TimePicker, _super);\n\n  function TimePicker(props, context) {\n    var _this = _super.call(this, props, context) || this; // begin method definitions: event handlers\n\n\n    _this.getInputChangeHandler = function (unit) {\n      return function (e) {\n        var text = getStringValueFromInputEvent(e);\n\n        switch (unit) {\n          case TimeUnit.HOUR_12:\n          case TimeUnit.HOUR_24:\n            _this.setState({\n              hourText: text\n            });\n\n            break;\n\n          case TimeUnit.MINUTE:\n            _this.setState({\n              minuteText: text\n            });\n\n            break;\n\n          case TimeUnit.SECOND:\n            _this.setState({\n              secondText: text\n            });\n\n            break;\n\n          case TimeUnit.MS:\n            _this.setState({\n              millisecondText: text\n            });\n\n            break;\n        }\n      };\n    };\n\n    _this.getInputBlurHandler = function (unit) {\n      return function (e) {\n        var _a, _b;\n\n        var text = getStringValueFromInputEvent(e);\n\n        _this.updateTime(parseInt(text, 10), unit);\n\n        (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e, unit);\n      };\n    };\n\n    _this.getInputFocusHandler = function (unit) {\n      return function (e) {\n        var _a, _b;\n\n        if (_this.props.selectAllOnFocus) {\n          e.currentTarget.select();\n        }\n\n        (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, e, unit);\n      };\n    };\n\n    _this.getInputKeyDownHandler = function (unit) {\n      return function (e) {\n        var _a;\n\n        var _b, _c;\n\n        handleKeyEvent(e, (_a = {}, _a[Keys.ARROW_UP] = function () {\n          return _this.incrementTime(unit);\n        }, _a[Keys.ARROW_DOWN] = function () {\n          return _this.decrementTime(unit);\n        }, _a[Keys.ENTER] = function () {\n          e.currentTarget.blur();\n        }, _a));\n        (_c = (_b = _this.props).onKeyDown) === null || _c === void 0 ? void 0 : _c.call(_b, e, unit);\n      };\n    };\n\n    _this.getInputKeyUpHandler = function (unit) {\n      return function (e) {\n        var _a, _b;\n\n        (_b = (_a = _this.props).onKeyUp) === null || _b === void 0 ? void 0 : _b.call(_a, e, unit);\n      };\n    };\n\n    _this.handleAmPmChange = function (e) {\n      var isNextPm = e.currentTarget.value === \"pm\";\n\n      if (isNextPm !== _this.state.isPm) {\n        var hour_1 = DateUtils.convert24HourMeridiem(_this.state.value.getHours(), isNextPm);\n\n        _this.setState({\n          isPm: isNextPm\n        }, function () {\n          return _this.updateTime(hour_1, TimeUnit.HOUR_24);\n        });\n      }\n    };\n\n    _this.incrementTime = function (unit) {\n      return _this.shiftTime(unit, 1);\n    };\n\n    _this.decrementTime = function (unit) {\n      return _this.shiftTime(unit, -1);\n    };\n\n    var value = props.minTime;\n\n    if (props.value != null) {\n      value = props.value;\n    } else if (props.defaultValue != null) {\n      value = props.defaultValue;\n    }\n\n    _this.state = _this.getFullStateFromValue(value, props.useAmPm);\n    return _this;\n  }\n\n  TimePicker.prototype.render = function () {\n    var _a;\n\n    var shouldRenderMilliseconds = this.props.precision === TimePrecision.MILLISECOND;\n    var shouldRenderSeconds = shouldRenderMilliseconds || this.props.precision === TimePrecision.SECOND;\n    var hourUnit = this.props.useAmPm ? TimeUnit.HOUR_12 : TimeUnit.HOUR_24;\n    var classes = classNames(Classes.TIMEPICKER, this.props.className, (_a = {}, _a[CoreClasses.DISABLED] = this.props.disabled, _a));\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"div\", {\n      className: Classes.TIMEPICKER_ARROW_ROW\n    }, this.maybeRenderArrowButton(true, hourUnit), this.maybeRenderArrowButton(true, TimeUnit.MINUTE), shouldRenderSeconds && this.maybeRenderArrowButton(true, TimeUnit.SECOND), shouldRenderMilliseconds && this.maybeRenderArrowButton(true, TimeUnit.MS)), React.createElement(\"div\", {\n      className: Classes.TIMEPICKER_INPUT_ROW\n    }, this.renderInput(Classes.TIMEPICKER_HOUR, hourUnit, this.state.hourText), this.renderDivider(), this.renderInput(Classes.TIMEPICKER_MINUTE, TimeUnit.MINUTE, this.state.minuteText), shouldRenderSeconds && this.renderDivider(), shouldRenderSeconds && this.renderInput(Classes.TIMEPICKER_SECOND, TimeUnit.SECOND, this.state.secondText), shouldRenderMilliseconds && this.renderDivider(\".\"), shouldRenderMilliseconds && this.renderInput(Classes.TIMEPICKER_MILLISECOND, TimeUnit.MS, this.state.millisecondText)), this.maybeRenderAmPm(), React.createElement(\"div\", {\n      className: Classes.TIMEPICKER_ARROW_ROW\n    }, this.maybeRenderArrowButton(false, hourUnit), this.maybeRenderArrowButton(false, TimeUnit.MINUTE), shouldRenderSeconds && this.maybeRenderArrowButton(false, TimeUnit.SECOND), shouldRenderMilliseconds && this.maybeRenderArrowButton(false, TimeUnit.MS)));\n  };\n\n  TimePicker.prototype.componentDidUpdate = function (prevProps) {\n    var didMinTimeChange = prevProps.minTime !== this.props.minTime;\n    var didMaxTimeChange = prevProps.maxTime !== this.props.maxTime;\n    var didBoundsChange = didMinTimeChange || didMaxTimeChange;\n    var didPropValueChange = prevProps.value !== this.props.value;\n    var shouldStateUpdate = didMinTimeChange || didMaxTimeChange || didBoundsChange || didPropValueChange;\n    var value = this.state.value;\n\n    if (didBoundsChange) {\n      value = DateUtils.getTimeInRange(this.state.value, this.props.minTime, this.props.maxTime);\n    }\n\n    if (this.props.value != null && !DateUtils.areSameTime(this.props.value, prevProps.value)) {\n      value = this.props.value;\n    }\n\n    if (shouldStateUpdate) {\n      this.setState(this.getFullStateFromValue(value, this.props.useAmPm));\n    }\n  }; // begin method definitions: rendering\n\n\n  TimePicker.prototype.maybeRenderArrowButton = function (isDirectionUp, timeUnit) {\n    var _this = this;\n\n    if (!this.props.showArrowButtons) {\n      return null;\n    }\n\n    var classes = classNames(Classes.TIMEPICKER_ARROW_BUTTON, getTimeUnitClassName(timeUnit));\n\n    var onClick = function () {\n      return (isDirectionUp ? _this.incrementTime : _this.decrementTime)(timeUnit);\n    }; // set tabIndex=-1 to ensure a valid FocusEvent relatedTarget when focused\n\n\n    return React.createElement(\"span\", {\n      tabIndex: -1,\n      className: classes,\n      onClick: onClick\n    }, React.createElement(Icon, {\n      icon: isDirectionUp ? \"chevron-up\" : \"chevron-down\"\n    }));\n  };\n\n  TimePicker.prototype.renderDivider = function (text) {\n    if (text === void 0) {\n      text = \":\";\n    }\n\n    return React.createElement(\"span\", {\n      className: Classes.TIMEPICKER_DIVIDER_TEXT\n    }, text);\n  };\n\n  TimePicker.prototype.renderInput = function (className, unit, value) {\n    var _a;\n\n    var isValid = isTimeUnitValid(unit, parseInt(value, 10));\n    var isHour = unit === TimeUnit.HOUR_12 || unit === TimeUnit.HOUR_24;\n    return React.createElement(\"input\", {\n      className: classNames(Classes.TIMEPICKER_INPUT, (_a = {}, _a[CoreClasses.intentClass(Intent.DANGER)] = !isValid, _a), className),\n      onBlur: this.getInputBlurHandler(unit),\n      onChange: this.getInputChangeHandler(unit),\n      onFocus: this.getInputFocusHandler(unit),\n      onKeyDown: this.getInputKeyDownHandler(unit),\n      onKeyUp: this.getInputKeyUpHandler(unit),\n      value: value,\n      disabled: this.props.disabled,\n      autoFocus: isHour && this.props.autoFocus\n    });\n  };\n\n  TimePicker.prototype.maybeRenderAmPm = function () {\n    if (!this.props.useAmPm) {\n      return null;\n    }\n\n    return React.createElement(HTMLSelect, {\n      className: Classes.TIMEPICKER_AMPM_SELECT,\n      disabled: this.props.disabled,\n      onChange: this.handleAmPmChange,\n      value: this.state.isPm ? \"pm\" : \"am\"\n    }, React.createElement(\"option\", {\n      value: \"am\"\n    }, \"AM\"), React.createElement(\"option\", {\n      value: \"pm\"\n    }, \"PM\"));\n  }; // begin method definitions: state modification\n\n  /**\n   * Generates a full ITimePickerState object with all text fields set to formatted strings based on value\n   */\n\n\n  TimePicker.prototype.getFullStateFromValue = function (value, useAmPm) {\n    var timeInRange = DateUtils.getTimeInRange(value, this.props.minTime, this.props.maxTime);\n    var hourUnit = useAmPm ? TimeUnit.HOUR_12 : TimeUnit.HOUR_24;\n    /* tslint:disable:object-literal-sort-keys */\n\n    return {\n      hourText: formatTime(timeInRange.getHours(), hourUnit),\n      minuteText: formatTime(timeInRange.getMinutes(), TimeUnit.MINUTE),\n      secondText: formatTime(timeInRange.getSeconds(), TimeUnit.SECOND),\n      millisecondText: formatTime(timeInRange.getMilliseconds(), TimeUnit.MS),\n      value: timeInRange,\n      isPm: DateUtils.getIsPmFrom24Hour(timeInRange.getHours())\n    };\n    /* tslint:enable:object-literal-sort-keys */\n  };\n\n  TimePicker.prototype.shiftTime = function (unit, amount) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    var newTime = getTimeUnit(unit, this.state.value) + amount;\n    this.updateTime(wrapTimeAtUnit(unit, newTime), unit);\n  };\n\n  TimePicker.prototype.updateTime = function (time, unit) {\n    var newValue = DateUtils.clone(this.state.value);\n\n    if (isTimeUnitValid(unit, time)) {\n      setTimeUnit(unit, time, newValue, this.state.isPm);\n\n      if (DateUtils.isTimeInRange(newValue, this.props.minTime, this.props.maxTime)) {\n        this.updateState({\n          value: newValue\n        });\n      } else {\n        this.updateState(this.getFullStateFromValue(this.state.value, this.props.useAmPm));\n      }\n    } else {\n      this.updateState(this.getFullStateFromValue(this.state.value, this.props.useAmPm));\n    }\n  };\n\n  TimePicker.prototype.updateState = function (state) {\n    var _a, _b;\n\n    var newState = state;\n    var hasNewValue = newState.value != null && !DateUtils.areSameTime(newState.value, this.state.value);\n\n    if (this.props.value == null) {\n      // component is uncontrolled\n      if (hasNewValue) {\n        newState = this.getFullStateFromValue(newState.value, this.props.useAmPm);\n      }\n\n      this.setState(newState);\n    } else {\n      // component is controlled, and there's a new value\n      // so set inputs' text based off of _old_ value and later fire onChange with new value\n      if (hasNewValue) {\n        this.setState(this.getFullStateFromValue(this.state.value, this.props.useAmPm));\n      } else {\n        // no new value, this means only text has changed (from user typing)\n        // we want inputs to change, so update state with new text for the inputs\n        // but don't change actual value\n        this.setState(__assign(__assign({}, newState), {\n          value: DateUtils.clone(this.state.value)\n        }));\n      }\n    }\n\n    if (hasNewValue) {\n      (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, newState.value);\n    }\n  };\n\n  TimePicker.defaultProps = {\n    autoFocus: false,\n    disabled: false,\n    maxTime: getDefaultMaxTime(),\n    minTime: getDefaultMinTime(),\n    precision: TimePrecision.MINUTE,\n    selectAllOnFocus: false,\n    showArrowButtons: false,\n    useAmPm: false\n  };\n  TimePicker.displayName = DISPLAYNAME_PREFIX + \".TimePicker\";\n  return TimePicker;\n}(React.Component);\n\nexport { TimePicker };\n\nfunction formatTime(time, unit) {\n  switch (unit) {\n    case TimeUnit.HOUR_24:\n      return time.toString();\n\n    case TimeUnit.HOUR_12:\n      return DateUtils.get12HourFrom24Hour(time).toString();\n\n    case TimeUnit.MINUTE:\n    case TimeUnit.SECOND:\n      return Utils.padWithZeroes(time.toString(), 2);\n\n    case TimeUnit.MS:\n      return Utils.padWithZeroes(time.toString(), 3);\n\n    default:\n      throw Error(\"Invalid TimeUnit\");\n  }\n}\n\nfunction getStringValueFromInputEvent(e) {\n  return e.target.value;\n}\n\nfunction handleKeyEvent(e, actions, preventDefault) {\n  if (preventDefault === void 0) {\n    preventDefault = true;\n  }\n\n  for (var _i = 0, _a = Object.keys(actions); _i < _a.length; _i++) {\n    var k = _a[_i];\n    var key = Number(k); // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n\n    if (e.which === key) {\n      if (preventDefault) {\n        e.preventDefault();\n      }\n\n      actions[key]();\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}