{"ast":null,"code":"import _defineProperty from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Select/films.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport Menu from \"../../core/Menu\";\nimport MenuItem from \"../../core/Menu/MenuItem\";\nimport React from \"react\";\n/** Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top */\n\nexport const TOP_100_FILMS = [{\n  title: \"The Shawshank Redemption\",\n  year: 1994\n}, {\n  title: \"The Godfather\",\n  year: 1972\n}, {\n  title: \"The Godfather: Part II\",\n  year: 1974\n}, {\n  title: \"The Dark Knight\",\n  year: 2008\n}, {\n  title: \"12 Angry Men\",\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: \"Pulp Fiction\",\n  year: 1994\n}, {\n  title: \"The Lord of the Rings: The Return of the King\",\n  year: 2003\n}, {\n  title: \"The Good, the Bad and the Ugly\",\n  year: 1966\n}, {\n  title: \"Fight Club\",\n  year: 1999\n}, {\n  title: \"The Lord of the Rings: The Fellowship of the Ring\",\n  year: 2001\n}, {\n  title: \"Star Wars: Episode V - The Empire Strikes Back\",\n  year: 1980\n}, {\n  title: \"Forrest Gump\",\n  year: 1994\n}, {\n  title: \"Inception\",\n  year: 2010\n}, {\n  title: \"The Lord of the Rings: The Two Towers\",\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: \"Goodfellas\",\n  year: 1990\n}, {\n  title: \"The Matrix\",\n  year: 1999\n}, {\n  title: \"Seven Samurai\",\n  year: 1954\n}, {\n  title: \"Star Wars: Episode IV - A New Hope\",\n  year: 1977\n}, {\n  title: \"City of God\",\n  year: 2002\n}, {\n  title: \"Se7en\",\n  year: 1995\n}, {\n  title: \"The Silence of the Lambs\",\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: \"Life Is Beautiful\",\n  year: 1997\n}, {\n  title: \"The Usual Suspects\",\n  year: 1995\n}, {\n  title: \"Léon: The Professional\",\n  year: 1994\n}, {\n  title: \"Spirited Away\",\n  year: 2001\n}, {\n  title: \"Saving Private Ryan\",\n  year: 1998\n}, {\n  title: \"Once Upon a Time in the West\",\n  year: 1968\n}, {\n  title: \"American History X\",\n  year: 1998\n}, {\n  title: \"Interstellar\",\n  year: 2014\n}, {\n  title: \"Casablanca\",\n  year: 1942\n}, {\n  title: \"City Lights\",\n  year: 1931\n}, {\n  title: \"Psycho\",\n  year: 1960\n}, {\n  title: \"The Green Mile\",\n  year: 1999\n}, {\n  title: \"The Intouchables\",\n  year: 2011\n}, {\n  title: \"Modern Times\",\n  year: 1936\n}, {\n  title: \"Raiders of the Lost Ark\",\n  year: 1981\n}, {\n  title: \"Rear Window\",\n  year: 1954\n}, {\n  title: \"The Pianist\",\n  year: 2002\n}, {\n  title: \"The Departed\",\n  year: 2006\n}, {\n  title: \"Terminator 2: Judgment Day\",\n  year: 1991\n}, {\n  title: \"Back to the Future\",\n  year: 1985\n}, {\n  title: \"Whiplash\",\n  year: 2014\n}, {\n  title: \"Gladiator\",\n  year: 2000\n}, {\n  title: \"Memento\",\n  year: 2000\n}, {\n  title: \"The Prestige\",\n  year: 2006\n}, {\n  title: \"The Lion King\",\n  year: 1994\n}, {\n  title: \"Apocalypse Now\",\n  year: 1979\n}, {\n  title: \"Alien\",\n  year: 1979\n}, {\n  title: \"Sunset Boulevard\",\n  year: 1950\n}, {\n  title: \"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\",\n  year: 1964\n}, {\n  title: \"The Great Dictator\",\n  year: 1940\n}, {\n  title: \"Cinema Paradiso\",\n  year: 1988\n}, {\n  title: \"The Lives of Others\",\n  year: 2006\n}, {\n  title: \"Grave of the Fireflies\",\n  year: 1988\n}, {\n  title: \"Paths of Glory\",\n  year: 1957\n}, {\n  title: \"Django Unchained\",\n  year: 2012\n}, {\n  title: \"The Shining\",\n  year: 1980\n}, {\n  title: \"WALL·E\",\n  year: 2008\n}, {\n  title: \"American Beauty\",\n  year: 1999\n}, {\n  title: \"The Dark Knight Rises\",\n  year: 2012\n}, {\n  title: \"Princess Mononoke\",\n  year: 1997\n}, {\n  title: \"Aliens\",\n  year: 1986\n}, {\n  title: \"Oldboy\",\n  year: 2003\n}, {\n  title: \"Once Upon a Time in America\",\n  year: 1984\n}, {\n  title: \"Witness for the Prosecution\",\n  year: 1957\n}, {\n  title: \"Das Boot\",\n  year: 1981\n}, {\n  title: \"Citizen Kane\",\n  year: 1941\n}, {\n  title: \"North by Northwest\",\n  year: 1959\n}, {\n  title: \"Vertigo\",\n  year: 1958\n}, {\n  title: \"Star Wars: Episode VI - Return of the Jedi\",\n  year: 1983\n}, {\n  title: \"Reservoir Dogs\",\n  year: 1992\n}, {\n  title: \"Braveheart\",\n  year: 1995\n}, {\n  title: \"M\",\n  year: 1931\n}, {\n  title: \"Requiem for a Dream\",\n  year: 2000\n}, {\n  title: \"Amélie\",\n  year: 2001\n}, {\n  title: \"A Clockwork Orange\",\n  year: 1971\n}, {\n  title: \"Like Stars on Earth\",\n  year: 2007\n}, {\n  title: \"Taxi Driver\",\n  year: 1976\n}, {\n  title: \"Lawrence of Arabia\",\n  year: 1962\n}, {\n  title: \"Double Indemnity\",\n  year: 1944\n}, {\n  title: \"Eternal Sunshine of the Spotless Mind\",\n  year: 2004\n}, {\n  title: \"Amadeus\",\n  year: 1984\n}, {\n  title: \"To Kill a Mockingbird\",\n  year: 1962\n}, {\n  title: \"Toy Story 3\",\n  year: 2010\n}, {\n  title: \"Logan\",\n  year: 2017\n}, {\n  title: \"Full Metal Jacket\",\n  year: 1987\n}, {\n  title: \"Dangal\",\n  year: 2016\n}, {\n  title: \"The Sting\",\n  year: 1973\n}, {\n  title: \"2001: A Space Odyssey\",\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: \"Toy Story\",\n  year: 1995\n}, {\n  title: \"Bicycle Thieves\",\n  year: 1948\n}, {\n  title: \"The Kid\",\n  year: 1921\n}, {\n  title: \"Inglourious Basterds\",\n  year: 2009\n}, {\n  title: \"Snatch\",\n  year: 2000\n}, {\n  title: \"3 Idiots\",\n  year: 2009\n}, {\n  title: \"Monty Python and the Holy Grail\",\n  year: 1975\n}].map((m, index) => _objectSpread({}, m, {\n  rank: index + 1\n}));\nexport const renderFilm = (film, {\n  handleClick,\n  modifiers,\n  query\n}) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n\n  const text = \"\".concat(film.rank, \". \").concat(film.title);\n  return React.createElement(MenuItem, {\n    active: modifiers.active,\n    disabled: modifiers.disabled,\n    label: film.year.toString(),\n    key: film.rank,\n    onClick: handleClick,\n    text: highlightText(text, query),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  });\n};\nexport const renderMenuList = ({\n  items,\n  itemsParentRef,\n  query,\n  renderItem\n}) => {\n  const renderedItems = items.map(renderItem).filter(item => item != null);\n  return React.createElement(Menu, {\n    type: \"default\",\n    view: \"smooth\",\n    color: \"primary\",\n    ulRef: itemsParentRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    type: \"default\",\n    view: \"smooth\",\n    color: \"primary\",\n    disabled: true,\n    text: \"Found \".concat(renderedItems.length, \" items matching \\\"\").concat(query, \"\\\"\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), renderedItems);\n};\nexport const filterFilm = (query, film) => {\n  return \"\".concat(film.rank, \". \").concat(film.title.toLowerCase(), \" \").concat(film.year).indexOf(query.toLowerCase()) >= 0;\n};\n\nfunction highlightText(text, query) {\n  let lastIndex = 0;\n  const words = query.split(/\\s+/).filter(word => word.length > 0).map(escapeRegExpChars);\n\n  if (words.length === 0) {\n    return [text];\n  }\n\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\n  const tokens = [];\n\n  while (true) {\n    const match = regexp.exec(text);\n\n    if (!match) {\n      break;\n    }\n\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n\n    lastIndex = regexp.lastIndex;\n    tokens.push(React.createElement(\"strong\", {\n      key: lastIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, match[0]));\n  }\n\n  const rest = text.slice(lastIndex);\n\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n\n  return tokens;\n}\n\nfunction escapeRegExpChars(text) {\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nexport const filmSelectProps = {\n  itemPredicate: filterFilm,\n  itemRenderer: renderFilm,\n  itemListRenderer: renderMenuList,\n  items: TOP_100_FILMS\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Select/films.jsx"],"names":["Menu","MenuItem","React","TOP_100_FILMS","title","year","map","m","index","rank","renderFilm","film","handleClick","modifiers","query","matchesPredicate","text","active","disabled","toString","highlightText","renderMenuList","items","itemsParentRef","renderItem","renderedItems","filter","item","length","filterFilm","toLowerCase","indexOf","lastIndex","words","split","word","escapeRegExpChars","regexp","RegExp","join","tokens","match","exec","before","slice","push","rest","replace","filmSelectProps","itemPredicate","itemRenderer","itemListRenderer"],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\n\nimport Menu from \"../../core/Menu\";\nimport MenuItem from \"../../core/Menu/MenuItem\";\nimport React from \"react\";\n\n/** Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top */\nexport const TOP_100_FILMS = [\n  { title: \"The Shawshank Redemption\", year: 1994 },\n  { title: \"The Godfather\", year: 1972 },\n  { title: \"The Godfather: Part II\", year: 1974 },\n  { title: \"The Dark Knight\", year: 2008 },\n  { title: \"12 Angry Men\", year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: \"Pulp Fiction\", year: 1994 },\n  { title: \"The Lord of the Rings: The Return of the King\", year: 2003 },\n  { title: \"The Good, the Bad and the Ugly\", year: 1966 },\n  { title: \"Fight Club\", year: 1999 },\n  { title: \"The Lord of the Rings: The Fellowship of the Ring\", year: 2001 },\n  { title: \"Star Wars: Episode V - The Empire Strikes Back\", year: 1980 },\n  { title: \"Forrest Gump\", year: 1994 },\n  { title: \"Inception\", year: 2010 },\n  { title: \"The Lord of the Rings: The Two Towers\", year: 2002 },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: \"Goodfellas\", year: 1990 },\n  { title: \"The Matrix\", year: 1999 },\n  { title: \"Seven Samurai\", year: 1954 },\n  { title: \"Star Wars: Episode IV - A New Hope\", year: 1977 },\n  { title: \"City of God\", year: 2002 },\n  { title: \"Se7en\", year: 1995 },\n  { title: \"The Silence of the Lambs\", year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: \"Life Is Beautiful\", year: 1997 },\n  { title: \"The Usual Suspects\", year: 1995 },\n  { title: \"Léon: The Professional\", year: 1994 },\n  { title: \"Spirited Away\", year: 2001 },\n  { title: \"Saving Private Ryan\", year: 1998 },\n  { title: \"Once Upon a Time in the West\", year: 1968 },\n  { title: \"American History X\", year: 1998 },\n  { title: \"Interstellar\", year: 2014 },\n  { title: \"Casablanca\", year: 1942 },\n  { title: \"City Lights\", year: 1931 },\n  { title: \"Psycho\", year: 1960 },\n  { title: \"The Green Mile\", year: 1999 },\n  { title: \"The Intouchables\", year: 2011 },\n  { title: \"Modern Times\", year: 1936 },\n  { title: \"Raiders of the Lost Ark\", year: 1981 },\n  { title: \"Rear Window\", year: 1954 },\n  { title: \"The Pianist\", year: 2002 },\n  { title: \"The Departed\", year: 2006 },\n  { title: \"Terminator 2: Judgment Day\", year: 1991 },\n  { title: \"Back to the Future\", year: 1985 },\n  { title: \"Whiplash\", year: 2014 },\n  { title: \"Gladiator\", year: 2000 },\n  { title: \"Memento\", year: 2000 },\n  { title: \"The Prestige\", year: 2006 },\n  { title: \"The Lion King\", year: 1994 },\n  { title: \"Apocalypse Now\", year: 1979 },\n  { title: \"Alien\", year: 1979 },\n  { title: \"Sunset Boulevard\", year: 1950 },\n  {\n    title:\n      \"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\",\n    year: 1964\n  },\n  { title: \"The Great Dictator\", year: 1940 },\n  { title: \"Cinema Paradiso\", year: 1988 },\n  { title: \"The Lives of Others\", year: 2006 },\n  { title: \"Grave of the Fireflies\", year: 1988 },\n  { title: \"Paths of Glory\", year: 1957 },\n  { title: \"Django Unchained\", year: 2012 },\n  { title: \"The Shining\", year: 1980 },\n  { title: \"WALL·E\", year: 2008 },\n  { title: \"American Beauty\", year: 1999 },\n  { title: \"The Dark Knight Rises\", year: 2012 },\n  { title: \"Princess Mononoke\", year: 1997 },\n  { title: \"Aliens\", year: 1986 },\n  { title: \"Oldboy\", year: 2003 },\n  { title: \"Once Upon a Time in America\", year: 1984 },\n  { title: \"Witness for the Prosecution\", year: 1957 },\n  { title: \"Das Boot\", year: 1981 },\n  { title: \"Citizen Kane\", year: 1941 },\n  { title: \"North by Northwest\", year: 1959 },\n  { title: \"Vertigo\", year: 1958 },\n  { title: \"Star Wars: Episode VI - Return of the Jedi\", year: 1983 },\n  { title: \"Reservoir Dogs\", year: 1992 },\n  { title: \"Braveheart\", year: 1995 },\n  { title: \"M\", year: 1931 },\n  { title: \"Requiem for a Dream\", year: 2000 },\n  { title: \"Amélie\", year: 2001 },\n  { title: \"A Clockwork Orange\", year: 1971 },\n  { title: \"Like Stars on Earth\", year: 2007 },\n  { title: \"Taxi Driver\", year: 1976 },\n  { title: \"Lawrence of Arabia\", year: 1962 },\n  { title: \"Double Indemnity\", year: 1944 },\n  { title: \"Eternal Sunshine of the Spotless Mind\", year: 2004 },\n  { title: \"Amadeus\", year: 1984 },\n  { title: \"To Kill a Mockingbird\", year: 1962 },\n  { title: \"Toy Story 3\", year: 2010 },\n  { title: \"Logan\", year: 2017 },\n  { title: \"Full Metal Jacket\", year: 1987 },\n  { title: \"Dangal\", year: 2016 },\n  { title: \"The Sting\", year: 1973 },\n  { title: \"2001: A Space Odyssey\", year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: \"Toy Story\", year: 1995 },\n  { title: \"Bicycle Thieves\", year: 1948 },\n  { title: \"The Kid\", year: 1921 },\n  { title: \"Inglourious Basterds\", year: 2009 },\n  { title: \"Snatch\", year: 2000 },\n  { title: \"3 Idiots\", year: 2009 },\n  { title: \"Monty Python and the Holy Grail\", year: 1975 }\n].map((m, index) => ({ ...m, rank: index + 1 }));\n\nexport const renderFilm  = (\n  film,\n  { handleClick, modifiers, query }\n) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n  const text = `${film.rank}. ${film.title}`;\n  return (\n    <MenuItem\n      active={modifiers.active}\n      disabled={modifiers.disabled}\n      label={film.year.toString()}\n      key={film.rank}\n      onClick={handleClick}\n      text={highlightText(text, query)}\n    />\n  );\n};\n\nexport const renderMenuList = ({ items, itemsParentRef, query, renderItem }) => {\n  const renderedItems = items.map(renderItem).filter(item => item != null);\n  return (\n      <Menu\n        type=\"default\"\n        view=\"smooth\"\n        color=\"primary\"\n        ulRef={itemsParentRef}\n      >\n          <MenuItem\n            type=\"default\"\n            view=\"smooth\"\n            color=\"primary\"\n            disabled={true}\n            text={`Found ${renderedItems.length} items matching \"${query}\"`}\n          />\n          {renderedItems}\n      </Menu>\n  );\n};\n\nexport const filterFilm = (query, film) => {\n  return (\n    `${film.rank}. ${film.title.toLowerCase()} ${film.year}`.indexOf(\n      query.toLowerCase()\n    ) >= 0\n  );\n};\n\nfunction highlightText(text, query) {\n  let lastIndex = 0;\n  const words = query\n    .split(/\\s+/)\n    .filter((word) => word.length > 0)\n    .map(escapeRegExpChars);\n  if (words.length === 0) {\n    return [text];\n  }\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\n  const tokens = [];\n  while (true) {\n    const match = regexp.exec(text);\n    if (!match) {\n      break;\n    }\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n    lastIndex = regexp.lastIndex;\n    tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n  }\n  const rest = text.slice(lastIndex);\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n  return tokens;\n}\n\nfunction escapeRegExpChars(text) {\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nexport const filmSelectProps = {\n  itemPredicate: filterFilm,\n  itemRenderer: renderFilm,\n  itemListRenderer: renderMenuList,\n  items: TOP_100_FILMS\n};\n"]},"metadata":{},"sourceType":"module"}