{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Badge/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        view = props.view,\n        color = props.color,\n        isHide = props.isHide,\n        isDot = props.isDot,\n        isLeft = props.isLeft,\n        isBottom = props.isBottom,\n        dense = props.dense;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" filled | smooth | outlined \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"value\",\n    type: \"string\",\n    desc: React.createElement(React.Fragment, null, \"Badge value. Haven't default state.\")\n  }, {\n    prop: \"dense\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this badge should use minimal styles.\")\n  }, {\n    prop: \"hide\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the badge will be hidden. The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"dot\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the badge form will be \\\"dot\\\". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"left\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the badge position will be \\\"left\\\". The default position of badge is on the right. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"bottom\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the badge position will be \\\"bottom\\\". The default position of badge is on the top. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"false\"))\n  }];\n  /** Code source */\n\n  const Code = \"<span class=\\\"cmnt\\\">/*** DEMO #1 ***/</span>\\n&lt;<span class=\\\"el\\\">Badge</span>\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\".concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">New</span>\\\"\\n  \").concat(dense ? \"<span class=\\\"attr\\\">dense</span>\" : '', \"\\n  \").concat(isDot ? \"<span class=\\\"attr\\\">dot</span>\" : '', \"\\n  \").concat(isLeft ? \"<span class=\\\"attr\\\">left</span>\" : '', \"\\n  \").concat(isBottom ? \"<span class=\\\"attr\\\">bottom</span>\" : '', \"\\n  \").concat(isHide ? \"<span class=\\\"attr\\\">hide</span>={<span class=\\\"js\\\">hideCondition</span>}\" : '', \"\\n&gt;\\n  &lt;<span class=\\\"el\\\">Button</span> <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">Button</span>\\\" <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">outlined</span>\\\" /&gt;\\n&lt;/<span class=\\\"el\\\">Badge</span>&gt;<br />\\n<span class=\\\"cmnt\\\">/*** DEMO #2 ***/</span>\\n&lt;<span class=\\\"el\\\">Badge</span>\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">9</span>\\\"\\n  <span class=\\\"attr\\\">style</span>={{ <span class=\\\"attr\\\">marginLeft</span>: <span class=\\\"val\\\">\\\"4rem\\\"</span> }}\\n  \").concat(dense ? \"<span class=\\\"attr\\\">dense</span>\" : '', \"\\n  \").concat(isDot ? \"<span class=\\\"attr\\\">dot</span>\" : '', \"\\n  \").concat(isLeft ? \"<span class=\\\"attr\\\">left</span>\" : '', \"\\n  \").concat(isBottom ? \"<span class=\\\"attr\\\">bottom</span>\" : '', \"\\n  \").concat(isHide ? \"<span class=\\\"attr\\\">hide</span>={<span class=\\\"js\\\">hideCondition</span>}\" : '', \"\\n&gt;\\n  &lt;<span class=\\\"el\\\">Button</span> <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">A</span>\\\" <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">circle</span>\\\" <span class=\\\"attr\\\">dense</span> <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">filled</span>\\\" /&gt;\\n&lt;/<span class=\\\"el\\\">Badge</span>&gt;\\n\");\n\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\n\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: trimCode(Code),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Badge/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","view","color","isHide","isDot","isLeft","isBottom","dense","OverviewText","APIData","prop","type","desc","Code","trimCode","code","replace"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GAC4CD,KAD5C,CAClBC,IADkB;AAAA,QACZC,IADY,GAC4CF,KAD5C,CACZE,IADY;AAAA,QACNC,KADM,GAC4CH,KAD5C,CACNG,KADM;AAAA,QACCC,MADD,GAC4CJ,KAD5C,CACCI,MADD;AAAA,QACSC,KADT,GAC4CL,KAD5C,CACSK,KADT;AAAA,QACgBC,MADhB,GAC4CN,KAD5C,CACgBM,MADhB;AAAA,QACwBC,QADxB,GAC4CP,KAD5C,CACwBO,QADxB;AAAA,QACkCC,KADlC,GAC4CR,KAD5C,CACkCQ,KADlC;AAE1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAER,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMS,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,+DAE4D,GAF5D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAHF,4BAG4D,GAH5D,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AARJ,GADc,EAiBd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,gEAE6D,GAF7D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,2GAGyC,GAHzC,CAHF,6BAQyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARzB;AARJ,GAjBc,EAqCd;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GArCc,EA2Cd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3Cc,EAgDd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEC,IAAAA,IAAI,EAAE;AAPR,GAhDc,EAyDd;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEC,IAAAA,IAAI,EACF,4GACiE,GADjE,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AARJ,GAzDc,EAuEd;AACEF,IAAAA,IAAI,EAAE,KADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEC,IAAAA,IAAI,EACF,kHACqE,GADrE,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AARJ,GAvEc,EAqFd;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEC,IAAAA,IAAI,EACF,uKAE0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAF1D;AARJ,GArFc,EAmGd;AACEF,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEC,IAAAA,IAAI,EACF,uKAEwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFxD;AARJ,GAnGc,CAAhB;AAmHA;;AACA,QAAMC,IAAI,0JAE0CZ,IAF1C,kFAG2CC,KAH3C,iGAKRK,KAAK,yCAAuC,EALpC,iBAMRH,KAAK,uCAAqC,EANlC,iBAORC,MAAM,wCAAsC,EAPpC,iBAQRC,QAAQ,0CAAwC,EARxC,iBASRH,MAAM,kFAA8E,EAT5E,gZAe0CF,IAf1C,kFAgB2CC,KAhB3C,sNAmBRK,KAAK,yCAAuC,EAnBpC,iBAoBRH,KAAK,uCAAqC,EApBlC,iBAqBRC,MAAM,wCAAsC,EArBpC,iBAsBRC,QAAQ,0CAAwC,EAtBxC,iBAuBRH,MAAM,kFAA8E,EAvB5E,uVAAV;;AA6BA,QAAMW,QAAQ,GAAGC,IAAI,IAAIA,IAAI,CAACC,OAAL,CAAa,eAAb,EAA8B,EAA9B,CAAzB;;AAEA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAER,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEK,QAAQ,CAACD,IAAD,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA1JM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, view, color, isHide, isDot, isLeft, isBottom, dense } = props;\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | smooth | outlined </b>. The default state is{\" \"}\r\n          <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: \"string\",\r\n      desc: <>Badge value. Haven't default state.</>\r\n    },\r\n    {\r\n      prop: \"dense\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Whether this badge should use minimal styles.</>\r\n    },\r\n    {\r\n      prop: \"hide\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the badge will be hidden. The default state is{\" \"}\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"dot\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the badge form will be \"dot\". The default state is{\" \"}\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"left\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the badge position will be \"left\". The default\r\n          position of badge is on the right. The default state is <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"bottom\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the badge position will be \"bottom\". The default\r\n          position of badge is on the top. The default state is <b>false</b>\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `<span class=\"cmnt\">/*** DEMO #1 ***/</span>\r\n&lt;<span class=\"el\">Badge</span>\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">New</span>\"\r\n  ${dense ? `<span class=\"attr\">dense</span>` : ''}\r\n  ${isDot ? `<span class=\"attr\">dot</span>` : ''}\r\n  ${isLeft ? `<span class=\"attr\">left</span>` : ''}\r\n  ${isBottom ? `<span class=\"attr\">bottom</span>` : ''}\r\n  ${isHide ? `<span class=\"attr\">hide</span>={<span class=\"js\">hideCondition</span>}` : ''}\r\n&gt;\r\n  &lt;<span class=\"el\">Button</span> <span class=\"attr\">text</span>=\"<span class=\"val\">Button</span>\" <span class=\"attr\">view</span>=\"<span class=\"val\">outlined</span>\" /&gt;\r\n&lt;/<span class=\"el\">Badge</span>&gt;<br />\r\n<span class=\"cmnt\">/*** DEMO #2 ***/</span>\r\n&lt;<span class=\"el\">Badge</span>\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">9</span>\"\r\n  <span class=\"attr\">style</span>={{ <span class=\"attr\">marginLeft</span>: <span class=\"val\">\"4rem\"</span> }}\r\n  ${dense ? `<span class=\"attr\">dense</span>` : ''}\r\n  ${isDot ? `<span class=\"attr\">dot</span>` : ''}\r\n  ${isLeft ? `<span class=\"attr\">left</span>` : ''}\r\n  ${isBottom ? `<span class=\"attr\">bottom</span>` : ''}\r\n  ${isHide ? `<span class=\"attr\">hide</span>={<span class=\"js\">hideCondition</span>}` : ''}\r\n&gt;\r\n  &lt;<span class=\"el\">Button</span> <span class=\"attr\">text</span>=\"<span class=\"val\">A</span>\" <span class=\"attr\">type</span>=\"<span class=\"val\">circle</span>\" <span class=\"attr\">dense</span> <span class=\"attr\">view</span>=\"<span class=\"val\">filled</span>\" /&gt;\r\n&lt;/<span class=\"el\">Badge</span>&gt;\r\n`;\r\n\r\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={trimCode(Code)} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}