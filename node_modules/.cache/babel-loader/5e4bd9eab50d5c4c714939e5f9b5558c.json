{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __spreadArrays } from \"tslib\";\nimport { AbstractPureComponent2, Button, DISPLAYNAME_PREFIX, Divider } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport DayPicker from \"react-day-picker\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport * as Classes from \"./common/classes\";\nimport * as DateUtils from \"./common/dateUtils\";\nimport * as Errors from \"./common/errors\";\nimport { DatePickerCaption } from \"./datePickerCaption\";\nimport { getDefaultMaxDate, getDefaultMinDate } from \"./datePickerCore\";\nimport { DatePickerNavbar } from \"./datePickerNavbar\";\nimport { Shortcuts } from \"./shortcuts\";\nimport { TimePicker } from \"./timePicker\";\n\nvar DatePicker =\n/** @class */\nfunction (_super) {\n  __extends(DatePicker, _super);\n\n  function DatePicker(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.ignoreNextMonthChange = false;\n\n    _this.shouldHighlightCurrentDay = function (date) {\n      var highlightCurrentDay = _this.props.highlightCurrentDay;\n      return highlightCurrentDay && DateUtils.isToday(date);\n    };\n\n    _this.getDatePickerModifiers = function () {\n      var modifiers = _this.props.modifiers;\n      return __assign({\n        isToday: _this.shouldHighlightCurrentDay\n      }, modifiers);\n    };\n\n    _this.renderDay = function (day) {\n      var date = day.getDate();\n      return React.createElement(\"div\", {\n        className: Classes.DATEPICKER_DAY_WRAPPER\n      }, date);\n    };\n\n    _this.disabledDays = function (day) {\n      return !DateUtils.isDayInRange(day, [_this.props.minDate, _this.props.maxDate]);\n    };\n\n    _this.getDisabledDaysModifier = function () {\n      var disabledDays = _this.props.dayPickerProps.disabledDays;\n      return Array.isArray(disabledDays) ? __spreadArrays([_this.disabledDays], disabledDays) : [_this.disabledDays, disabledDays];\n    };\n\n    _this.renderCaption = function (props) {\n      return React.createElement(DatePickerCaption, __assign({}, props, {\n        maxDate: _this.props.maxDate,\n        minDate: _this.props.minDate,\n        onDateChange: _this.handleMonthChange,\n        reverseMonthAndYearMenus: _this.props.reverseMonthAndYearMenus\n      }));\n    };\n\n    _this.renderNavbar = function (props) {\n      return React.createElement(DatePickerNavbar, __assign({}, props, {\n        maxDate: _this.props.maxDate,\n        minDate: _this.props.minDate\n      }));\n    };\n\n    _this.handleDayClick = function (day, modifiers, e) {\n      var _a, _b;\n\n      (_b = (_a = _this.props.dayPickerProps).onDayClick) === null || _b === void 0 ? void 0 : _b.call(_a, day, modifiers, e);\n\n      if (modifiers.disabled) {\n        return;\n      }\n\n      _this.updateDay(day); // allow toggling selected date by clicking it again (if prop enabled)\n\n\n      var newValue = _this.props.canClearSelection && modifiers.selected ? null : DateUtils.getDateTime(day, _this.state.value);\n\n      _this.updateValue(newValue, true);\n    };\n\n    _this.handleShortcutClick = function (shortcut, selectedShortcutIndex) {\n      var _a = _this.props,\n          onShortcutChange = _a.onShortcutChange,\n          currentShortcutIndex = _a.selectedShortcutIndex;\n      var dateRange = shortcut.dateRange,\n          includeTime = shortcut.includeTime;\n      var newDate = dateRange[0];\n      var newValue = includeTime ? newDate : DateUtils.getDateTime(newDate, _this.state.value);\n\n      _this.updateDay(newDate);\n\n      _this.updateValue(newValue, true);\n\n      if (currentShortcutIndex === undefined) {\n        _this.setState({\n          selectedShortcutIndex: selectedShortcutIndex\n        });\n      }\n\n      var datePickerShortcut = __assign(__assign({}, shortcut), {\n        date: shortcut.dateRange[0]\n      });\n\n      onShortcutChange === null || onShortcutChange === void 0 ? void 0 : onShortcutChange(datePickerShortcut, selectedShortcutIndex);\n    };\n\n    _this.updateDay = function (day) {\n      if (_this.props.value === undefined) {\n        // set now if uncontrolled, otherwise they'll be updated in `componentDidUpdate`\n        _this.setState({\n          displayMonth: day.getMonth(),\n          displayYear: day.getFullYear(),\n          selectedDay: day.getDate()\n        });\n      }\n\n      if (_this.state.value != null && _this.state.value.getMonth() !== day.getMonth()) {\n        _this.ignoreNextMonthChange = true;\n      }\n    };\n\n    _this.handleClearClick = function () {\n      return _this.updateValue(null, true);\n    };\n\n    _this.handleMonthChange = function (newDate) {\n      var _a, _b;\n\n      var date = _this.computeValidDateInSpecifiedMonthYear(newDate.getFullYear(), newDate.getMonth());\n\n      _this.setState({\n        displayMonth: date.getMonth(),\n        displayYear: date.getFullYear()\n      });\n\n      if (_this.state.value !== null) {\n        // if handleDayClick just got run (so this flag is set), then the\n        // user selected a date in a new month, so don't invoke onChange a\n        // second time\n        _this.updateValue(date, false, _this.ignoreNextMonthChange);\n\n        _this.ignoreNextMonthChange = false;\n      }\n\n      (_b = (_a = _this.props.dayPickerProps).onMonthChange) === null || _b === void 0 ? void 0 : _b.call(_a, date);\n    };\n\n    _this.handleTodayClick = function () {\n      var value = new Date();\n      var displayMonth = value.getMonth();\n      var displayYear = value.getFullYear();\n      var selectedDay = value.getDate();\n\n      _this.setState({\n        displayMonth: displayMonth,\n        displayYear: displayYear,\n        selectedDay: selectedDay\n      });\n\n      _this.updateValue(value, true);\n    };\n\n    _this.handleTimeChange = function (time) {\n      var _a, _b;\n\n      (_b = (_a = _this.props.timePickerProps).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, time);\n      var value = _this.state.value;\n      var newValue = DateUtils.getDateTime(value != null ? value : new Date(), time);\n\n      _this.updateValue(newValue, true);\n    };\n\n    var value = getInitialValue(props);\n    var initialMonth = getInitialMonth(props, value);\n    _this.state = {\n      displayMonth: initialMonth.getMonth(),\n      displayYear: initialMonth.getFullYear(),\n      selectedDay: value == null ? null : value.getDate(),\n      selectedShortcutIndex: _this.props.selectedShortcutIndex !== undefined ? _this.props.selectedShortcutIndex : -1,\n      value: value\n    };\n    return _this;\n  }\n\n  DatePicker_1 = DatePicker;\n\n  DatePicker.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        dayPickerProps = _b.dayPickerProps,\n        locale = _b.locale,\n        localeUtils = _b.localeUtils,\n        maxDate = _b.maxDate,\n        minDate = _b.minDate,\n        showActionsBar = _b.showActionsBar;\n    var _c = this.state,\n        displayMonth = _c.displayMonth,\n        displayYear = _c.displayYear;\n    return React.createElement(\"div\", {\n      className: classNames(Classes.DATEPICKER, className)\n    }, this.maybeRenderShortcuts(), React.createElement(\"div\", null, React.createElement(DayPicker, __assign({\n      showOutsideDays: true,\n      locale: locale,\n      localeUtils: localeUtils,\n      modifiers: this.getDatePickerModifiers()\n    }, dayPickerProps, {\n      canChangeMonth: true,\n      captionElement: this.renderCaption,\n      navbarElement: this.renderNavbar,\n      disabledDays: this.getDisabledDaysModifier(),\n      fromMonth: minDate,\n      month: new Date(displayYear, displayMonth),\n      onDayClick: this.handleDayClick,\n      onMonthChange: this.handleMonthChange,\n      selectedDays: this.state.value,\n      toMonth: maxDate,\n      renderDay: (_a = dayPickerProps === null || dayPickerProps === void 0 ? void 0 : dayPickerProps.renderDay) !== null && _a !== void 0 ? _a : this.renderDay\n    })), this.maybeRenderTimePicker(), showActionsBar && this.renderOptionsBar()));\n  };\n\n  DatePicker.prototype.componentDidUpdate = function (prevProps, prevState) {\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n\n    var value = this.props.value;\n\n    if (value === prevProps.value) {\n      // no action needed\n      return;\n    } else if (value == null) {\n      // clear the value\n      this.setState({\n        value: value\n      });\n    } else {\n      this.setState({\n        displayMonth: value.getMonth(),\n        displayYear: value.getFullYear(),\n        selectedDay: value.getDate(),\n        value: value\n      });\n    }\n\n    if (this.props.selectedShortcutIndex !== prevProps.selectedShortcutIndex) {\n      this.setState({\n        selectedShortcutIndex: this.props.selectedShortcutIndex\n      });\n    }\n  };\n\n  DatePicker.prototype.validateProps = function (props) {\n    var defaultValue = props.defaultValue,\n        initialMonth = props.initialMonth,\n        maxDate = props.maxDate,\n        minDate = props.minDate,\n        value = props.value;\n\n    if (defaultValue != null && !DateUtils.isDayInRange(defaultValue, [minDate, maxDate])) {\n      throw new Error(Errors.DATEPICKER_DEFAULT_VALUE_INVALID);\n    }\n\n    if (initialMonth != null && !DateUtils.isMonthInRange(initialMonth, [minDate, maxDate])) {\n      throw new Error(Errors.DATEPICKER_INITIAL_MONTH_INVALID);\n    }\n\n    if (maxDate != null && minDate != null && maxDate < minDate && !DateUtils.areSameDay(maxDate, minDate)) {\n      throw new Error(Errors.DATEPICKER_MAX_DATE_INVALID);\n    }\n\n    if (value != null && !DateUtils.isDayInRange(value, [minDate, maxDate])) {\n      throw new Error(Errors.DATEPICKER_VALUE_INVALID);\n    }\n  };\n\n  DatePicker.prototype.renderOptionsBar = function () {\n    var _a = this.props,\n        clearButtonText = _a.clearButtonText,\n        todayButtonText = _a.todayButtonText;\n    return [React.createElement(Divider, {\n      key: \"div\"\n    }), React.createElement(\"div\", {\n      className: Classes.DATEPICKER_FOOTER,\n      key: \"footer\"\n    }, React.createElement(Button, {\n      minimal: true,\n      onClick: this.handleTodayClick,\n      text: todayButtonText\n    }), React.createElement(Button, {\n      minimal: true,\n      onClick: this.handleClearClick,\n      text: clearButtonText\n    }))];\n  };\n\n  DatePicker.prototype.maybeRenderTimePicker = function () {\n    var _a = this.props,\n        timePrecision = _a.timePrecision,\n        timePickerProps = _a.timePickerProps,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate;\n\n    if (timePrecision == null && timePickerProps === DatePicker_1.defaultProps.timePickerProps) {\n      return null;\n    }\n\n    var applyMin = DateUtils.areSameDay(this.state.value, minDate);\n    var applyMax = DateUtils.areSameDay(this.state.value, maxDate);\n    return React.createElement(\"div\", {\n      className: Classes.DATEPICKER_TIMEPICKER_WRAPPER\n    }, React.createElement(TimePicker, __assign({\n      precision: timePrecision,\n      minTime: applyMin ? minDate : undefined,\n      maxTime: applyMax ? maxDate : undefined\n    }, timePickerProps, {\n      onChange: this.handleTimeChange,\n      value: this.state.value\n    })));\n  };\n\n  DatePicker.prototype.maybeRenderShortcuts = function () {\n    var shortcuts = this.props.shortcuts;\n\n    if (shortcuts == null || shortcuts === false) {\n      return null;\n    }\n\n    var selectedShortcutIndex = this.state.selectedShortcutIndex;\n    var _a = this.props,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate,\n        timePrecision = _a.timePrecision; // Reuse the existing date range shortcuts and only care about start date\n\n    var dateRangeShortcuts = shortcuts === true ? true : shortcuts.map(function (shortcut) {\n      return __assign(__assign({}, shortcut), {\n        dateRange: [shortcut.date, undefined]\n      });\n    });\n    return [React.createElement(Shortcuts, __assign({\n      key: \"shortcuts\"\n    }, {\n      allowSingleDayRange: true,\n      maxDate: maxDate,\n      minDate: minDate,\n      selectedShortcutIndex: selectedShortcutIndex,\n      shortcuts: dateRangeShortcuts,\n      timePrecision: timePrecision\n    }, {\n      onShortcutClick: this.handleShortcutClick,\n      useSingleDateShortcuts: true\n    })), React.createElement(Divider, {\n      key: \"div\"\n    })];\n  };\n\n  DatePicker.prototype.computeValidDateInSpecifiedMonthYear = function (displayYear, displayMonth) {\n    var _a = this.props,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate;\n    var selectedDay = this.state.selectedDay; // month is 0-based, date is 1-based. date 0 is last day of previous month.\n\n    var maxDaysInMonth = new Date(displayYear, displayMonth + 1, 0).getDate();\n    var displayDate = selectedDay == null ? 1 : Math.min(selectedDay, maxDaysInMonth); // 12:00 matches the underlying react-day-picker timestamp behavior\n\n    var value = DateUtils.getDateTime(new Date(displayYear, displayMonth, displayDate, 12), this.state.value); // clamp between min and max dates\n\n    if (value < minDate) {\n      return minDate;\n    } else if (value > maxDate) {\n      return maxDate;\n    }\n\n    return value;\n  };\n  /**\n   * Update `value` by invoking `onChange` (always) and setting state (if uncontrolled).\n   */\n\n\n  DatePicker.prototype.updateValue = function (value, isUserChange, skipOnChange) {\n    var _a, _b;\n\n    if (skipOnChange === void 0) {\n      skipOnChange = false;\n    }\n\n    if (!skipOnChange) {\n      (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, isUserChange);\n    }\n\n    if (this.props.value === undefined) {\n      this.setState({\n        value: value\n      });\n    }\n  };\n\n  var DatePicker_1;\n  DatePicker.defaultProps = {\n    canClearSelection: true,\n    clearButtonText: \"Clear\",\n    dayPickerProps: {},\n    highlightCurrentDay: false,\n    maxDate: getDefaultMaxDate(),\n    minDate: getDefaultMinDate(),\n    reverseMonthAndYearMenus: false,\n    shortcuts: false,\n    showActionsBar: false,\n    timePickerProps: {},\n    todayButtonText: \"Today\"\n  };\n  DatePicker.displayName = DISPLAYNAME_PREFIX + \".DatePicker\";\n  DatePicker = DatePicker_1 = __decorate([polyfill], DatePicker);\n  return DatePicker;\n}(AbstractPureComponent2);\n\nexport { DatePicker };\n\nfunction getInitialValue(props) {\n  // !== because `null` is a valid value (no date)\n  if (props.value !== undefined) {\n    return props.value;\n  }\n\n  if (props.defaultValue !== undefined) {\n    return props.defaultValue;\n  }\n\n  return null;\n}\n\nfunction getInitialMonth(props, value) {\n  var today = new Date(); // != because we must have a real `Date` to begin the calendar on.\n\n  if (props.initialMonth != null) {\n    return props.initialMonth;\n  } else if (value != null) {\n    return value;\n  } else if (DateUtils.isDayInRange(today, [props.minDate, props.maxDate])) {\n    return today;\n  } else {\n    return DateUtils.getDateBetween([props.minDate, props.maxDate]);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}