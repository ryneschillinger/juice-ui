{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { Icon } from \"../icon/icon\";\nimport { AsyncControllableInput } from \"./asyncControllableInput\";\n\nvar InputGroup =\n/** @class */\nfunction (_super) {\n  __extends(InputGroup, _super);\n\n  function InputGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {};\n    _this.leftElement = null;\n    _this.rightElement = null;\n    _this.refHandlers = {\n      leftElement: function (ref) {\n        return _this.leftElement = ref;\n      },\n      rightElement: function (ref) {\n        return _this.rightElement = ref;\n      }\n    };\n    return _this;\n  }\n\n  InputGroup.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        _c = _b.asyncControl,\n        asyncControl = _c === void 0 ? false : _c,\n        className = _b.className,\n        disabled = _b.disabled,\n        fill = _b.fill,\n        inputRef = _b.inputRef,\n        intent = _b.intent,\n        large = _b.large,\n        small = _b.small,\n        round = _b.round;\n    var inputGroupClasses = classNames(Classes.INPUT_GROUP, Classes.intentClass(intent), (_a = {}, _a[Classes.DISABLED] = disabled, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a[Classes.ROUND] = round, _a), className);\n\n    var style = __assign(__assign({}, this.props.style), {\n      paddingLeft: this.state.leftElementWidth,\n      paddingRight: this.state.rightElementWidth\n    });\n\n    var inputProps = __assign(__assign({\n      type: \"text\"\n    }, removeNonHTMLProps(this.props)), {\n      className: Classes.INPUT,\n      style: style\n    });\n\n    return React.createElement(\"div\", {\n      className: inputGroupClasses\n    }, this.maybeRenderLeftElement(), asyncControl ? React.createElement(AsyncControllableInput, __assign({}, inputProps, {\n      inputRef: inputRef\n    })) : React.createElement(\"input\", __assign({}, inputProps, {\n      ref: inputRef\n    })), this.maybeRenderRightElement());\n  };\n\n  InputGroup.prototype.componentDidMount = function () {\n    this.updateInputWidth();\n  };\n\n  InputGroup.prototype.componentDidUpdate = function (prevProps) {\n    var _a = this.props,\n        leftElement = _a.leftElement,\n        rightElement = _a.rightElement;\n\n    if (prevProps.leftElement !== leftElement || prevProps.rightElement !== rightElement) {\n      this.updateInputWidth();\n    }\n  };\n\n  InputGroup.prototype.validateProps = function (props) {\n    if (props.leftElement != null && props.leftIcon != null) {\n      console.warn(Errors.INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX);\n    }\n  };\n\n  InputGroup.prototype.maybeRenderLeftElement = function () {\n    var _a = this.props,\n        leftElement = _a.leftElement,\n        leftIcon = _a.leftIcon;\n\n    if (leftElement != null) {\n      return React.createElement(\"span\", {\n        className: Classes.INPUT_LEFT_CONTAINER,\n        ref: this.refHandlers.leftElement\n      }, leftElement);\n    } else if (leftIcon != null) {\n      return React.createElement(Icon, {\n        icon: leftIcon\n      });\n    }\n\n    return undefined;\n  };\n\n  InputGroup.prototype.maybeRenderRightElement = function () {\n    var rightElement = this.props.rightElement;\n\n    if (rightElement == null) {\n      return undefined;\n    }\n\n    return React.createElement(\"span\", {\n      className: Classes.INPUT_ACTION,\n      ref: this.refHandlers.rightElement\n    }, rightElement);\n  };\n\n  InputGroup.prototype.updateInputWidth = function () {\n    var _a = this.state,\n        leftElementWidth = _a.leftElementWidth,\n        rightElementWidth = _a.rightElementWidth;\n\n    if (this.leftElement != null) {\n      var clientWidth = this.leftElement.clientWidth; // small threshold to prevent infinite loops\n\n      if (leftElementWidth === undefined || Math.abs(clientWidth - leftElementWidth) > 2) {\n        this.setState({\n          leftElementWidth: clientWidth\n        });\n      }\n    } else {\n      this.setState({\n        leftElementWidth: undefined\n      });\n    }\n\n    if (this.rightElement != null) {\n      var clientWidth = this.rightElement.clientWidth; // small threshold to prevent infinite loops\n\n      if (rightElementWidth === undefined || Math.abs(clientWidth - rightElementWidth) > 2) {\n        this.setState({\n          rightElementWidth: clientWidth\n        });\n      }\n    } else {\n      this.setState({\n        rightElementWidth: undefined\n      });\n    }\n  };\n\n  InputGroup.displayName = DISPLAYNAME_PREFIX + \".InputGroup\";\n  InputGroup = __decorate([polyfill], InputGroup);\n  return InputGroup;\n}(AbstractPureComponent2);\n\nexport { InputGroup };","map":null,"metadata":{},"sourceType":"module"}