{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Spinner/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        view = props.view,\n        color = props.color,\n        value = props.value,\n        valueAmount = props.valueAmount,\n        size = props.size;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"smooth\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" smooth, filled \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"smooth\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"value\",\n    type: \"undefined | number\",\n    desc: React.createElement(React.Fragment, null, \"A value between 0 and 1 (inclusive) representing how far along the operation is. Values below 0 or above 1 will be interpreted as 0 or 1 respectively. Omitting this prop will result in an \\\"indeterminate\\\" spinner where the head spins indefinitely.\")\n  }, {\n    prop: \"size\",\n    type: \"undefined | number\",\n    desc: React.createElement(React.Fragment, null, \"Width and height of the spinner in pixels. The size cannot be less than 10px. Default size is 50px.\")\n  }];\n  /** Code source */\n\n  const Code = \"  \\n&lt;<span class=\\\"val\\\">Spinner</span>\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\".concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  \").concat(value ? \"<span class=\\\"attr\\\">value</span>={<span class=\\\"num\\\">\".concat(valueAmount / 100, \"</span>}\") : '', \"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(size, \"</span>\\\"   \\n/&gt;\\n\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Spinner/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","view","color","value","valueAmount","size","OverviewText","APIData","prop","type","desc","Code"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GAC8BD,KAD9B,CAClBC,IADkB;AAAA,QACZC,IADY,GAC8BF,KAD9B,CACZE,IADY;AAAA,QACNC,KADM,GAC8BH,KAD9B,CACNG,KADM;AAAA,QACCC,KADD,GAC8BJ,KAD9B,CACCI,KADD;AAAA,QACQC,WADR,GAC8BL,KAD9B,CACQK,WADR;AAAA,QACqBC,IADrB,GAC8BN,KAD9B,CACqBM,IADrB;AAG1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAEN,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMO,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,+DAE4D,GAF5D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHF,6BAGgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHhD;AARJ,GADc,EAgBd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,gEAE6D,GAF7D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,2GAGyC,GAHzC,CAHF,6BAQyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARzB;AARJ,GAhBc,EAoCd;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GApCc,EA0Cd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,oBAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GA1Cc,EAsDd;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EAAE,oBAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GAtDc,CAAhB;AAkEA;;AACA,QAAMC,IAAI,kHAE0CV,IAF1C,kFAG2CC,KAH3C,0BAIRC,KAAK,oEAAyDC,WAAW,GAAC,GAArE,gBAAqF,EAJlF,yEAK2CC,IAL3C,0BAAV;AASA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEC,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEI,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CApFM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, view, color, value, valueAmount, size } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>smooth</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> smooth, filled </b>. The default state is <b>smooth</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: \"undefined | number\",\r\n      desc: (\r\n        <>\r\n          A value between 0 and 1 (inclusive) representing how far along the\r\n          operation is. Values below 0 or above 1 will be interpreted as 0 or 1\r\n          respectively. Omitting this prop will result in an \"indeterminate\"\r\n          spinner where the head spins indefinitely.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"size\",\r\n      type: \"undefined | number\",\r\n      desc: (\r\n        <>\r\n          Width and height of the spinner in pixels. The size cannot be less\r\n          than 10px. Default size is 50px.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n&lt;<span class=\"val\">Spinner</span>\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  ${value ? `<span class=\"attr\">value</span>={<span class=\"num\">${valueAmount/100}</span>}` : ''}\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${size}</span>\"   \r\n/&gt;\r\n`;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}