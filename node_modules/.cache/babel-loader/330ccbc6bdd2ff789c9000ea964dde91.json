{"ast":null,"code":"import _slicedToArray from \"/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/Typography/ComponentTemplate.jsx\";\nimport React from \"react\";\n/* Import component props */\n\nimport PropsGroup from \"./PropsGroup.jsx\";\nimport SelectColorGroup from \"../SelectColorGroup.jsx\";\nimport SelectViewGroup from \"../SelectViewGroup.jsx\";\nimport DemoAppStyle from \"../styles/style.module.css\";\nimport Typography from \"../../core/Typography\";\nimport { SidebarContainer } from \"../components/SidebarContainer\";\nimport { CustomScrollbar } from \"../components/CustomScrollbar\";\n/**Import demo component body*/\n\nimport { DEMO } from \"./DemoComponent.jsx\";\n/**Import usage & API  of component*/\n\nimport { API } from \"./api.jsx\";\n/**SETTINGS OF THIS DEMO*/\n\n/*Set component data (variables)*/\n\nconst Props = {\n  name: \"Typography\",\n  desc: \"Use typography component to adjust body text, captions and paragraphs.\",\n\n  /**default value*/\n  type: \"body\",\n  view: \"inter\",\n  color: \"default\"\n};\n/**Available variants of TYPES & VIEWS (variables)*/\n\nconst views = [[\"Inter\", \"inter\"], [\"Plex\", \"plex\"], [\"Manrope\", \"manrope\"], [\"Roboto\", \"roboto\"], [\"Lato\", \"lato\"]];\n/**END OF SETTINGS*/\n\n/**Demo template*/\n\nconst Content = props => {\n  /*Set states of props*/\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        large = _React$useState2[0],\n        setLarge = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        small = _React$useState4[0],\n        setSmall = _React$useState4[1];\n\n  const _React$useState5 = React.useState(100),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        colorStep = _React$useState6[0],\n        setColorStep = _React$useState6[1];\n  /*const [shape, setShape] = React.useState(Props.type);*/\n\n\n  const _React$useState7 = React.useState(Props.view),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        view = _React$useState8[0],\n        setView = _React$useState8[1];\n\n  const _React$useState9 = React.useState(Props.color),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        color = _React$useState10[0],\n        setColor = _React$useState10[1];\n\n  React.useEffect(() => {\n    document.title = \"React Design System: component \".concat(Props.name);\n    document.getElementsByTagName(\"META\")[\"description\"].content = \"Demo \".concat(Props.name, \" component for React Setproduct Design System with possible props. \").concat(Props.desc);\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: DemoAppStyle[\"content-component\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    type: \"h3\",\n    className: \"demo-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, Props.name), React.createElement(Typography, {\n    type: \"h6\",\n    colorStep: 60,\n    className: \"demo-desc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, Props.desc), React.createElement(DEMO, {\n    type: Props.type,\n    view: view,\n    color: color,\n    small: small,\n    large: large,\n    colorStep: colorStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"BodyBig demo-api\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(API, {\n    name: Props.name,\n    type: Props.type,\n    color: color,\n    small: small,\n    large: large,\n    colorStep: colorStep,\n    font: view,\n    tagName: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))), React.createElement(SidebarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: DemoAppStyle.right_sidebar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(CustomScrollbar, {\n    autoHide: true,\n    autoHideTimeout: 2000,\n    hideTracksWhenNotNeeded: true,\n    renderThumbHorizontal: () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    },\n    renderTrackHorizontal: () => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: DemoAppStyle[\"demo-props\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(PropsGroup, {\n    colorStep: colorStep,\n    setColorStep: setColorStep,\n    large: large,\n    setLarge: setLarge,\n    small: small,\n    setSmall: setSmall,\n    margin: \"2px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(SelectViewGroup, {\n    view: view,\n    setView: setView,\n    views: views,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(SelectColorGroup, {\n    color: color,\n    setColor: setColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }))))));\n};\n\nexport default Content;","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/Typography/ComponentTemplate.jsx"],"names":["React","PropsGroup","SelectColorGroup","SelectViewGroup","DemoAppStyle","Typography","SidebarContainer","CustomScrollbar","DEMO","API","Props","name","desc","type","view","color","views","Content","props","useState","large","setLarge","small","setSmall","colorStep","setColorStep","setView","setColor","useEffect","document","title","getElementsByTagName","content","right_sidebar"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n/* Import component props */\r\nimport PropsGroup from \"./PropsGroup.jsx\";\r\nimport SelectColorGroup from \"../SelectColorGroup.jsx\";\r\nimport SelectViewGroup from \"../SelectViewGroup.jsx\";\r\nimport DemoAppStyle from \"../styles/style.module.css\";\r\n\r\nimport Typography from \"../../core/Typography\";\r\nimport { SidebarContainer } from \"../components/SidebarContainer\";\r\nimport { CustomScrollbar } from \"../components/CustomScrollbar\";\r\n\r\n/**Import demo component body*/\r\nimport { DEMO } from \"./DemoComponent.jsx\";\r\n/**Import usage & API  of component*/\r\nimport { API } from \"./api.jsx\";\r\n\r\n/**SETTINGS OF THIS DEMO*/\r\n/*Set component data (variables)*/\r\nconst Props = {\r\n  name: \"Typography\",\r\n  desc:\r\n    \"Use typography component to adjust body text, captions and paragraphs.\",\r\n  /**default value*/\r\n  type: \"body\",\r\n  view: \"inter\",\r\n  color: \"default\"\r\n};\r\n/**Available variants of TYPES & VIEWS (variables)*/\r\n\r\nconst views = [\r\n  [\"Inter\", \"inter\"],\r\n  [\"Plex\", \"plex\"],\r\n  [\"Manrope\", \"manrope\"],\r\n  [\"Roboto\", \"roboto\"],\r\n  [\"Lato\", \"lato\"]\r\n];\r\n/**END OF SETTINGS*/\r\n\r\n/**Demo template*/\r\nconst Content = props => {\r\n  /*Set states of props*/\r\n  const [large, setLarge] = React.useState(false);\r\n  const [small, setSmall] = React.useState(false);\r\n  const [colorStep, setColorStep] = React.useState(100);\r\n\r\n  /*const [shape, setShape] = React.useState(Props.type);*/\r\n  const [view, setView] = React.useState(Props.view);\r\n  const [color, setColor] = React.useState(Props.color);\r\n\r\n  React.useEffect(() => {\r\n    document.title = `React Design System: component ${Props.name}`;\r\n    document.getElementsByTagName(\"META\")[\"description\"].content = `Demo ${\r\n      Props.name\r\n    } component for React Setproduct Design System with possible props. ${\r\n      Props.desc\r\n    }`;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className={DemoAppStyle[\"content-component\"]}>\r\n        {/*COMPONENT*/}\r\n        {/*NAME*/}\r\n        <Typography type=\"h3\" className=\"demo-name\">\r\n          {Props.name}\r\n        </Typography>\r\n        {/*Description */}\r\n        <Typography type=\"h6\" colorStep={60} className=\"demo-desc\">\r\n          {Props.desc}\r\n        </Typography>\r\n        {/*Content*/}\r\n\r\n        <DEMO\r\n          type={Props.type}\r\n          view={view}\r\n          color={color}\r\n          small={small}\r\n          large={large}\r\n          colorStep={colorStep}\r\n        />\r\n\r\n        <div className=\"BodyBig demo-api\">\r\n          <API\r\n            name={Props.name}\r\n            type={Props.type}\r\n            color={color}\r\n            small={small}\r\n            large={large}\r\n            colorStep={colorStep}\r\n            font={view}\r\n            tagName={\"div\"}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Props*/}\r\n      <SidebarContainer>\r\n        <div className={DemoAppStyle.right_sidebar}>\r\n          <CustomScrollbar\r\n            autoHide\r\n            autoHideTimeout={2000}\r\n            hideTracksWhenNotNeeded\r\n            renderThumbHorizontal={() => {\r\n              return <div />;\r\n            }}\r\n            renderTrackHorizontal={() => <div />}\r\n          >\r\n            {/**Set this Props component */}\r\n            <div className={DemoAppStyle[\"demo-props\"]}>\r\n              <PropsGroup\r\n                colorStep={colorStep}\r\n                setColorStep={setColorStep}\r\n                large={large}\r\n                setLarge={setLarge}\r\n                small={small}\r\n                setSmall={setSmall}\r\n                margin=\"2px\"\r\n              />\r\n              <SelectViewGroup view={view} setView={setView} views={views} />\r\n              <SelectColorGroup color={color} setColor={setColor} />\r\n            </div>\r\n          </CustomScrollbar>\r\n        </div>\r\n      </SidebarContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n"]},"metadata":{},"sourceType":"module"}