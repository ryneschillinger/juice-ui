{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Tree/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nimport OverviewAPI from \"../OverviewAPI.jsx\";\nexport const API = props => {\n  const name = props.name,\n        color = props.color;\n  const TreeNodeApi = [{\n    prop: \"id\",\n    type: React.createElement(React.Fragment, null, \"string | number\"),\n    desc: React.createElement(React.Fragment, null, \"An unique identifier for the node. Required.\")\n  }, {\n    prop: \"label\",\n    type: React.createElement(React.Fragment, null, \"string | element\"),\n    desc: React.createElement(React.Fragment, null, \"The main label for the node. Required.\")\n  }, {\n    prop: \"hasCaret\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether the caret to expand/collapse a node should be shown. If not specified, this will be true if the node has children and false otherwise.\")\n  }, {\n    prop: \"icon\",\n    type: React.createElement(React.Fragment, null, \"name | element\"),\n    desc: React.createElement(React.Fragment, null, \"The name of a Blueprint icon (or an icon element) to render next to the node's label.\")\n  }, {\n    prop: \"isExpanded\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"A Default state of node.\")\n  }, {\n    prop: \"secondaryLabel\",\n    type: React.createElement(React.Fragment, null, \"string | element\"),\n    desc: React.createElement(React.Fragment, null, \"A secondary label/component that is displayed at the right side of the node.\")\n  }, {\n    prop: \"isSelected\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this node is selected. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether this tree node is non-interactive. Enabling this prop will ignore mouse event handlers (in particular click, down, enter, leave).\")\n  }, {\n    prop: \"childNodes\",\n    type: React.createElement(React.Fragment, null, \"array\"),\n    desc: React.createElement(React.Fragment, null, \"Child tree nodes of this node.\")\n  }];\n  const optionalText = React.createElement(React.Fragment, null, \"Tree node objects determine the contents, appearance, and state of each node in the tree.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), \"For example, \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"icon\"), \" controls the icon displayed for the node, and\", \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"isExpanded\"), \" determines whether the node's children are shown.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"TreeNode API description:\"), React.createElement(OverviewAPI, {\n    data: TreeNodeApi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }));\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    text: optionalText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \" def | dense\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"smooth\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \" smooth \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"smooth\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"contents\",\n    type: React.createElement(React.Fragment, null, \"array\"),\n    desc: React.createElement(React.Fragment, null, \"The data specifying the contents and appearance of the tree. Required.\")\n  }];\n  /** Code source */\n\n  const Code = \"  \\n  < Tree\\n      color = '\".concat(color, \"' \\n      contents = { treeNode }\\n  / >\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Tree/api.jsx"],"names":["React","Overview","OverviewTemplate","OverviewAPI","API","props","name","color","TreeNodeApi","prop","type","desc","optionalText","OverviewText","APIData","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\nimport OverviewAPI from \"../OverviewAPI.jsx\";\r\n\r\nexport const API = props => {\r\n  const { name, color } = props;\r\n\r\n  const TreeNodeApi = [\r\n    {\r\n      prop: \"id\",\r\n      type: <>string | number</>,\r\n      desc: <>An unique identifier for the node. Required.</>\r\n    },\r\n    {\r\n      prop: \"label\",\r\n      type: <>string | element</>,\r\n      desc: <>The main label for the node. Required.</>\r\n    },\r\n    {\r\n      prop: \"hasCaret\",\r\n      type: <>boolean</>,\r\n      desc: (\r\n        <>\r\n          Whether the caret to expand/collapse a node should be shown. If not\r\n          specified, this will be true if the node has children and false\r\n          otherwise.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: <>name | element</>,\r\n      desc: (\r\n        <>\r\n          The name of a Blueprint icon (or an icon element) to render next to\r\n          the node's label.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"isExpanded\",\r\n      type: <>boolean</>,\r\n      desc: <>A Default state of node.</>\r\n    },\r\n    {\r\n      prop: \"secondaryLabel\",\r\n      type: <>string | element</>,\r\n      desc: (\r\n        <>\r\n          A secondary label/component that is displayed at the right side of the\r\n          node.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"isSelected\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this node is selected. The default state is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: <>boolean</>,\r\n      desc: (\r\n        <>\r\n          Whether this tree node is non-interactive. Enabling this prop will\r\n          ignore mouse event handlers (in particular click, down, enter, leave).\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"childNodes\",\r\n      type: <>array</>,\r\n      desc: <>Child tree nodes of this node.</>\r\n    }\r\n  ];\r\n\r\n  const optionalText = (\r\n    <>\r\n      Tree node objects determine the contents, appearance, and state of each\r\n      node in the tree.\r\n      <br />\r\n      For example, <b>icon</b> controls the icon displayed for the node, and{\" \"}\r\n      <b>isExpanded</b> determines whether the node's children are shown.\r\n      <br />\r\n      <b>TreeNode API description:</b>\r\n      <OverviewAPI data={TreeNodeApi} />\r\n    </>\r\n  );\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} text={optionalText} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> def | dense</b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>smooth</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> smooth </b>. The default state is <b>smooth</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"contents\",\r\n      type: <>array</>,\r\n      desc: (\r\n        <>\r\n          The data specifying the contents and appearance of the tree. Required.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n  < Tree\r\n      color = '${color}' \r\n      contents = { treeNode }\r\n  / >\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}