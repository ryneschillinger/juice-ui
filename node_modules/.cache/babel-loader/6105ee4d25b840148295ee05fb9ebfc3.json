{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Switch/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        color = props.color,\n        isDemo = props.isDemo,\n        dis = props.dis,\n        help = props.help,\n        left = props.left,\n        fill = props.fill,\n        rtl = props.rtl;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" def | dense \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"flat\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \" flat \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"flat\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"label\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Text label for the control.\")\n  }, {\n    prop: \"helperText\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"A Second line text\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should expand to fill its container. Default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"checked\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether the control is checked.\")\n  }, {\n    prop: \"leftPosition\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Alignment of the indicator within container.\")\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the component will be disabled. Default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"onChange\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Event handler invoked when input value is changed.\")\n  }, {\n    prop: \"rtl\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Set the text direction to \\\"right-to-left\\\".\")\n  }];\n  /** Code source */\n\n  const Code = \"\\n&lt;<span class=\\\"val\\\">Switch</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">checked</span>={<span class=\\\"bool\\\">\").concat(isDemo ? \"true\" : \"false\", \"</span>}\\n  <span class=\\\"attr\\\">label</span>=\\\"<span class=\\\"val\\\">\").concat(rtl ? \"الخري\" : \"Spring\", \"</span>\\\"\\n  <span class=\\\"attr\\\">disabled</span>={<span class=\\\"bool\\\">\").concat(dis ? \"true\" : \"false\", \"</span>}\\n  <span class=\\\"attr\\\">fill</span>={<span class=\\\"bool\\\">\").concat(fill ? \"true\" : \"false\", \"</span>}\\n  \").concat(help ? \"<span class=\\\"attr\\\">helperText</span>=\\\"<span class=\\\"val\\\">\".concat(rtl ? '\"الطبيعة تأتي في الحياة\"' : \"Nature comes to life\", \"</span>\\\"\") : '', \"\\n\\n      <i>helperText</i> = \").concat(help && (rtl ? '\"الطبيعة تأتي في الحياة\"' : \"'Nature comes to life'\"), \"\\n      <i>rtl</i> = \").concat(rtl ? \"{true}\" : \"{false}\", \"\\n      <i>leftPosition</i> = \").concat(left ? \"{true}\" : \"{false}\", \"\\n      <i>onChange</i>={() => someFunc()}\\n/&gt;\\n\");\n\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\n\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: trimCode(Code),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Switch/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","color","isDemo","dis","help","left","fill","rtl","OverviewText","APIData","prop","desc","Code","trimCode","code","replace"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, color, isDemo, dis, help, left, fill, rtl } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> def | dense </b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>flat</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> flat </b>. The default state is <b>flat</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"label\",\r\n      type: <>string</>,\r\n      desc: <>Text label for the control.</>\r\n    },\r\n    {\r\n      prop: \"helperText\",\r\n      type: <>string</>,\r\n      desc: <>A Second line text</>\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should expand to fill its container. Default state\r\n          is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"checked\",\r\n      type: <>boolean</>,\r\n      desc: <>Whether the control is checked.</>\r\n    },\r\n    {\r\n      prop: \"leftPosition\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Alignment of the indicator within container.</>\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the component will be disabled. Default state is{\" \"}\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onChange\",\r\n      type: <>func</>,\r\n      desc: <>Event handler invoked when input value is changed.</>\r\n    },\r\n    {\r\n      prop: \"rtl\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Set the text direction to \"right-to-left\".</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `\r\n&lt;<span class=\"val\">Switch</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">checked</span>={<span class=\"bool\">${isDemo ? \"true\" : \"false\"}</span>}\r\n  <span class=\"attr\">label</span>=\"<span class=\"val\">${rtl ? \"الخري\" : \"Spring\"}</span>\"\r\n  <span class=\"attr\">disabled</span>={<span class=\"bool\">${dis ? \"true\" : \"false\"}</span>}\r\n  <span class=\"attr\">fill</span>={<span class=\"bool\">${fill ? \"true\" : \"false\"}</span>}\r\n  ${help ? `<span class=\"attr\">helperText</span>=\"<span class=\"val\">${(rtl ? '\"الطبيعة تأتي في الحياة\"' : \"Nature comes to life\")}</span>\"` : ''}\r\n\r\n      <i>helperText</i> = ${help &&\r\n        (rtl ? '\"الطبيعة تأتي في الحياة\"' : \"'Nature comes to life'\")}\r\n      <i>rtl</i> = ${rtl ? \"{true}\" : \"{false}\"}\r\n      <i>leftPosition</i> = ${left ? \"{true}\" : \"{false}\"}\r\n      <i>onChange</i>={() => someFunc()}\r\n/&gt;\r\n`;\r\n\r\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={trimCode(Code)} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}