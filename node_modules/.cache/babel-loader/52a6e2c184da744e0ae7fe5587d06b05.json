{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Radio/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        color = props.color,\n        inline = props.inline,\n        dis = props.dis,\n        help = props.help,\n        rtl = props.rtl,\n        left = props.left,\n        os = props.os;\n  const optionalText = React.createElement(React.Fragment, null, \"Also you can use the \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"RadioGroup\"), \" component with a series of Radio children.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), \"You need import component to your code (\\u0441heck component path is right):\", React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"import { RadioGroup } from \\\"../../core/RadioGroup\\\";\"));\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    text: optionalText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \" def | dense \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"flat\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \" flat | smooth | outlined | raised\"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"flat\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"label\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"Text label for the control.\"\n  }, {\n    prop: \"value\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"Value of this radio.\"\n  }, {\n    prop: \"helperText\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"Second line text.\"\n  }, {\n    prop: \"inline\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the radio buttons are to be displayed inline horizontally. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"checked\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: \"Whether the control is checked.\"\n  }, {\n    prop: \"leftPosition\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"false\")),\n    desc: \"Alignment of the indicator within container.\"\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the component will be disabled. The default state is\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"onChange\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: \"Event handler invoked when input value is changed.\"\n  }, {\n    prop: \"rtl\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"false\")),\n    desc: 'Set the text direction to \"right-to-left\".'\n  }];\n  /** Code source */\n\n  const Code = \"\\n&lt;<span class=\\\"val\\\">RadioGroup</span> <span class=\\\"attr\\\">label</span>=\\\"<span class=\\\"val\\\">Select platform:</span>\\\" <span class=\\\"attr\\\">name</span>=\\\"<span class=\\\"val\\\">Demo group</span>\\\"&gt;\\n  &lt;<span class=\\\"val\\\">Radio</span>\\n    <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n    <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n    <span class=\\\"attr\\\">value</span>=\\\"<span class=\\\"val\\\">win</span>\\\"\\n    <span class=\\\"attr\\\">checked</span>=\\\"<span class=\\\"val\\\">\").concat(os === \"win\" ? \"{true}\" : \"{false}\", \"</span>\\\"\\n\\n\\n\\n\\n          <i>checked</i> = \").concat(os === \"win\" ? \"{true}\" : \"{false}\", \"\\n          <i>onClick</i> = {() => setOS(\\\"win\\\")}\\n          <i>label</i> = \\\"'Windows'\\\"\\n          <i>inline</i>='\").concat(inline ? \"{true}\" : \"{false}\", \"'\\n          <i>rtl</i>='\").concat(rtl ? \"{true}\" : \"{false}\", \"'\\n          <i>leftPosition</i>='\").concat(left ? \"{true}\" : \"{false}\", \"'\\n          <i>disabled</i> = \").concat(dis ? \"{true}\" : \"{false}\", \"\\n          <i>helperText</i> = \").concat(help ? \"'Optional subcaption'\" : \"''\", \"\\n          <i>onChange</i>={() => ()}\\n      / > \\n  < / RadioGroup > \\n  \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Radio/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","color","inline","dis","help","rtl","left","os","optionalText","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, color, inline, dis, help, rtl, left, os } = props;\r\n\r\n  const optionalText = (\r\n    <>\r\n      Also you can use the <b>RadioGroup</b> component with a series of Radio\r\n      children.\r\n      <br />\r\n      You need import component to your code (сheck component path is right):\r\n      <pre>{`import { RadioGroup } from \"../../core/RadioGroup\";`}</pre>\r\n    </>\r\n  );\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} text={optionalText} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:\r\n          <b> def | dense </b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>flat</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> flat | smooth | outlined | raised</b>. The default state is{\" \"}\r\n          <b>flat</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"label\",\r\n      type: <>string</>,\r\n      desc: \"Text label for the control.\"\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: <>string</>,\r\n      desc: \"Value of this radio.\"\r\n    },\r\n    {\r\n      prop: \"helperText\",\r\n      type: <>string</>,\r\n      desc: \"Second line text.\"\r\n    },\r\n    {\r\n      prop: \"inline\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether the radio buttons are to be displayed inline horizontally. The\r\n          default state is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"checked\",\r\n      type: <>boolean</>,\r\n      desc: \"Whether the control is checked.\"\r\n    },\r\n    {\r\n      prop: \"leftPosition\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: \"Alignment of the indicator within container.\"\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the component will be disabled. The default state is\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onChange\",\r\n      type: <>func</>,\r\n      desc: \"Event handler invoked when input value is changed.\"\r\n    },\r\n    {\r\n      prop: \"rtl\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: 'Set the text direction to \"right-to-left\".'\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `\r\n&lt;<span class=\"val\">RadioGroup</span> <span class=\"attr\">label</span>=\"<span class=\"val\">Select platform:</span>\" <span class=\"attr\">name</span>=\"<span class=\"val\">Demo group</span>\"&gt;\r\n  &lt;<span class=\"val\">Radio</span>\r\n    <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n    <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n    <span class=\"attr\">value</span>=\"<span class=\"val\">win</span>\"\r\n    <span class=\"attr\">checked</span>=\"<span class=\"val\">${os === \"win\" ? \"{true}\" : \"{false}\"}</span>\"\r\n\r\n\r\n\r\n\r\n          <i>checked</i> = ${os === \"win\" ? \"{true}\" : \"{false}\"}\r\n          <i>onClick</i> = {() => setOS(\"win\")}\r\n          <i>label</i> = \"'Windows'\"\r\n          <i>inline</i>='${inline ? \"{true}\" : \"{false}\"}'\r\n          <i>rtl</i>='${rtl ? \"{true}\" : \"{false}\"}'\r\n          <i>leftPosition</i>='${left ? \"{true}\" : \"{false}\"}'\r\n          <i>disabled</i> = ${dis ? \"{true}\" : \"{false}\"}\r\n          <i>helperText</i> = ${help ? \"'Optional subcaption'\" : \"''\"}\r\n          <i>onChange</i>={() => ()}\r\n      / > \r\n  < / RadioGroup > \r\n  `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}