{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArrays } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { PanelView2 } from \"./panelView2\";\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport var PanelStack2 = function (props) {\n  var _a = props.renderActivePanelOnly,\n      renderActivePanelOnly = _a === void 0 ? true : _a,\n      _b = props.showPanelHeader,\n      showPanelHeader = _b === void 0 ? true : _b,\n      propsStack = props.stack;\n\n  var _c = React.useState(\"push\"),\n      direction = _c[0],\n      setDirection = _c[1];\n\n  var _d = React.useState(props.initialPanel !== undefined ? [props.initialPanel] : []),\n      localStack = _d[0],\n      setLocalStack = _d[1];\n\n  var stack = React.useMemo(function () {\n    return propsStack != null ? propsStack.slice().reverse() : localStack;\n  }, [localStack, propsStack]);\n  var stackLength = React.useRef(stack.length);\n  React.useEffect(function () {\n    if (stack.length !== stackLength.current) {\n      // Adjust the direction in case the stack size has changed, controlled or uncontrolled\n      setDirection(stack.length - stackLength.current < 0 ? \"pop\" : \"push\");\n    }\n\n    stackLength.current = stack.length;\n  }, [stack]);\n  var handlePanelOpen = React.useCallback(function (panel) {\n    var _a;\n\n    (_a = props.onOpen) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n\n    if (props.stack == null) {\n      setLocalStack(function (prevStack) {\n        return __spreadArrays([panel], prevStack);\n      });\n    }\n  }, [props.onOpen]);\n  var handlePanelClose = React.useCallback(function (panel) {\n    var _a; // only remove this panel if it is at the top and not the only one.\n\n\n    if (stack[0] !== panel || stack.length <= 1) {\n      return;\n    }\n\n    (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props, panel);\n\n    if (props.stack == null) {\n      setLocalStack(function (prevStack) {\n        return prevStack.slice(1);\n      });\n    }\n  }, [stack, props.onClose]); // early return, after all hooks are called\n\n  if (stack.length === 0) {\n    return null;\n  }\n\n  var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n  var panels = panelsToRender.map(function (panel, index) {\n    // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n    // therefore they would not trigger the \"enter\" transition event as they were entered.\n    // To force the enter event, we want to change the key, but stack.length is not enough\n    // and a single panel should not rerender as long as it's hidden.\n    // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n    // second one, active changes only when the panel becomes or stops being active.\n    var layer = stack.length - index;\n    var key = renderActivePanelOnly ? stack.length : layer;\n    return React.createElement(CSSTransition, {\n      classNames: Classes.PANEL_STACK2,\n      key: key,\n      timeout: 400\n    }, React.createElement(PanelView2, {\n      onClose: handlePanelClose,\n      onOpen: handlePanelOpen,\n      panel: panel,\n      previousPanel: stack[index + 1],\n      showHeader: showPanelHeader\n    }));\n  }).reverse();\n  var classes = classNames(Classes.PANEL_STACK2, Classes.PANEL_STACK2 + \"-\" + direction, props.className);\n  return React.createElement(TransitionGroup, {\n    className: classes,\n    component: \"div\"\n  }, panels);\n};\nPanelStack2.displayName = DISPLAYNAME_PREFIX + \".PanelStack2\";","map":null,"metadata":{},"sourceType":"module"}