{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Menu/MenuItem/Item.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { MenuItem as MenuItemSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../../styles/color.module.css\";\nimport { ThemeContext } from \"../../ThemeContext\";\n/** \r\n  __Component 'MenuItem'__\r\n**/\n\nexport default function MenuItem(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"def\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"smooth\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        dense = props.dense,\n        className = props.className,\n        note = props.note,\n        active = props.active,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"dense\", \"className\", \"note\", \"active\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(MenuItemSource, Object.assign({}, restProps, {\n    className: cx(Type[type], View[view], note && View[\"note\"], Color[color], className, active && View[\"active\"]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })));\n}\nMenuItem.propTypes = {\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * A space-delimited list of class names to pass along to a child element.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Dense size\r\n   */\n  dense: PropTypes.bool,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\n  icon: PropTypes.string,\n\n  /**\r\n   * Right-aligned label text content, useful for displaying hotkeys.\r\n   */\n  label: PropTypes.string,\n\n  /**\r\n   * Item text, required for usability.\r\n   */\n  text: PropTypes.string.isRequired,\n\n  /**\r\n   * Whether item is currently selected\r\n   */\n  active: PropTypes.string,\n\n  /**\r\n   * Children of this component will be rendered in a submenu that appears when hovering or clicking on this menu item.\r\n   */\n  children: PropTypes.array\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Menu/MenuItem/Item.jsx"],"names":["React","cx","PropTypes","MenuItem","MenuItemSource","Type","View","Color","ThemeContext","props","type","view","color","dense","className","note","active","restProps","dark","propTypes","oneOf","string","bool","icon","label","text","isRequired","children","array"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,QAAQ,IAAIC,cAArB,QAA2C,mBAA3C;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;;;;AAIA,eAAe,SAASL,QAAT,CAAkBM,KAAlB,EAAyB;AAAA,sBAUlCA,KAVkC,CAEpCC,IAFoC;AAAA,QAEpCA,IAFoC,4BAE7B,KAF6B;AAAA,sBAUlCD,KAVkC,CAGpCE,IAHoC;AAAA,QAGpCA,IAHoC,4BAG7B,QAH6B;AAAA,uBAUlCF,KAVkC,CAIpCG,KAJoC;AAAA,QAIpCA,KAJoC,6BAI5B,SAJ4B;AAAA,QAKpCC,KALoC,GAUlCJ,KAVkC,CAKpCI,KALoC;AAAA,QAMpCC,SANoC,GAUlCL,KAVkC,CAMpCK,SANoC;AAAA,QAOpCC,IAPoC,GAUlCN,KAVkC,CAOpCM,IAPoC;AAAA,QAQpCC,MARoC,GAUlCP,KAVkC,CAQpCO,MARoC;AAAA,QASjCC,SATiC,4BAUlCR,KAVkC;;AAYtC,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAES,IAAAA;AAAF,GAAD,KACC,oBAAC,cAAD,oBACMD,SADN;AAEE,IAAA,SAAS,EAAEhB,EAAE,CACXI,IAAI,CAACK,IAAD,CADO,EAEXJ,IAAI,CAACK,IAAD,CAFO,EAGXI,IAAI,IAAIT,IAAI,CAAC,MAAD,CAHD,EAIXC,KAAK,CAACK,KAAD,CAJM,EAKXE,SALW,EAMXE,MAAM,IAAIV,IAAI,CAAC,QAAD,CANH,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADF;AAiBD;AAEDH,QAAQ,CAACgB,SAAT,GAAqB;AACnB;;;;;AAKAP,EAAAA,KAAK,EAAEV,SAAS,CAACkB,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CANY;;AAiBnB;;;AAGAN,EAAAA,SAAS,EAAEZ,SAAS,CAACmB,MApBF;;AAqBnB;;;AAGAR,EAAAA,KAAK,EAAEX,SAAS,CAACoB,IAxBE;;AAyBnB;;;AAGAC,EAAAA,IAAI,EAAErB,SAAS,CAACmB,MA5BG;;AA6BnB;;;AAGAG,EAAAA,KAAK,EAAEtB,SAAS,CAACmB,MAhCE;;AAiCnB;;;AAGAI,EAAAA,IAAI,EAAEvB,SAAS,CAACmB,MAAV,CAAiBK,UApCJ;;AAqCnB;;;AAGAV,EAAAA,MAAM,EAAEd,SAAS,CAACmB,MAxCC;;AAyCnB;;;AAGAM,EAAAA,QAAQ,EAAEzB,SAAS,CAAC0B;AA5CD,CAArB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { MenuItem as MenuItemSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../../styles/color.module.css\";\r\nimport { ThemeContext } from \"../../ThemeContext\";\r\n\r\n/** \r\n  __Component 'MenuItem'__\r\n**/\r\n\r\nexport default function MenuItem(props) {\r\n  const {\r\n    type = \"def\",\r\n    view = \"smooth\",\r\n    color = \"default\",\r\n    dense,\r\n    className,\r\n    note,\r\n    active,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <MenuItemSource\r\n          {...restProps}\r\n          className={cx(\r\n            Type[type],\r\n            View[view],\r\n            note && View[\"note\"],\r\n            Color[color],\r\n            className,\r\n            active && View[\"active\"]\r\n          )}\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nMenuItem.propTypes = {\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * A space-delimited list of class names to pass along to a child element.\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * Dense size\r\n   */\r\n  dense: PropTypes.bool,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\r\n  icon: PropTypes.string,\r\n  /**\r\n   * Right-aligned label text content, useful for displaying hotkeys.\r\n   */\r\n  label: PropTypes.string,\r\n  /**\r\n   * Item text, required for usability.\r\n   */\r\n  text: PropTypes.string.isRequired,\r\n  /**\r\n   * Whether item is currently selected\r\n   */\r\n  active: PropTypes.string,\r\n  /**\r\n   * Children of this component will be rendered in a submenu that appears when hovering or clicking on this menu item.\r\n   */\r\n  children: PropTypes.array\r\n};\r\n"]},"metadata":{},"sourceType":"module"}