{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/DateTime/DateRangePicker/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../../OverviewComponent\";\nimport { OverviewTemplate } from \"../../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color,\n        shortcuts = props.shortcuts,\n        allowSingleDayRange = props.allowSingleDayRange;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \" default | card | action | circle | icon\"), \". Default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"tring = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined | raised \"), \". Default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". Default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"text\",\n    type: \"string\",\n    desc: React.createElement(React.Fragment, null, \"Action text. Havn't default state.\")\n  }, {\n    prop: \"dense\",\n    type: \"boolean\",\n    desc: React.createElement(React.Fragment, null, \"Whether this button should use minimal styles.\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should expand to fill its container. Default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"icon\",\n    type: \"string \",\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon to render before the text. For example,\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"\\\"tick\\\"\"))\n  }, {\n    prop: \"rightIcon\",\n    type: \"string | element\",\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon (or an icon element) to render before the text.\")\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the button will be disabled. Default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"onClick\",\n    type: \"func\",\n    desc: React.createElement(React.Fragment, null, \"Click event handler.\")\n  }, {\n    prop: \"elementRef\",\n    type: \"any\",\n    desc: React.createElement(React.Fragment, null, \"A ref handler that receives the native HTML element backing this component.\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">DateRangePicker</span>\\n      <span class=\\\"attr\\\">type</span> = '\".concat(type, \"' \\n      <span class=\\\"attr\\\">view</span> = '\").concat(view, \"' \\n      <span class=\\\"attr\\\">color</span> = '\").concat(color, \"' \\n      <span class=\\\"attr\\\">shortcuts</span> = {\").concat(shortcuts, \"}\\n      <span class=\\\"attr\\\">allowSingleDayRange</span> = {\").concat(allowSingleDayRange, \"}\\n/&gt;\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/DateTime/DateRangePicker/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","view","color","shortcuts","allowSingleDayRange","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const {\r\n    name,\r\n    type,\r\n    view,\r\n    color,\r\n    shortcuts,\r\n    allowSingleDayRange\r\n  } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set shape of the component. Possible states:{\" \"}\r\n          <b> default | card | action | circle | icon</b>. Default state is{\" \"}\r\n          <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          tring = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set view of the component. Possible states:{\" \"}\r\n          <b> filled | flat | smooth | outlined | raised </b>. Default state is{\" \"}\r\n          <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . Default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"text\",\r\n      type: \"string\",\r\n      desc: <>Action text. Havn't default state.</>\r\n    },\r\n    {\r\n      prop: \"dense\",\r\n      type: \"boolean\",\r\n      desc: <>Whether this button should use minimal styles.</>\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should expand to fill its container. Default state\r\n          is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: \"string \",\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon to render before the text. For example,{\" \"}\r\n          <b>\"tick\"</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"rightIcon\",\r\n      type: \"string | element\",\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon (or an icon element) to render before the\r\n          text.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the button will be disabled. Default state is{\" \"}\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onClick\",\r\n      type: \"func\",\r\n      desc: <>Click event handler.</>\r\n    },\r\n    {\r\n      prop: \"elementRef\",\r\n      type: \"any\",\r\n      desc: (\r\n        <>\r\n          A ref handler that receives the native HTML element backing this\r\n          component.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">DateRangePicker</span>\r\n      <span class=\"attr\">type</span> = '${type}' \r\n      <span class=\"attr\">view</span> = '${view}' \r\n      <span class=\"attr\">color</span> = '${color}' \r\n      <span class=\"attr\">shortcuts</span> = {${shortcuts}}\r\n      <span class=\"attr\">allowSingleDayRange</span> = {${allowSingleDayRange}}\r\n/&gt;`\r\n  ;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}