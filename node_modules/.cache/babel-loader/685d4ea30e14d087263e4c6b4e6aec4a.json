{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Table/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const type = props.type,\n        view = props.view,\n        color = props.color,\n        isCheckbox = props.isCheckbox,\n        isPagination = props.isPagination;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: \"Table\",\n    folder: \"Table/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \" def | dense \"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \" filled | flat | smooth | raised \"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"name\",\n    type: React.createElement(React.Fragment, null, \"array\"),\n    desc: React.createElement(React.Fragment, null, \"Array of Head names. See an example in the demo folder.\")\n  }, {\n    prop: \"data\",\n    type: React.createElement(React.Fragment, null, \"array\"),\n    desc: React.createElement(React.Fragment, null, \"Array of data. See an example in the demo folder.\")\n  }, {\n    prop: \"position\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Set the text-align on the table cell content. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \" left | right | center\"))\n  }, {\n    prop: \"pages\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Use or not pagination.\")\n  }, {\n    prop: \"checkboxes\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Use or not checkboxes.\")\n  }, {\n    prop: \"labelRowsPerPage\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Customize the rows per page label.\")\n  }, {\n    prop: \"rowsPerPageOptions\",\n    type: React.createElement(React.Fragment, null, \"array\"),\n    desc: React.createElement(React.Fragment, null, \"Customizes the options of the rows per page select field. If less than two options are available, no select field will be displayed.\")\n  }, {\n    prop: \"defRows\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"A Default value of the rows per page select field.\")\n  }];\n  /** Code source */\n\n  const Code = \"\\n&lt;<span class=\\\"val\\\">Table</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">name</span>={<span class=\\\"js\\\">array_Head</span>}\\n  <span class=\\\"attr\\\">data</span>={<span class=\\\"js\\\">array_Data</span>}\\n  <span class=\\\"attr\\\">position</span>=\\\"<span class=\\\"val\\\">left</span>\\\"\\n  <span class=\\\"attr\\\">pages</span>={<span class=\\\"bool\\\">\").concat(isPagination ? \"true\" : \"false\", \"</span>}\\n  <span class=\\\"attr\\\">labelRowsPerPage</span>=\\\"<span class=\\\"val\\\">Rows per page:</span>\\\"\\n  <span class=\\\"attr\\\">rowsPerPageOptions</span>={<span class=\\\"js\\\">[5, 8, 20]</span>}\\n  <span class=\\\"attr\\\">defRows</span>={<span class=\\\"num\\\">8</span>}\\n  <span class=\\\"attr\\\">checkboxes</span>={<span class=\\\"bool\\\">\").concat(isCheckbox ? \"true\" : \"false\", \"</span>}\\n\\n<span class=\\\"cmnt\\\">\\n  const Head = [\\n    { id: \\\"no\\\", label: \\\"No.\\\" },\\n    { id: \\\"customer\\\", label: \\\"Customer\\\" },\\n    { id: \\\"company\\\", label: \\\"Company\\\" },\\n    { id: \\\"date\\\", label: \\\"Date\\\" },\\n    { id: \\\"status\\\", label: \\\"Status\\\" },\\n    { id: \\\"address\\\", label: \\\"Address\\\" }\\n  ];\\n</span>\\n/&gt;\\n\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Table/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","type","view","color","isCheckbox","isPagination","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { type, view, color, isCheckbox, isPagination } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={\"Table\"} folder=\"Table/\" />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> def | dense </b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | flat | smooth | raised </b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          .\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"name\",\r\n      type: <>array</>,\r\n      desc: <>Array of Head names. See an example in the demo folder.</>\r\n    },\r\n    {\r\n      prop: \"data\",\r\n      type: <>array</>,\r\n      desc: <>Array of data. See an example in the demo folder.</>\r\n    },\r\n    {\r\n      prop: \"position\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          Set the text-align on the table cell content. Possible states:{\" \"}\r\n          <b> left | right | center</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"pages\",\r\n      type: <>boolean</>,\r\n      desc: <>Use or not pagination.</>\r\n    },\r\n    {\r\n      prop: \"checkboxes\",\r\n      type: <>boolean</>,\r\n      desc: <>Use or not checkboxes.</>\r\n    },\r\n    {\r\n      prop: \"labelRowsPerPage\",\r\n      type: <>string</>,\r\n      desc: <>Customize the rows per page label.</>\r\n    },\r\n    {\r\n      prop: \"rowsPerPageOptions\",\r\n      type: <>array</>,\r\n      desc: (\r\n        <>\r\n          Customizes the options of the rows per page select field. If less than\r\n          two options are available, no select field will be displayed.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"defRows\",\r\n      type: <>number</>,\r\n      desc: <>A Default value of the rows per page select field.</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `\r\n&lt;<span class=\"val\">Table</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">name</span>={<span class=\"js\">array_Head</span>}\r\n  <span class=\"attr\">data</span>={<span class=\"js\">array_Data</span>}\r\n  <span class=\"attr\">position</span>=\"<span class=\"val\">left</span>\"\r\n  <span class=\"attr\">pages</span>={<span class=\"bool\">${isPagination ? \"true\" : \"false\"}</span>}\r\n  <span class=\"attr\">labelRowsPerPage</span>=\"<span class=\"val\">Rows per page:</span>\"\r\n  <span class=\"attr\">rowsPerPageOptions</span>={<span class=\"js\">[5, 8, 20]</span>}\r\n  <span class=\"attr\">defRows</span>={<span class=\"num\">8</span>}\r\n  <span class=\"attr\">checkboxes</span>={<span class=\"bool\">${isCheckbox ? \"true\" : \"false\"}</span>}\r\n\r\n<span class=\"cmnt\">\r\n  const Head = [\r\n    { id: \"no\", label: \"No.\" },\r\n    { id: \"customer\", label: \"Customer\" },\r\n    { id: \"company\", label: \"Company\" },\r\n    { id: \"date\", label: \"Date\" },\r\n    { id: \"status\", label: \"Status\" },\r\n    { id: \"address\", label: \"Address\" }\r\n  ];\r\n</span>\r\n/&gt;\r\n`;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}