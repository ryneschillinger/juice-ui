{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Toast/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nimport OverviewAPI from \"../OverviewAPI.jsx\";\nexport const API = props => {\n  const name = props.name,\n        isClose = props.isClose,\n        view = props.view,\n        color = props.color;\n  const ToastNodeApi = [{\n    prop: \"message\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Message to display in the body of the toast. Required.\")\n  }, {\n    prop: \"icon\",\n    type: React.createElement(React.Fragment, null, \"string | element\"),\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon (or an icon element) to render before the message.\")\n  }, {\n    prop: \"action\",\n    type: React.createElement(React.Fragment, null, \"element\"),\n    desc: React.createElement(React.Fragment, null, \"Action rendered as a Button. The toast is dismissed automatically when the user clicks the action button. Omit this prop to omit the action button. Options: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" href target text \"), \". For example,\", \" \", \" { href: 'https://gum.co/figma2react', target: '_blank', text: <strong>Yum.</strong> }\", \".\")\n  }, {\n    prop: \"timeout\",\n    type: React.createElement(React.Fragment, null, \"number = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"5000\")),\n    desc: React.createElement(React.Fragment, null, \"Milliseconds to wait before automatically dismissing toast. Providing a value less than or equal to 0 will disable the timeout (this is discouraged).\")\n  }, {\n    prop: \"onDismiss\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Callback invoked when the toast is dismissed, either by the user or by the timeout. The value of the argument indicates whether the toast was closed because the timeout expired.\")\n  }];\n  const optionalText = React.createElement(React.Fragment, null, \"Way to use the \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Toaster\"), \" component is\", \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"<Toaster ref={ref => ref.show({ ...toast })}/> \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), \"Render a \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Toaster\"), \" element and use the ref prop to access its instance methods.Working with multiple toasters.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Toast\"), \" is an array and has his own API.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Toast API description:\"), React.createElement(OverviewAPI, {\n    data: ToastNodeApi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }));\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    text: optionalText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" def \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \" filled | smooth | outlined | raised \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"withoutClose\",\n    type: React.createElement(React.Fragment, null, \"boolean \"),\n    desc: React.createElement(React.Fragment, null, \"To show or not Close button.\")\n  }, {\n    prop: \"position\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"top\"), \" \"),\n    desc: React.createElement(React.Fragment, null, \"Position of Toaster within its container. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \" top top-left top-right bottom bottom-left bottom-right \"))\n  }, {\n    prop: \"usePortal\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"true\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the toaster should be rendered into a new element attached to document.body. If false, then positioning will be relative to the parent element.\")\n  }, {\n    prop: \"setRef\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Function to store ref of Toaster\")\n  }];\n  /** Code source */\n\n  const Code = \"<span class=\\\"cmnt\\\">/*** HTML COMPONENTS ***/</span>\\n&lt;<span class=\\\"el\\\">Button</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">filled</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">primary</span>\\\"\\n  <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">Toast me</span>\\\"\\n  <span class=\\\"attr\\\">onClick</span>={() <span class=\\\"js\\\">=> myRef.show</span>(<span class=\\\"js\\\">DemoToast</span>)</span>}\\n/&gt;\\n&lt;<span class=\\\"el\\\">Toaster</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">def</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\".concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">usePortal</span>={<span class=\\\"bool\\\">false</span>}\\n  <span class=\\\"attr\\\">position</span>=\\\"<span class=\\\"val\\\">top</span>\\\"\\n  <span class=\\\"attr\\\">setRef</span>={<span class=\\\"js\\\">setRef</span>}\\n  <span class=\\\"attr\\\">withoutClose</span>={<span class=\\\"bool\\\">\").concat(!isClose, \"</span>}\\n/&gt;\\n\\n<span class=\\\"cmnt\\\">/*** TOAST DATA ***/</span>\\n<span class=\\\"js\\\">const</span> <span class=\\\"el\\\">DemoToast</span> = {\\n  <span class=\\\"attr\\\">message</span>: <span class=\\\"val\\\">\\\"Just a toast!\\\"</span>,\\n  <span class=\\\"attr\\\">icon</span>: <span class=\\\"js\\\">isIcon</span> ? &lt;<span class=\\\"val\\\">Icon</span>  <span class=\\\"attr\\\">icon</span>=\\\"<span class=\\\"val\\\">info-sign</span>\\\" <span class=\\\"attr\\\">iconSize</span>={<span class=\\\"num\\\">24</span>} /&gt; : <span class=\\\"bool\\\">null</span>,\\n  <span class=\\\"attr\\\">timeout</span>: <span class=\\\"num\\\">5000</span>,\\n  <span class=\\\"attr\\\">action</span>: <span class=\\\"js\\\">isLink</span>\\n    ? {\\n        <span class=\\\"attr\\\">href</span>: <span class=\\\"val\\\">\\\"https://procatinator.com/\\\"</span>,\\n        <span class=\\\"attr\\\">target</span>: <span class=\\\"val\\\">\\\"_blank\\\"</span>,\\n        <span class=\\\"attr\\\">text</span>: &lt;<span class=\\\"val\\\">strong</span>&gt;Do something.&lt;/<span class=\\\"val\\\">strong</span>&gt;,\\n      }\\n    : <span class=\\\"bool\\\">null</span>\\n};\\n<span class=\\\"js\\\">const</span> [myRef, setRef] = <span class=\\\"el\\\">React</span><span class=\\\"act\\\">.useState</span>(<span class=\\\"bool\\\">null</span>);\\n\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Toast/api.jsx"],"names":["React","Overview","OverviewTemplate","OverviewAPI","API","props","name","isClose","view","color","ToastNodeApi","prop","type","desc","optionalText","OverviewText","APIData","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\nimport OverviewAPI from \"../OverviewAPI.jsx\";\r\n\r\nexport const API = props => {\r\n  const { name, isClose, view, color } = props;\r\n\r\n  const ToastNodeApi = [\r\n    {\r\n      prop: \"message\",\r\n      type: <>string</>,\r\n      desc: <>Message to display in the body of the toast. Required.</>\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: <>string | element</>,\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon (or an icon element) to render before the\r\n          message.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"action\",\r\n      type: <>element</>,\r\n      desc: (\r\n        <>\r\n          Action rendered as a Button. The toast is dismissed automatically when\r\n          the user clicks the action button. Omit this prop to omit the action\r\n          button. Options: <b> href target text </b>. For example,{\" \"}\r\n          {\r\n            \" { href: 'https://gum.co/figma2react', target: '_blank', text: <strong>Yum.</strong> }\"\r\n          }\r\n          .\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"timeout\",\r\n      type: (\r\n        <>\r\n          number = <i>5000</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Milliseconds to wait before automatically dismissing toast. Providing\r\n          a value less than or equal to 0 will disable the timeout (this is\r\n          discouraged).\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onDismiss\",\r\n      type: <>func</>,\r\n      desc: (\r\n        <>\r\n          Callback invoked when the toast is dismissed, either by the user or by\r\n          the timeout. The value of the argument indicates whether the toast was\r\n          closed because the timeout expired.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const optionalText = (\r\n    <>\r\n      Way to use the <b>Toaster</b> component is{\" \"}\r\n      <b>{\"<Toaster ref={ref => ref.show({ ...toast })}/> \"}</b>\r\n      <br />\r\n      Render a <b>Toaster</b> element and use the ref prop to access its\r\n      instance methods.Working with multiple toasters.\r\n      <br />\r\n      <b>Toast</b> is an array and has his own API.\r\n      <br />\r\n      <b>Toast API description:</b>\r\n      <OverviewAPI data={ToastNodeApi} />\r\n    </>\r\n  );\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} text={optionalText} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> def </b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | smooth | outlined | raised </b>. The default state is{\" \"}\r\n          <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"withoutClose\",\r\n      type: <>boolean </>,\r\n      desc: <>To show or not Close button.</>\r\n    },\r\n    {\r\n      prop: \"position\",\r\n      type: (\r\n        <>\r\n          string = <i>top</i>{\" \"}\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Position of Toaster within its container. Possible states:\r\n          <b> top top-left top-right bottom bottom-left bottom-right </b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"usePortal\",\r\n      type: (\r\n        <>\r\n          boolean = <i>true</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether the toaster should be rendered into a new element attached to\r\n          document.body. If false, then positioning will be relative to the\r\n          parent element.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"setRef\",\r\n      type: <>func</>,\r\n      desc: <>Function to store ref of Toaster</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `<span class=\"cmnt\">/*** HTML COMPONENTS ***/</span>\r\n&lt;<span class=\"el\">Button</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">filled</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">primary</span>\"\r\n  <span class=\"attr\">text</span>=\"<span class=\"val\">Toast me</span>\"\r\n  <span class=\"attr\">onClick</span>={() <span class=\"js\">=> myRef.show</span>(<span class=\"js\">DemoToast</span>)</span>}\r\n/&gt;\r\n&lt;<span class=\"el\">Toaster</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">def</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">usePortal</span>={<span class=\"bool\">false</span>}\r\n  <span class=\"attr\">position</span>=\"<span class=\"val\">top</span>\"\r\n  <span class=\"attr\">setRef</span>={<span class=\"js\">setRef</span>}\r\n  <span class=\"attr\">withoutClose</span>={<span class=\"bool\">${!isClose}</span>}\r\n/&gt;\r\n\r\n<span class=\"cmnt\">/*** TOAST DATA ***/</span>\r\n<span class=\"js\">const</span> <span class=\"el\">DemoToast</span> = {\r\n  <span class=\"attr\">message</span>: <span class=\"val\">\"Just a toast!\"</span>,\r\n  <span class=\"attr\">icon</span>: <span class=\"js\">isIcon</span> ? &lt;<span class=\"val\">Icon</span>  <span class=\"attr\">icon</span>=\"<span class=\"val\">info-sign</span>\" <span class=\"attr\">iconSize</span>={<span class=\"num\">24</span>} /&gt; : <span class=\"bool\">null</span>,\r\n  <span class=\"attr\">timeout</span>: <span class=\"num\">5000</span>,\r\n  <span class=\"attr\">action</span>: <span class=\"js\">isLink</span>\r\n    ? {\r\n        <span class=\"attr\">href</span>: <span class=\"val\">\"https://procatinator.com/\"</span>,\r\n        <span class=\"attr\">target</span>: <span class=\"val\">\"_blank\"</span>,\r\n        <span class=\"attr\">text</span>: &lt;<span class=\"val\">strong</span>&gt;Do something.&lt;/<span class=\"val\">strong</span>&gt;,\r\n      }\r\n    : <span class=\"bool\">null</span>\r\n};\r\n<span class=\"js\">const</span> [myRef, setRef] = <span class=\"el\">React</span><span class=\"act\">.useState</span>(<span class=\"bool\">null</span>);\r\n`;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}