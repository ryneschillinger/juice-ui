{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\"; // HACKHACK: https://github.com/palantir/blueprint/issues/4342\n// eslint-disable-next-line deprecation/deprecation\n\nvar Overlay =\n/** @class */\nfunction (_super) {\n  __extends(Overlay, _super);\n\n  function Overlay() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.isAutoFocusing = false;\n    _this.state = {\n      hasEverOpened: _this.props.isOpen\n    }; // an HTMLElement that contains the backdrop and any children, to query for focus target\n\n    _this.containerElement = null; // An empty, keyboard-focusable div at the beginning of the Overlay content\n\n    _this.startFocusTrapElement = null; // An empty, keyboard-focusable div at the end of the Overlay content\n\n    _this.endFocusTrapElement = null;\n    _this.refHandlers = {\n      // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n\n      /* eslint-disable-next-line react/no-find-dom-node */\n      container: function (ref) {\n        return _this.containerElement = findDOMNode(ref);\n      },\n      endFocusTrap: function (ref) {\n        return _this.endFocusTrapElement = ref;\n      },\n      startFocusTrap: function (ref) {\n        return _this.startFocusTrapElement = ref;\n      }\n    };\n\n    _this.maybeRenderChild = function (child) {\n      if (isFunction(child)) {\n        child = child();\n      }\n\n      if (child == null) {\n        return null;\n      } // add a special class to each child element that will automatically set the appropriate\n      // CSS position mode under the hood.\n\n\n      var decoratedChild = typeof child === \"object\" ? React.cloneElement(child, {\n        className: classNames(child.props.className, Classes.OVERLAY_CONTENT)\n      }) : React.createElement(\"span\", {\n        className: Classes.OVERLAY_CONTENT\n      }, child);\n      var _a = _this.props,\n          onOpening = _a.onOpening,\n          onOpened = _a.onOpened,\n          onClosing = _a.onClosing,\n          transitionDuration = _a.transitionDuration,\n          transitionName = _a.transitionName; // a breaking change in react-transition-group types requires us to be explicit about the type overload here,\n      // using a technique similar to Select.ofType() in @blueprintjs/select\n\n      var CSSTransitionImplicit = CSSTransition;\n      return React.createElement(CSSTransitionImplicit, {\n        classNames: transitionName,\n        onEntering: onOpening,\n        onEntered: onOpened,\n        onExiting: onClosing,\n        onExited: _this.handleTransitionExited,\n        timeout: transitionDuration,\n        addEndListener: _this.handleTransitionAddEnd\n      }, decoratedChild);\n    };\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n\n\n    _this.handleStartFocusTrapElementFocus = function (e) {\n      var _a;\n\n      if (!_this.props.enforceFocus || _this.isAutoFocusing) {\n        return;\n      } // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n      // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n      // Otherwise, we're handling a user interaction, and we should wrap around to the last\n      // element in this transition group.\n\n\n      if (e.relatedTarget != null && _this.containerElement.contains(e.relatedTarget) && e.relatedTarget !== _this.endFocusTrapElement) {\n        (_a = _this.endFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n\n\n    _this.handleStartFocusTrapElementKeyDown = function (e) {\n      var _a;\n\n      if (!_this.props.enforceFocus) {\n        return;\n      } // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable-next-line deprecation/deprecation */\n\n\n      if (e.shiftKey && e.which === Keys.TAB) {\n        var lastFocusableElement = _this.getKeyboardFocusableElements().pop();\n\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          (_a = _this.endFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n\n\n    _this.handleEndFocusTrapElementFocus = function (e) {\n      var _a, _b; // No need for this.props.enforceFocus check here because this element is only rendered\n      // when that prop is true.\n      // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n      // \"start focus trap\" element.\n      // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n      // presses shift+tab from the first focusable element in the overlay.\n\n\n      if (e.relatedTarget != null && _this.containerElement.contains(e.relatedTarget) && e.relatedTarget !== _this.startFocusTrapElement) {\n        var firstFocusableElement = _this.getKeyboardFocusableElements().shift(); // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n\n\n        if (!_this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n          firstFocusableElement.focus();\n        } else {\n          (_a = _this.startFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n            preventScroll: true\n          });\n        }\n      } else {\n        var lastFocusableElement = _this.getKeyboardFocusableElements().pop();\n\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          // Keeps focus within Overlay even if there are no keyboard-focusable children\n          (_b = _this.startFocusTrapElement) === null || _b === void 0 ? void 0 : _b.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n\n    _this.handleTransitionExited = function (node) {\n      var _a, _b;\n\n      if (_this.props.shouldReturnFocusOnClose && _this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n        _this.lastActiveElementBeforeOpened.focus();\n      }\n\n      (_b = (_a = _this.props).onClosed) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    };\n\n    _this.handleBackdropMouseDown = function (e) {\n      var _a;\n\n      var _b = _this.props,\n          backdropProps = _b.backdropProps,\n          canOutsideClickClose = _b.canOutsideClickClose,\n          enforceFocus = _b.enforceFocus,\n          onClose = _b.onClose;\n\n      if (canOutsideClickClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n\n      if (enforceFocus) {\n        _this.bringFocusInsideOverlay();\n      }\n\n      (_a = backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.onMouseDown) === null || _a === void 0 ? void 0 : _a.call(backdropProps, e);\n    };\n\n    _this.handleDocumentClick = function (e) {\n      var _a = _this.props,\n          canOutsideClickClose = _a.canOutsideClickClose,\n          isOpen = _a.isOpen,\n          onClose = _a.onClose; // get the actual target even in the Shadow DOM\n\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n      var stackIndex = Overlay_1.openStack.indexOf(_this);\n      var isClickInThisOverlayOrDescendant = Overlay_1.openStack.slice(stackIndex).some(function (_a) {\n        var elem = _a.containerElement; // `elem` is the container of backdrop & content, so clicking on that container\n        // should not count as being \"inside\" the overlay.\n\n        return elem && elem.contains(eventTarget) && !elem.isSameNode(eventTarget);\n      });\n\n      if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n        // casting to any because this is a native event\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n    };\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n\n\n    _this.handleDocumentFocus = function (e) {\n      // get the actual target even in the Shadow DOM\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n\n      if (_this.props.enforceFocus && _this.containerElement != null && eventTarget instanceof Node && !_this.containerElement.contains(eventTarget)) {\n        // prevent default focus behavior (sometimes auto-scrolls the page)\n        e.preventDefault();\n        e.stopImmediatePropagation();\n\n        _this.bringFocusInsideOverlay();\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      var _a = _this.props,\n          canEscapeKeyClose = _a.canEscapeKeyClose,\n          onClose = _a.onClose; // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n\n      /* eslint-disable-next-line deprecation/deprecation */\n\n      if (e.which === Keys.ESCAPE && canEscapeKeyClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e); // prevent browser-specific escape key behavior (Safari exits fullscreen)\n\n        e.preventDefault();\n      }\n    };\n\n    _this.handleTransitionAddEnd = function () {// no-op\n    };\n\n    return _this;\n  }\n\n  Overlay_1 = Overlay;\n\n  Overlay.getDerivedStateFromProps = function (_a) {\n    var hasEverOpened = _a.isOpen;\n\n    if (hasEverOpened) {\n      return {\n        hasEverOpened: hasEverOpened\n      };\n    }\n\n    return null;\n  };\n\n  Overlay.prototype.render = function () {\n    var _a;\n\n    var _b; // oh snap! no reason to render anything at all if we're being truly lazy\n\n\n    if (this.props.lazy && !this.state.hasEverOpened) {\n      return null;\n    }\n\n    var _c = this.props,\n        autoFocus = _c.autoFocus,\n        children = _c.children,\n        className = _c.className,\n        enforceFocus = _c.enforceFocus,\n        usePortal = _c.usePortal,\n        isOpen = _c.isOpen; // TransitionGroup types require single array of children; does not support nested arrays.\n    // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n    // Transition element (no ReactText allowed).\n\n    var childrenWithTransitions = isOpen ? (_b = React.Children.map(children, this.maybeRenderChild)) !== null && _b !== void 0 ? _b : [] : [];\n    var maybeBackdrop = this.maybeRenderBackdrop();\n\n    if (maybeBackdrop !== null) {\n      childrenWithTransitions.unshift(maybeBackdrop);\n    }\n\n    if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n      childrenWithTransitions.unshift(this.renderDummyElement(\"__start\", {\n        className: Classes.OVERLAY_START_FOCUS_TRAP,\n        onFocus: this.handleStartFocusTrapElementFocus,\n        onKeyDown: this.handleStartFocusTrapElementKeyDown,\n        ref: this.refHandlers.startFocusTrap\n      }));\n\n      if (enforceFocus) {\n        childrenWithTransitions.push(this.renderDummyElement(\"__end\", {\n          className: Classes.OVERLAY_END_FOCUS_TRAP,\n          onFocus: this.handleEndFocusTrapElementFocus,\n          ref: this.refHandlers.endFocusTrap\n        }));\n      }\n    }\n\n    var containerClasses = classNames(Classes.OVERLAY, (_a = {}, _a[Classes.OVERLAY_OPEN] = isOpen, _a[Classes.OVERLAY_INLINE] = !usePortal, _a), className);\n    var transitionGroup = React.createElement(TransitionGroup, {\n      appear: true,\n      \"aria-live\": \"polite\",\n      className: containerClasses,\n      component: \"div\",\n      onKeyDown: this.handleKeyDown,\n      ref: this.refHandlers.container\n    }, childrenWithTransitions);\n\n    if (usePortal) {\n      return React.createElement(Portal, {\n        className: this.props.portalClassName,\n        container: this.props.portalContainer\n      }, transitionGroup);\n    } else {\n      return transitionGroup;\n    }\n  };\n\n  Overlay.prototype.componentDidMount = function () {\n    if (this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n\n  Overlay.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.isOpen && !this.props.isOpen) {\n      this.overlayWillClose();\n    } else if (!prevProps.isOpen && this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n\n  Overlay.prototype.componentWillUnmount = function () {\n    this.overlayWillClose();\n  };\n  /**\n   * @public for testing\n   * @internal\n   */\n\n\n  Overlay.prototype.bringFocusInsideOverlay = function () {\n    var _this = this; // always delay focus manipulation to just before repaint to prevent scroll jumping\n\n\n    return this.requestAnimationFrame(function () {\n      var _a; // container ref may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n\n\n      if (_this.containerElement == null || document.activeElement == null || !_this.props.isOpen) {\n        return;\n      }\n\n      var isFocusOutsideModal = !_this.containerElement.contains(document.activeElement);\n\n      if (isFocusOutsideModal) {\n        (_a = _this.startFocusTrapElement) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n        _this.isAutoFocusing = false;\n      }\n    });\n  };\n\n  Overlay.prototype.maybeRenderBackdrop = function () {\n    var _a = this.props,\n        backdropClassName = _a.backdropClassName,\n        backdropProps = _a.backdropProps,\n        hasBackdrop = _a.hasBackdrop,\n        isOpen = _a.isOpen,\n        transitionDuration = _a.transitionDuration,\n        transitionName = _a.transitionName;\n\n    if (hasBackdrop && isOpen) {\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        key: \"__backdrop\",\n        timeout: transitionDuration,\n        addEndListener: this.handleTransitionAddEnd\n      }, React.createElement(\"div\", __assign({}, backdropProps, {\n        className: classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.className),\n        onMouseDown: this.handleBackdropMouseDown\n      })));\n    } else {\n      return null;\n    }\n  };\n\n  Overlay.prototype.renderDummyElement = function (key, props) {\n    var _a = this.props,\n        transitionDuration = _a.transitionDuration,\n        transitionName = _a.transitionName;\n    return React.createElement(CSSTransition, {\n      classNames: transitionName,\n      key: key,\n      addEndListener: this.handleTransitionAddEnd,\n      timeout: transitionDuration,\n      unmountOnExit: true\n    }, React.createElement(\"div\", __assign({\n      tabIndex: 0\n    }, props)));\n  };\n\n  Overlay.prototype.getKeyboardFocusableElements = function () {\n    var focusableElements = this.containerElement !== null ? Array.from( // Order may not be correct if children elements use tabindex values > 0.\n    // Selectors derived from this SO question:\n    // https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus\n    this.containerElement.querySelectorAll(['a[href]:not([tabindex=\"-1\"])', 'button:not([disabled]):not([tabindex=\"-1\"])', 'details:not([tabindex=\"-1\"])', 'input:not([disabled]):not([tabindex=\"-1\"])', 'select:not([disabled]):not([tabindex=\"-1\"])', 'textarea:not([disabled]):not([tabindex=\"-1\"])', '[tabindex]:not([tabindex=\"-1\"])'].join(\",\"))) : [];\n    return focusableElements.filter(function (el) {\n      return !el.classList.contains(Classes.OVERLAY_START_FOCUS_TRAP) && !el.classList.contains(Classes.OVERLAY_END_FOCUS_TRAP);\n    });\n  };\n\n  Overlay.prototype.overlayWillClose = function () {\n    document.removeEventListener(\"focus\", this.handleDocumentFocus,\n    /* useCapture */\n    true);\n    document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n    var openStack = Overlay_1.openStack;\n    var stackIndex = openStack.indexOf(this);\n\n    if (stackIndex !== -1) {\n      openStack.splice(stackIndex, 1);\n\n      if (openStack.length > 0) {\n        var lastOpenedOverlay = Overlay_1.getLastOpened(); // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n        // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n        // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n\n        if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n          lastOpenedOverlay.bringFocusInsideOverlay();\n          document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus,\n          /* useCapture */\n          true);\n        }\n      }\n\n      if (openStack.filter(function (o) {\n        return o.props.usePortal && o.props.hasBackdrop;\n      }).length === 0) {\n        document.body.classList.remove(Classes.OVERLAY_OPEN);\n      }\n    }\n  };\n\n  Overlay.prototype.overlayWillOpen = function () {\n    var getLastOpened = Overlay_1.getLastOpened,\n        openStack = Overlay_1.openStack;\n\n    if (openStack.length > 0) {\n      document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus,\n      /* useCapture */\n      true);\n    }\n\n    openStack.push(this);\n\n    if (this.props.autoFocus) {\n      this.isAutoFocusing = true;\n      this.bringFocusInsideOverlay();\n    }\n\n    if (this.props.enforceFocus) {\n      // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n      // our handler before all others\n      document.addEventListener(\"focus\", this.handleDocumentFocus,\n      /* useCapture */\n      true);\n    }\n\n    if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n      document.addEventListener(\"mousedown\", this.handleDocumentClick);\n    }\n\n    if (this.props.hasBackdrop && this.props.usePortal) {\n      // add a class to the body to prevent scrolling of content below the overlay\n      document.body.classList.add(Classes.OVERLAY_OPEN);\n    }\n\n    this.lastActiveElementBeforeOpened = document.activeElement;\n  };\n\n  var Overlay_1;\n  Overlay.displayName = DISPLAYNAME_PREFIX + \".Overlay\";\n  Overlay.defaultProps = {\n    autoFocus: true,\n    backdropProps: {},\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    hasBackdrop: true,\n    isOpen: false,\n    lazy: true,\n    shouldReturnFocusOnClose: true,\n    transitionDuration: 300,\n    transitionName: Classes.OVERLAY,\n    usePortal: true\n  };\n  Overlay.openStack = [];\n\n  Overlay.getLastOpened = function () {\n    return Overlay_1.openStack[Overlay_1.openStack.length - 1];\n  };\n\n  Overlay = Overlay_1 = __decorate([polyfill], Overlay);\n  return Overlay;\n}(AbstractPureComponent2);\n\nexport { Overlay };","map":null,"metadata":{},"sourceType":"module"}