{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/SelectColorGroup.jsx\";\nimport React, { useCallback } from \"react\";\nimport { RadioGroup } from \"@blueprintjs/core\";\nimport Radio from \"../core/Radio\";\n\nconst SelectColorGroup = props => {\n  const color = props.color,\n        setColor = props.setColor,\n        colors = props.colors;\n  const defColors = !colors ? [[\"Default\", \"default\"], [\"Primary\", \"primary\"], [\"Warning\", \"warning\"], [\"Danger\", \"danger\"], [\"Success\", \"success\"], [\"Primary Alt\", \"primary_alt\"], [\"Warning Alt\", \"warning_alt\"], [\"Danger Alt\", \"danger_alt\"], [\"Success Alt\", \"success_alt\"]] : colors;\n  const handleClick = useCallback(e => setColor(e.target.value), [setColor]);\n  return React.createElement(RadioGroup, {\n    inline: false,\n    label: \"Select color:\",\n    name: \"Color group\",\n    onChange: () => null,\n    selectedValue: color,\n    style: {\n      float: \"left\"\n    },\n    className: \"demo-color-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, defColors.map(([label, value], i) => React.createElement(Radio, {\n    type: \"dense\",\n    color: value === color ? \"primary\" : \"default\",\n    label: label,\n    value: value,\n    onClick: handleClick,\n    alignIndicator: \"left\" //large\n    ,\n    key: i,\n    checked: value === color && true //important\n    ,\n    style: {\n      margin: \"2px\"\n    },\n    onChange: () => null,\n    fill: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })));\n};\n\nexport default SelectColorGroup;","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/SelectColorGroup.jsx"],"names":["React","useCallback","RadioGroup","Radio","SelectColorGroup","props","color","setColor","colors","defColors","handleClick","e","target","value","float","map","label","i","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAAA,QACxBC,KADwB,GACID,KADJ,CACxBC,KADwB;AAAA,QACjBC,QADiB,GACIF,KADJ,CACjBE,QADiB;AAAA,QACPC,MADO,GACIH,KADJ,CACPG,MADO;AAEhC,QAAMC,SAAS,GAAG,CAACD,MAAD,GACd,CACE,CAAC,SAAD,EAAY,SAAZ,CADF,EAEE,CAAC,SAAD,EAAY,SAAZ,CAFF,EAGE,CAAC,SAAD,EAAY,SAAZ,CAHF,EAIE,CAAC,QAAD,EAAW,QAAX,CAJF,EAKE,CAAC,SAAD,EAAY,SAAZ,CALF,EAME,CAAC,aAAD,EAAgB,aAAhB,CANF,EAOE,CAAC,aAAD,EAAgB,aAAhB,CAPF,EAQE,CAAC,YAAD,EAAe,YAAf,CARF,EASE,CAAC,aAAD,EAAgB,aAAhB,CATF,CADc,GAYdA,MAZJ;AAcA,QAAME,WAAW,GAAGT,WAAW,CAACU,CAAC,IAAIJ,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd,EAAgC,CAACN,QAAD,CAAhC,CAA/B;AAEA,SACE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAE,KADV;AAEE,IAAA,KAAK,EAAC,eAFR;AAGE,IAAA,IAAI,EAAC,aAHP;AAIE,IAAA,QAAQ,EAAE,MAAM,IAJlB;AAKE,IAAA,aAAa,EAAED,KALjB;AAME,IAAA,KAAK,EAAE;AAAEQ,MAAAA,KAAK,EAAE;AAAT,KANT;AAOE,IAAA,SAAS,EAAC,kBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGL,SAAS,CAACM,GAAV,CAAc,CAAC,CAACC,KAAD,EAAQH,KAAR,CAAD,EAAiBI,CAAjB,KACb,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAEJ,KAAK,KAAKP,KAAV,GAAkB,SAAlB,GAA8B,SAFvC;AAGE,IAAA,KAAK,EAAEU,KAHT;AAIE,IAAA,KAAK,EAAEH,KAJT;AAKE,IAAA,OAAO,EAAEH,WALX;AAME,IAAA,cAAc,EAAC,MANjB,CAOE;AAPF;AAQE,IAAA,GAAG,EAAEO,CARP;AASE,IAAA,OAAO,EAAEJ,KAAK,KAAKP,KAAV,IAAmB,IAT9B,CASoC;AATpC;AAUE,IAAA,KAAK,EAAE;AAAEY,MAAAA,MAAM,EAAE;AAAV,KAVT;AAWE,IAAA,QAAQ,EAAE,MAAM,IAXlB;AAYE,IAAA,IAAI,MAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CATH,CADF;AA4BD,CA9CD;;AAgDA,eAAed,gBAAf","sourcesContent":["import React, { useCallback } from \"react\";\r\n\r\nimport { RadioGroup } from \"@blueprintjs/core\";\r\nimport Radio from \"../core/Radio\";\r\n\r\nconst SelectColorGroup = props => {\r\n  const { color, setColor, colors } = props;\r\n  const defColors = !colors\r\n    ? [\r\n        [\"Default\", \"default\"],\r\n        [\"Primary\", \"primary\"],\r\n        [\"Warning\", \"warning\"],\r\n        [\"Danger\", \"danger\"],\r\n        [\"Success\", \"success\"],\r\n        [\"Primary Alt\", \"primary_alt\"],\r\n        [\"Warning Alt\", \"warning_alt\"],\r\n        [\"Danger Alt\", \"danger_alt\"],\r\n        [\"Success Alt\", \"success_alt\"]\r\n      ]\r\n    : colors;\r\n\r\n  const handleClick = useCallback(e => setColor(e.target.value), [setColor]);\r\n\r\n  return (\r\n    <RadioGroup\r\n      inline={false}\r\n      label=\"Select color:\"\r\n      name=\"Color group\"\r\n      onChange={() => null}\r\n      selectedValue={color}\r\n      style={{ float: \"left\" }}\r\n      className=\"demo-color-group\"\r\n    >\r\n      {defColors.map(([label, value], i) => (\r\n        <Radio\r\n          type=\"dense\"\r\n          color={value === color ? \"primary\" : \"default\"}\r\n          label={label}\r\n          value={value}\r\n          onClick={handleClick}\r\n          alignIndicator=\"left\"\r\n          //large\r\n          key={i}\r\n          checked={value === color && true} //important\r\n          style={{ margin: \"2px\" }}\r\n          onChange={() => null}\r\n          fill\r\n        />\r\n      ))}\r\n    </RadioGroup>\r\n  );\r\n};\r\n\r\nexport default SelectColorGroup;\r\n"]},"metadata":{},"sourceType":"module"}