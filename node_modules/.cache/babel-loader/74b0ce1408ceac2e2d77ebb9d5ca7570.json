{"ast":null,"code":"import _slicedToArray from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Inputs/DefaultInput/DefaultInput.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { InputGroup, Icon, Button } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../../styles/color.module.css\";\nimport { ThemeContext } from \"../../ThemeContext\";\n/** \r\n  __Component 'Default Input'__\r\n**/\n\nexport default function TextInput(props) {\n  const _props$view = props.view,\n        view = _props$view === void 0 ? \"smooth\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"primary\" : _props$color,\n        dense = props.dense,\n        className = props.className,\n        placeholder = props.placeholder,\n        label = props.label,\n        id = props.id,\n        clearButton = props.clearButton,\n        clearIcon = props.clearIcon,\n        value = props.value,\n        rightElement = props.rightElement,\n        success = props.success,\n        error = props.error,\n        full = props.full,\n        errorHelperText = props.errorHelperText,\n        fixed = props.fixed,\n        restProps = _objectWithoutProperties(props, [\"view\", \"color\", \"dense\", \"className\", \"placeholder\", \"label\", \"id\", \"clearButton\", \"clearIcon\", \"value\", \"rightElement\", \"success\", \"error\", \"full\", \"errorHelperText\", \"fixed\"]);\n\n  const _React$useState = React.useState(value),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isVal = _React$useState2[0],\n        setVal = _React$useState2[1]; //component value\n\n\n  const _React$useState3 = React.useState(isVal ? true : false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isActive = _React$useState4[0],\n        setActive = _React$useState4[1]; //component active state (focused)\n\n\n  const _React$useState5 = React.useState(isVal ? true : false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        isFilled = _React$useState6[0],\n        setFilled = _React$useState6[1]; //component filled state (unfocused and has value)\n\n\n  const successIcon = React.createElement(Icon, {\n    icon: restProps.successIcon || \"tick\",\n    iconSize: dense ? 16 : 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n  const errorIcon = React.createElement(Icon, {\n    icon: restProps.errorIcon || \"error\",\n    iconSize: dense ? 16 : 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  });\n  let resultIcon = success ? successIcon : error ? errorIcon : rightElement; // add active class and placeholder\n\n  const handleFocus = e => {\n    setActive(true);\n    setFilled(false);\n  }; // remove active class and placeholder\n\n\n  const handleBlur = e => {\n    !e.target.value && setActive(false);\n    setFilled(isActive ? true : false);\n  };\n\n  const handleClear = e => {\n    setVal(\"\");\n    setActive(false);\n  };\n\n  const handleChange = e => {\n    setVal(e.target.value);\n  };\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(InputGroup, Object.assign({}, restProps, {\n    // type={type}\n    value: isVal || \"\",\n    className: cx(fixed ? Type[\"fixed\"] : dense ? Type[\"dense\"] : Type[\"def\"], full && Type[\"full\"], dense ? View[dense] : View[\"def\"], isActive && View[\"active\"], clearButton && Type[\"clearButton\"], clearButton && View[\"clearButton\"], !success && !error && isFilled && View[\"isFilled\"],\n    /**SUCCESS STYLE*/\n    success && View[\"success\"],\n    /*ERROR STYLE */\n    Color[color], error && View[\"error-helper-text\"], resultIcon && Type[\"right-icon\"],\n    /*Dark mode*/\n    dark ? View[view + \"-dark\"] : fixed ? View[\"fixed\"] : View[view], className),\n    placeholder: placeholder,\n    leftIcon: label && React.createElement(React.Fragment, null, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, label), errorHelperText && error && React.createElement(\"div\", {\n      className: cx(Type[\"error-helper-text\"], View[\"error-helper-text\"]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, errorHelperText)),\n    onFocus: e => handleFocus(e),\n    onBlur: e => handleBlur(e),\n    onChange: e => handleChange(e),\n    rightElement: clearButton && isVal ? React.createElement(Button, {\n      icon: React.createElement(Icon, {\n        icon: clearIcon || \"cross\",\n        iconSize: \"20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }),\n      minimal: true,\n      onClick: e => handleClear(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }) : resultIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n}\nTextInput.propTypes = {\n  /**\r\n   ` The view of the component.\r\n   * Variants: `outlined`\r\n   * Default value (if undefined): `smooth` `\r\n   */\n  view: PropTypes.oneOf([\"smooth\", \"outlined\", \"raised\", \"filled\"]),\n\n  /**\r\n   * Placeholder text in the absence of any value.\r\n   */\n  placeholder: PropTypes.string,\n\n  /**\r\n   * Label text\r\n   */\n  label: PropTypes.string,\n\n  /**\r\n   * Form value of the input\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * If `true`, the component will take up the full width of its container.\r\n   */\n  fill: PropTypes.bool,\n\n  /**\r\n   * Under input helper text\r\n   */\n  helperText: PropTypes.string,\n\n  /**\r\n   * Set Clear button\r\n   */\n  clearButton: PropTypes.bool,\n\n  /**\r\n   * Set Success style for input\r\n   */\n  succes: PropTypes.bool,\n\n  /**\r\n   * Set Error style for input\r\n   */\n  error: PropTypes.bool,\n\n  /**\r\n   * Set Fixed label for input\r\n   */\n  fixed: PropTypes.bool,\n\n  /**\r\n   * Element to render on right side of input.\r\n   */\n  rightElement: PropTypes.element,\n\n  /**\r\n   * Custom right icon for Success style\r\n   */\n  successIcon: PropTypes.string,\n\n  /**\r\n   * Custom right icon for Error style\r\n   */\n  errorIcon: PropTypes.string,\n\n  /**\r\n   * Set custom icon for \"Clear button\" element\r\n   */\n  clearIcon: PropTypes.string\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Inputs/DefaultInput/DefaultInput.jsx"],"names":["React","cx","PropTypes","InputGroup","Icon","Button","Type","View","Color","ThemeContext","TextInput","props","view","color","dense","className","placeholder","label","id","clearButton","clearIcon","value","rightElement","success","error","full","errorHelperText","fixed","restProps","useState","isVal","setVal","isActive","setActive","isFilled","setFilled","successIcon","errorIcon","resultIcon","handleFocus","e","handleBlur","target","handleClear","handleChange","dark","propTypes","oneOf","string","fill","bool","helperText","succes","element"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,MAA3B,QAAyC,mBAAzC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;;;;AAIA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,sBAoBnCA,KApBmC,CAGrCC,IAHqC;AAAA,QAGrCA,IAHqC,4BAG9B,QAH8B;AAAA,uBAoBnCD,KApBmC,CAIrCE,KAJqC;AAAA,QAIrCA,KAJqC,6BAI7B,SAJ6B;AAAA,QAKrCC,KALqC,GAoBnCH,KApBmC,CAKrCG,KALqC;AAAA,QAMrCC,SANqC,GAoBnCJ,KApBmC,CAMrCI,SANqC;AAAA,QAOrCC,WAPqC,GAoBnCL,KApBmC,CAOrCK,WAPqC;AAAA,QAQrCC,KARqC,GAoBnCN,KApBmC,CAQrCM,KARqC;AAAA,QASrCC,EATqC,GAoBnCP,KApBmC,CASrCO,EATqC;AAAA,QAUrCC,WAVqC,GAoBnCR,KApBmC,CAUrCQ,WAVqC;AAAA,QAWrCC,SAXqC,GAoBnCT,KApBmC,CAWrCS,SAXqC;AAAA,QAYrCC,KAZqC,GAoBnCV,KApBmC,CAYrCU,KAZqC;AAAA,QAarCC,YAbqC,GAoBnCX,KApBmC,CAarCW,YAbqC;AAAA,QAcrCC,OAdqC,GAoBnCZ,KApBmC,CAcrCY,OAdqC;AAAA,QAerCC,KAfqC,GAoBnCb,KApBmC,CAerCa,KAfqC;AAAA,QAgBrCC,IAhBqC,GAoBnCd,KApBmC,CAgBrCc,IAhBqC;AAAA,QAiBrCC,eAjBqC,GAoBnCf,KApBmC,CAiBrCe,eAjBqC;AAAA,QAkBrCC,KAlBqC,GAoBnChB,KApBmC,CAkBrCgB,KAlBqC;AAAA,QAmBlCC,SAnBkC,4BAoBnCjB,KApBmC;;AAAA,0BAsBfX,KAAK,CAAC6B,QAAN,CAAeR,KAAf,CAtBe;AAAA;AAAA,QAsBhCS,KAtBgC;AAAA,QAsBzBC,MAtByB,wBAsBQ;;;AAtBR,2BAuBT/B,KAAK,CAAC6B,QAAN,CAAeC,KAAK,GAAG,IAAH,GAAU,KAA9B,CAvBS;AAAA;AAAA,QAuBhCE,QAvBgC;AAAA,QAuBtBC,SAvBsB,wBAuB6B;;;AAvB7B,2BAwBTjC,KAAK,CAAC6B,QAAN,CAAeC,KAAK,GAAG,IAAH,GAAU,KAA9B,CAxBS;AAAA;AAAA,QAwBhCI,QAxBgC;AAAA,QAwBtBC,SAxBsB,wBAwB6B;;;AAEpE,QAAMC,WAAW,GACf,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAER,SAAS,CAACQ,WAAV,IAAyB,MAArC;AAA6C,IAAA,QAAQ,EAAEtB,KAAK,GAAG,EAAH,GAAQ,EAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGA,QAAMuB,SAAS,GACb,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAET,SAAS,CAACS,SAAV,IAAuB,OAAnC;AAA4C,IAAA,QAAQ,EAAEvB,KAAK,GAAG,EAAH,GAAQ,EAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAIA,MAAIwB,UAAU,GAAGf,OAAO,GAAGa,WAAH,GAAiBZ,KAAK,GAAGa,SAAH,GAAef,YAA7D,CAjCuC,CAmCvC;;AACA,QAAMiB,WAAW,GAAGC,CAAC,IAAI;AACvBP,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAHD,CApCuC,CAyCvC;;;AACA,QAAMM,UAAU,GAAGD,CAAC,IAAI;AACtB,KAACA,CAAC,CAACE,MAAF,CAASrB,KAAV,IAAmBY,SAAS,CAAC,KAAD,CAA5B;AACAE,IAAAA,SAAS,CAACH,QAAQ,GAAG,IAAH,GAAU,KAAnB,CAAT;AACD,GAHD;;AAKA,QAAMW,WAAW,GAAGH,CAAC,IAAI;AACvBT,IAAAA,MAAM,CAAC,EAAD,CAAN;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAHD;;AAKA,QAAMW,YAAY,GAAGJ,CAAC,IAAI;AACxBT,IAAAA,MAAM,CAACS,CAAC,CAACE,MAAF,CAASrB,KAAV,CAAN;AACD,GAFD;;AAIA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEwB,IAAAA;AAAF,GAAD,KACC,oBAAC,UAAD,oBACMjB,SADN;AAEE;AACA,IAAA,KAAK,EAAEE,KAAK,MAHd;AAIE,IAAA,SAAS,EAAE7B,EAAE,CACX0B,KAAK,GAAGrB,IAAI,CAAC,OAAD,CAAP,GAAmBQ,KAAK,GAAGR,IAAI,CAAC,OAAD,CAAP,GAAmBA,IAAI,CAAC,KAAD,CADzC,EAEXmB,IAAI,IAAInB,IAAI,CAAC,MAAD,CAFD,EAGXQ,KAAK,GAAGP,IAAI,CAACO,KAAD,CAAP,GAAiBP,IAAI,CAAC,KAAD,CAHf,EAIXyB,QAAQ,IAAIzB,IAAI,CAAC,QAAD,CAJL,EAKXY,WAAW,IAAIb,IAAI,CAAC,aAAD,CALR,EAMXa,WAAW,IAAIZ,IAAI,CAAC,aAAD,CANR,EAOX,CAACgB,OAAD,IAAY,CAACC,KAAb,IAAsBU,QAAtB,IAAkC3B,IAAI,CAAC,UAAD,CAP3B;AAQX;AACAgB,IAAAA,OAAO,IAAIhB,IAAI,CAAC,SAAD,CATJ;AAUX;AACAC,IAAAA,KAAK,CAACK,KAAD,CAXM,EAYXW,KAAK,IAAIjB,IAAI,CAAC,mBAAD,CAZF,EAaX+B,UAAU,IAAIhC,IAAI,CAAC,YAAD,CAbP;AAcX;AACAuC,IAAAA,IAAI,GAAGtC,IAAI,CAACK,IAAI,GAAG,OAAR,CAAP,GAA0Be,KAAK,GAAGpB,IAAI,CAAC,OAAD,CAAP,GAAmBA,IAAI,CAACK,IAAD,CAf/C,EAgBXG,SAhBW,CAJf;AAsBE,IAAA,WAAW,EAAEC,WAtBf;AAuBE,IAAA,QAAQ,EACNC,KAAK,IACH,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQA,KAAR,CADF,EAEGS,eAAe,IAAIF,KAAnB,IACC;AACE,MAAA,SAAS,EAAEvB,EAAE,CACXK,IAAI,CAAC,mBAAD,CADO,EAEXC,IAAI,CAAC,mBAAD,CAFO,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGmB,eANH,CAHJ,CAzBN;AAwCE,IAAA,OAAO,EAAEc,CAAC,IAAID,WAAW,CAACC,CAAD,CAxC3B;AAyCE,IAAA,MAAM,EAAEA,CAAC,IAAIC,UAAU,CAACD,CAAD,CAzCzB;AA0CE,IAAA,QAAQ,EAAEA,CAAC,IAAII,YAAY,CAACJ,CAAD,CA1C7B;AA2CE,IAAA,YAAY,EACVrB,WAAW,IAAIW,KAAf,GACE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEV,SAAS,IAAI,OAAzB;AAAkC,QAAA,QAAQ,EAAC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADR;AAEE,MAAA,OAAO,EAAE,IAFX;AAGE,MAAA,OAAO,EAAEoB,CAAC,IAAIG,WAAW,CAACH,CAAD,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAOEF,UAnDN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADF;AA6DD;AAED5B,SAAS,CAACoC,SAAV,GAAsB;AACpB;;;;;AAKAlC,EAAAA,IAAI,EAAEV,SAAS,CAAC6C,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,EAAuB,QAAvB,EAAiC,QAAjC,CAAhB,CANc;;AAOpB;;;AAGA/B,EAAAA,WAAW,EAAEd,SAAS,CAAC8C,MAVH;;AAWpB;;;AAGA/B,EAAAA,KAAK,EAAEf,SAAS,CAAC8C,MAdG;;AAepB;;;AAGA3B,EAAAA,KAAK,EAAEnB,SAAS,CAAC8C,MAlBG;;AAmBpB;;;AAGAC,EAAAA,IAAI,EAAE/C,SAAS,CAACgD,IAtBI;;AAuBpB;;;AAGAC,EAAAA,UAAU,EAAEjD,SAAS,CAAC8C,MA1BF;;AA2BpB;;;AAGA7B,EAAAA,WAAW,EAAEjB,SAAS,CAACgD,IA9BH;;AA+BpB;;;AAGAE,EAAAA,MAAM,EAAElD,SAAS,CAACgD,IAlCE;;AAmCpB;;;AAGA1B,EAAAA,KAAK,EAAEtB,SAAS,CAACgD,IAtCG;;AAuCpB;;;AAGAvB,EAAAA,KAAK,EAAEzB,SAAS,CAACgD,IA1CG;;AA2CpB;;;AAGA5B,EAAAA,YAAY,EAAEpB,SAAS,CAACmD,OA9CJ;;AA+CpB;;;AAGAjB,EAAAA,WAAW,EAAElC,SAAS,CAAC8C,MAlDH;;AAmDpB;;;AAGAX,EAAAA,SAAS,EAAEnC,SAAS,CAAC8C,MAtDD;;AAuDpB;;;AAGA5B,EAAAA,SAAS,EAAElB,SAAS,CAAC8C;AA1DD,CAAtB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { InputGroup, Icon, Button } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../../ThemeContext\";\r\n\r\n/** \r\n  __Component 'Default Input'__\r\n**/\r\n\r\nexport default function TextInput(props) {\r\n  const {\r\n    //type = \"text\",\r\n    view = \"smooth\",\r\n    color = \"primary\",\r\n    dense,\r\n    className,\r\n    placeholder,\r\n    label,\r\n    id,\r\n    clearButton,\r\n    clearIcon,\r\n    value,\r\n    rightElement,\r\n    success,\r\n    error,\r\n    full,\r\n    errorHelperText,\r\n    fixed,\r\n    ...restProps\r\n  } = props;\r\n\r\n  const [isVal, setVal] = React.useState(value); //component value\r\n  const [isActive, setActive] = React.useState(isVal ? true : false); //component active state (focused)\r\n  const [isFilled, setFilled] = React.useState(isVal ? true : false); //component filled state (unfocused and has value)\r\n\r\n  const successIcon = (\r\n    <Icon icon={restProps.successIcon || \"tick\"} iconSize={dense ? 16 : 20} />\r\n  );\r\n  const errorIcon = (\r\n    <Icon icon={restProps.errorIcon || \"error\"} iconSize={dense ? 16 : 20} />\r\n  );\r\n\r\n  let resultIcon = success ? successIcon : error ? errorIcon : rightElement;\r\n\r\n  // add active class and placeholder\r\n  const handleFocus = e => {\r\n    setActive(true);\r\n    setFilled(false);\r\n  };\r\n\r\n  // remove active class and placeholder\r\n  const handleBlur = e => {\r\n    !e.target.value && setActive(false);\r\n    setFilled(isActive ? true : false);\r\n  };\r\n\r\n  const handleClear = e => {\r\n    setVal(\"\");\r\n    setActive(false);\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setVal(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <InputGroup\r\n          {...restProps}\r\n          // type={type}\r\n          value={isVal || ``}\r\n          className={cx(\r\n            fixed ? Type[\"fixed\"] : dense ? Type[\"dense\"] : Type[\"def\"],\r\n            full && Type[\"full\"],\r\n            dense ? View[dense] : View[\"def\"],\r\n            isActive && View[\"active\"],\r\n            clearButton && Type[\"clearButton\"],\r\n            clearButton && View[\"clearButton\"],\r\n            !success && !error && isFilled && View[\"isFilled\"],\r\n            /**SUCCESS STYLE*/\r\n            success && View[\"success\"],\r\n            /*ERROR STYLE */\r\n            Color[color],\r\n            error && View[\"error-helper-text\"],\r\n            resultIcon && Type[\"right-icon\"],\r\n            /*Dark mode*/\r\n            dark ? View[view + \"-dark\"] : fixed ? View[\"fixed\"] : View[view],\r\n            className\r\n          )}\r\n          placeholder={placeholder}\r\n          leftIcon={\r\n            label && (\r\n              <>\r\n                <label>{label}</label>\r\n                {errorHelperText && error && (\r\n                  <div\r\n                    className={cx(\r\n                      Type[\"error-helper-text\"],\r\n                      View[\"error-helper-text\"]\r\n                    )}\r\n                  >\r\n                    {errorHelperText}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )\r\n          }\r\n          onFocus={e => handleFocus(e)}\r\n          onBlur={e => handleBlur(e)}\r\n          onChange={e => handleChange(e)}\r\n          rightElement={\r\n            clearButton && isVal ? (\r\n              <Button\r\n                icon={<Icon icon={clearIcon || \"cross\"} iconSize=\"20\" />}\r\n                minimal={true}\r\n                onClick={e => handleClear(e)}\r\n              />\r\n            ) : (\r\n              resultIcon\r\n            )\r\n          }\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `outlined`\r\n   * Default value (if undefined): `smooth` `\r\n   */\r\n  view: PropTypes.oneOf([\"smooth\", \"outlined\", \"raised\", \"filled\"]),\r\n  /**\r\n   * Placeholder text in the absence of any value.\r\n   */\r\n  placeholder: PropTypes.string,\r\n  /**\r\n   * Label text\r\n   */\r\n  label: PropTypes.string,\r\n  /**\r\n   * Form value of the input\r\n   */\r\n  value: PropTypes.string,\r\n  /**\r\n   * If `true`, the component will take up the full width of its container.\r\n   */\r\n  fill: PropTypes.bool,\r\n  /**\r\n   * Under input helper text\r\n   */\r\n  helperText: PropTypes.string,\r\n  /**\r\n   * Set Clear button\r\n   */\r\n  clearButton: PropTypes.bool,\r\n  /**\r\n   * Set Success style for input\r\n   */\r\n  succes: PropTypes.bool,\r\n  /**\r\n   * Set Error style for input\r\n   */\r\n  error: PropTypes.bool,\r\n  /**\r\n   * Set Fixed label for input\r\n   */\r\n  fixed: PropTypes.bool,\r\n  /**\r\n   * Element to render on right side of input.\r\n   */\r\n  rightElement: PropTypes.element,\r\n  /**\r\n   * Custom right icon for Success style\r\n   */\r\n  successIcon: PropTypes.string,\r\n  /**\r\n   * Custom right icon for Error style\r\n   */\r\n  errorIcon: PropTypes.string,\r\n  /**\r\n   * Set custom icon for \"Clear button\" element\r\n   */\r\n  clearIcon: PropTypes.string\r\n};\r\n"]},"metadata":{},"sourceType":"module"}