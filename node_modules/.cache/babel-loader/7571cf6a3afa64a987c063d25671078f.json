{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Icon } from \"../icon/icon\";\nimport { normalizeKeyCombo } from \"./hotkeyParser\";\nvar KeyIcons = {\n  alt: {\n    icon: \"key-option\",\n    iconTitle: \"Alt/Option key\"\n  },\n  cmd: {\n    icon: \"key-command\",\n    iconTitle: \"Command key\"\n  },\n  ctrl: {\n    icon: \"key-control\",\n    iconTitle: \"Control key\"\n  },\n  delete: {\n    icon: \"key-delete\",\n    iconTitle: \"Delete key\"\n  },\n  down: {\n    icon: \"arrow-down\",\n    iconTitle: \"Down key\"\n  },\n  enter: {\n    icon: \"key-enter\",\n    iconTitle: \"Enter key\"\n  },\n  left: {\n    icon: \"arrow-left\",\n    iconTitle: \"Left key\"\n  },\n  meta: {\n    icon: \"key-command\",\n    iconTitle: \"Command key\"\n  },\n  right: {\n    icon: \"arrow-right\",\n    iconTitle: \"Right key\"\n  },\n  shift: {\n    icon: \"key-shift\",\n    iconTitle: \"Shift key\"\n  },\n  up: {\n    icon: \"arrow-up\",\n    iconTitle: \"Up key\"\n  }\n};\n\nvar KeyCombo =\n/** @class */\nfunction (_super) {\n  __extends(KeyCombo, _super);\n\n  function KeyCombo() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderKey = function (key, index) {\n      var _a;\n\n      var icon = KeyIcons[key];\n      var reactKey = \"key-\" + index;\n      return React.createElement(\"kbd\", {\n        className: classNames(Classes.KEY, (_a = {}, _a[Classes.MODIFIER_KEY] = icon != null, _a)),\n        key: reactKey\n      }, icon != null && React.createElement(Icon, {\n        icon: icon.icon,\n        title: icon.iconTitle\n      }), key);\n    };\n\n    _this.renderMinimalKey = function (key, index) {\n      var icon = KeyIcons[key];\n      return icon == null ? key : React.createElement(Icon, {\n        icon: icon.icon,\n        title: icon.iconTitle,\n        key: \"key-\" + index\n      });\n    };\n\n    return _this;\n  }\n\n  KeyCombo.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        combo = _a.combo,\n        minimal = _a.minimal;\n    var keys = normalizeKeyCombo(combo).map(function (key) {\n      return key.length === 1 ? key.toUpperCase() : key;\n    }).map(minimal ? this.renderMinimalKey : this.renderKey);\n    return React.createElement(\"span\", {\n      className: classNames(Classes.KEY_COMBO, className)\n    }, keys);\n  };\n\n  KeyCombo.displayName = DISPLAYNAME_PREFIX + \".KeyCombo\";\n  KeyCombo = __decorate([polyfill], KeyCombo);\n  return KeyCombo;\n}(AbstractPureComponent2);\n\nexport { KeyCombo };","map":null,"metadata":{},"sourceType":"module"}