{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Spinner/Spinner.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Spinner as SpinnerSource } from \"@blueprintjs/core\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\n/** \r\n  __Component 'Spinner'__\r\n**/\n\nconst Spinner = React.forwardRef(function Button(props, ref) {\n  const _props$view = props.view,\n        view = _props$view === void 0 ? \"smooth\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"view\", \"color\", \"className\"]); //size, tagName, value\n\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, ({\n    isDark\n  }) => React.createElement(SpinnerSource, Object.assign({}, restProps, {\n    ref: ref,\n    className: cx(View[view], Color[color], className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })));\n});\nSpinner.propTypes = {\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\n  disabled: PropTypes.bool\n};\nexport default Spinner;","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Spinner/Spinner.jsx"],"names":["React","cx","PropTypes","Spinner","SpinnerSource","View","Color","ThemeContext","forwardRef","Button","props","ref","view","color","className","restProps","isDark","propTypes","oneOf","loading","bool","disabled"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAO,IAAIC,aAApB,QAAyC,mBAAzC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;;;;AAIA,MAAMJ,OAAO,GAAGH,KAAK,CAACQ,UAAN,CAAiB,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4B;AAAA,sBACaD,KADb,CACnDE,IADmD;AAAA,QACnDA,IADmD,4BAC5C,QAD4C;AAAA,uBACaF,KADb,CAClCG,KADkC;AAAA,QAClCA,KADkC,6BAC1B,SAD0B;AAAA,QACfC,SADe,GACaJ,KADb,CACfI,SADe;AAAA,QACDC,SADC,4BACaL,KADb,mCAE3D;;;AAEA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEM,IAAAA;AAAF,GAAD,KACC,oBAAC,aAAD,oBACMD,SADN;AAEE,IAAA,GAAG,EAAEJ,GAFP;AAGE,IAAA,SAAS,EAAEV,EAAE,CAACI,IAAI,CAACO,IAAD,CAAL,EAAaN,KAAK,CAACO,KAAD,CAAlB,EAA2BC,SAA3B,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADF;AAWD,CAfe,CAAhB;AAiBAX,OAAO,CAACc,SAAR,GAAoB;AAClB;;;;;AAKAJ,EAAAA,KAAK,EAAEX,SAAS,CAACgB,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CANW;;AAkBlB;;;;AAIAC,EAAAA,OAAO,EAAEjB,SAAS,CAACkB,IAtBD;;AAuBlB;;;AAGAC,EAAAA,QAAQ,EAAEnB,SAAS,CAACkB;AA1BF,CAApB;AA6BA,eAAejB,OAAf","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Spinner as SpinnerSource } from \"@blueprintjs/core\";\r\n\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\n/** \r\n  __Component 'Spinner'__\r\n**/\r\n\r\nconst Spinner = React.forwardRef(function Button(props, ref) {\r\n  const { view = \"smooth\", color = \"default\", className, ...restProps } = props;\r\n  //size, tagName, value\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ isDark }) => (\r\n        <SpinnerSource\r\n          {...restProps}\r\n          ref={ref}\r\n          className={cx(View[view], Color[color], className)}\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n});\r\n\r\nSpinner.propTypes = {\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n\r\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nexport default Spinner;\r\n"]},"metadata":{},"sourceType":"module"}