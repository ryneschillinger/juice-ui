{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/SearchInput/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const type = props.type,\n        view = props.view,\n        isFill = props.isFill,\n        color = props.color;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: \"SearchInput\",\n    folder: \"Inputs/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \" def | dense \"), \". the default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"smooth\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \" smooth | outlined | raised | filled \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"smooth\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"primary\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \" primary \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"primary\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"value\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Form value of the input, for controlled usage.\")\n  }, {\n    prop: \"placeholder\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Placeholder text in the absence of any value.\")\n  }, {\n    prop: \"onSearch\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Search function\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should expand to fill its container. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">SearchInput</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"\").concat(color, \"\\\"\\n  <span class=\\\"attr\\\">value</span>=\\\"Value\\\"\\n  <span class=\\\"attr\\\">placeholder</span>=\\\"Placeholder\\\"\\n  <span class=\\\"attr\\\">fill</span>={\").concat(isFill ? \"true\" : \"false\", \"}\\n  <span class=\\\"attr\\\">onSearch</span>={ search func }\\n/&gt;\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/SearchInput/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","type","view","isFill","color","OverviewText","APIData","prop","desc","Code"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GACYD,KADZ,CAClBC,IADkB;AAAA,QACZC,IADY,GACYF,KADZ,CACZE,IADY;AAAA,QACNC,MADM,GACYH,KADZ,CACNG,MADM;AAAA,QACEC,KADF,GACYJ,KADZ,CACEI,KADF;AAG1B;;AACA,QAAMC,YAAY,GAChB,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAE,aAAxB;AAAuC,IAAA,MAAM,EAAC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAIA;;AACA,QAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEN,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADX,CAHJ;AAOEO,IAAAA,IAAI,EACF,wGAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,6BAE6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAF7C;AARJ,GADc,EAed;AACED,IAAAA,IAAI,EAAE,MADR;AAEEN,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,CAHJ;AAOEO,IAAAA,IAAI,EACF,uGAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAFF,4BAEqE,GAFrE,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AARJ,GAfc,EA8Bd;AACED,IAAAA,IAAI,EAAE,OADR;AAEEN,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEO,IAAAA,IAAI,EACF,wGAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,6BAEyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFzC;AARJ,GA9Bc,EA4Cd;AACED,IAAAA,IAAI,EAAE,WADR;AAEEN,IAAAA,IAAI,EAAE,mDAFR;AAGEO,IAAAA,IAAI,EACF;AAJJ,GA5Cc,EAkDd;AACED,IAAAA,IAAI,EAAE,OADR;AAEEN,IAAAA,IAAI,EAAE,mDAFR;AAGEO,IAAAA,IAAI,EAAE;AAHR,GAlDc,EAuDd;AACED,IAAAA,IAAI,EAAE,aADR;AAEEN,IAAAA,IAAI,EAAE,mDAFR;AAGEO,IAAAA,IAAI,EAAE;AAHR,GAvDc,EA4Dd;AACED,IAAAA,IAAI,EAAE,UADR;AAEEN,IAAAA,IAAI,EAAE,iDAFR;AAGEO,IAAAA,IAAI,EAAE;AAHR,GA5Dc,EAiEd;AACED,IAAAA,IAAI,EAAE,MADR;AAEEN,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEO,IAAAA,IAAI,EACF,4HAEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFX;AARJ,GAjEc,CAAhB;AAiFA;;AACA,QAAMC,IAAI,kHAC0CR,IAD1C,iFAE0CC,IAF1C,8DAGyBE,KAHzB,+JAMwBD,MAAM,GAAG,MAAH,GAAY,OAN1C,qEAAV;AAUA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEE,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEG,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAtGM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { type, view, isFill, color } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = (\r\n    <OverviewTemplate name={\"SearchInput\"} folder=\"Inputs/\" />\r\n  );\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:\r\n          <b> def | dense </b>. the default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>smooth</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:\r\n          <b> smooth | outlined | raised | filled </b>. The default state is{\" \"}\r\n          <b>smooth</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>primary</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b> primary </b>. The default state is <b>primary</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: <>string</>,\r\n      desc: <>Form value of the input, for controlled usage.</>\r\n    },\r\n    {\r\n      prop: \"placeholder\",\r\n      type: <>string</>,\r\n      desc: <>Placeholder text in the absence of any value.</>\r\n    },\r\n    {\r\n      prop: \"onSearch\",\r\n      type: <>func</>,\r\n      desc: <>Search function</>\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should expand to fill its container. The default\r\n          state is <b>false</b>.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">SearchInput</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"${color}\"\r\n  <span class=\"attr\">value</span>=\"Value\"\r\n  <span class=\"attr\">placeholder</span>=\"Placeholder\"\r\n  <span class=\"attr\">fill</span>={${isFill ? \"true\" : \"false\"}}\r\n  <span class=\"attr\">onSearch</span>={ search func }\r\n/&gt;`;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}