{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/ButtonGroup/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color,\n        fill = props.fill,\n        right = props.right,\n        isVertical = props.isVertical,\n        alignText = props.alignText;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" default | dense \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"flat\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"alignText\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"center\")),\n    desc: React.createElement(React.Fragment, null, \"Text alignment within button. By default, icons and text will be centered within the button. Passing \\\"\", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"left\"), \"\\\" or \\\"\", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"right\"), \"\\\" will align the button text to that side and push icon and rightIcon to either edge. Passing \\\"\", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"center\"), \"\\\" will center the text and icons together.\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"data\",\n    type: \"object\",\n    desc: React.createElement(React.Fragment, null, \" \", \"Data object can have next keys:\", \"{ \\n        id:  number,  \\n        text: string,\\n        icon: string | element,\\n        rightIcon: string | element,\\n        isActive: boolean,\\n        onClick: function\\n        }\", \".\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this ButtonGroup should expand to fill its container. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"vertical\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the button group should appear with vertical styling.\")\n  }];\n  /** Code source */\n\n  const Code = \"<span class=\\\"cmnt\\\">/*** COMPONENT EXAMPLE ***/</span><br />\\n&lt;<span class=\\\"el\\\">ButtonGroup</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">items</span>={<span class=\\\"js\\\">ButtonItems</span>}\\n  \").concat(fill ? \"<span class=\\\"attr\\\">fill</span>\" : '', \"\\n  \").concat(isVertical ? \"<span class=\\\"attr\\\">vertical</span>\" : '', \"\\n  \").concat(alignText !== \"center\" ? \"<span class=\\\"attr\\\">alignText</span>=\\\"<span class=\\\"val\\\">\".concat(alignText, \"</span>\\\"\") : '', \"\\n/&gt;\\n<br />\\n<span class=\\\"cmnt\\\">/*** JS DATA ***/</span><br />\\n<span class=\\\"js\\\">const</span> <span class=\\\"el\\\">ButtonItems</span> = [\\n  {\\n    <span class=\\\"attr\\\">id</span>: <span class=\\\"num\\\">0</span>,\\n    <span class=\\\"attr\\\">icon</span>: <span class=\\\"val\\\">\\\"sort-alphabetical\\\"</span>,\\n    <span class=\\\"attr\\\">isActive</span>: <span class=\\\"bool\\\">true</span>,\\n    <span class=\\\"act\\\">onClick</span>: () <span class=\\\"js\\\">=></span> <span class=\\\"act\\\">handleClick(</span><span class=\\\"num\\\">0</span><span class=\\\"act\\\">)</span>\\n  },\\n  {\\n    <span class=\\\"attr\\\">id</span>: <span class=\\\"num\\\">1</span>,\\n    <span class=\\\"attr\\\">icon</span>: <span class=\\\"val\\\">\\\"sort-alphabetical-desc\\\"</span>,\\n    <span class=\\\"act\\\">onClick</span>: () <span class=\\\"js\\\">=></span> <span class=\\\"act\\\">handleClick(</span><span class=\\\"num\\\">1</span><span class=\\\"act\\\">)</span>\\n  },\\n  {\\n    <span class=\\\"attr\\\">id</span>: <span class=\\\"num\\\">2</span>,\\n    <span class=\\\"attr\\\">text</span>: <span class=\\\"val\\\">\\\"Third\\\"</span>,\\n    <span class=\\\"attr\\\">icon</span>: <span class=\\\"val\\\">\\\"sort-asc\\\"</span>,\\n    <span class=\\\"act\\\">onClick</span>: () <span class=\\\"js\\\">=></span> <span class=\\\"act\\\">handleClick(</span><span class=\\\"num\\\">2</span><span class=\\\"act\\\">)</span>\\n  },\\n  {\\n    <span class=\\\"attr\\\">id</span>: <span class=\\\"num\\\">3</span>,\\n    <span class=\\\"attr\\\">text</span>: <span class=\\\"val\\\">\\\"Fourth\\\"</span>,\\n    <span class=\\\"attr\\\">rightIcon</span>: <span class=\\\"val\\\">\\\"sort-desc\\\"</span>,\\n    <span class=\\\"act\\\">onClick</span>: () <span class=\\\"js\\\">=></span> <span class=\\\"act\\\">handleClick(</span><span class=\\\"num\\\">3</span><span class=\\\"act\\\">)</span>\\n  }\\n];<br />\\n\\n<span class=\\\"js\\\">const</span> [<span class=\\\"el\\\">currentData</span>, <span class=\\\"act\\\">setNewData</span>] = <span class=\\\"el\\\">React</span><span class=\\\"act\\\">.useState(</span><span class=\\\"js\\\">ButtonItems</span><span class=\\\"act\\\">)</span>;<br />\\n\\n<span class=\\\"js\\\">const</span> <span class=\\\"act\\\">handleClick</span> = (<span class=\\\"js\\\">id</span>) <span class=\\\"js\\\">=></span> {\\n  <span class=\\\"act\\\">setNewData</span>(\\n    <span class=\\\"el\\\">currentData</span><span class=\\\"act\\\">.map</span>(<span class=\\\"js\\\">item =>\\n      item.id</span> === <span class=\\\"js\\\">id</span>\\n        ? { <span class=\\\"js\\\">...item</span>, <span class=\\\"attr\\\">isActive</span>: <span class=\\\"bool\\\">true</span> }\\n        : { <span class=\\\"js\\\">...item</span>, <span class=\\\"attr\\\">isActive</span>: <span class=\\\"bool\\\">false</span> }\\n    )\\n  );\\n}\\n\");\n\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\n\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: trimCode(Code),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/ButtonGroup/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","view","color","fill","right","isVertical","alignText","OverviewText","APIData","prop","desc","Code","trimCode","code","replace"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const {\r\n    name,\r\n    type,\r\n    view,\r\n    color,\r\n    fill,\r\n    right,\r\n    isVertical,\r\n    alignText\r\n  } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> default | dense </b>. The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | flat | smooth | outlined | raised </b>. The default state\r\n          is <b>flat</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"alignText\",\r\n      type: (\r\n        <>\r\n          string = <i>center</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Text alignment within button. By default, icons and text will be centered within the button. Passing \"<strong>left</strong>\" or \"<strong>right</strong>\" will align the button text to that side and push icon and rightIcon to either edge. Passing \"<strong>center</strong>\" will center the text and icons together.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"data\",\r\n      type: \"object\",\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          Data object can have next keys:\r\n          {`{ \r\n        id:  number,  \r\n        text: string,\r\n        icon: string | element,\r\n        rightIcon: string | element,\r\n        isActive: boolean,\r\n        onClick: function\r\n        }`}\r\n          .\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this ButtonGroup should expand to fill its container. The\r\n          default state is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"vertical\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether the button group should appear with vertical styling.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `<span class=\"cmnt\">/*** COMPONENT EXAMPLE ***/</span><br />\r\n&lt;<span class=\"el\">ButtonGroup</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">items</span>={<span class=\"js\">ButtonItems</span>}\r\n  ${fill ? `<span class=\"attr\">fill</span>` : ''}\r\n  ${isVertical ? `<span class=\"attr\">vertical</span>` : ''}\r\n  ${alignText !== \"center\" ? `<span class=\"attr\">alignText</span>=\"<span class=\"val\">${alignText}</span>\"` : ''}\r\n/&gt;\r\n<br />\r\n<span class=\"cmnt\">/*** JS DATA ***/</span><br />\r\n<span class=\"js\">const</span> <span class=\"el\">ButtonItems</span> = [\r\n  {\r\n    <span class=\"attr\">id</span>: <span class=\"num\">0</span>,\r\n    <span class=\"attr\">icon</span>: <span class=\"val\">\"sort-alphabetical\"</span>,\r\n    <span class=\"attr\">isActive</span>: <span class=\"bool\">true</span>,\r\n    <span class=\"act\">onClick</span>: () <span class=\"js\">=></span> <span class=\"act\">handleClick(</span><span class=\"num\">0</span><span class=\"act\">)</span>\r\n  },\r\n  {\r\n    <span class=\"attr\">id</span>: <span class=\"num\">1</span>,\r\n    <span class=\"attr\">icon</span>: <span class=\"val\">\"sort-alphabetical-desc\"</span>,\r\n    <span class=\"act\">onClick</span>: () <span class=\"js\">=></span> <span class=\"act\">handleClick(</span><span class=\"num\">1</span><span class=\"act\">)</span>\r\n  },\r\n  {\r\n    <span class=\"attr\">id</span>: <span class=\"num\">2</span>,\r\n    <span class=\"attr\">text</span>: <span class=\"val\">\"Third\"</span>,\r\n    <span class=\"attr\">icon</span>: <span class=\"val\">\"sort-asc\"</span>,\r\n    <span class=\"act\">onClick</span>: () <span class=\"js\">=></span> <span class=\"act\">handleClick(</span><span class=\"num\">2</span><span class=\"act\">)</span>\r\n  },\r\n  {\r\n    <span class=\"attr\">id</span>: <span class=\"num\">3</span>,\r\n    <span class=\"attr\">text</span>: <span class=\"val\">\"Fourth\"</span>,\r\n    <span class=\"attr\">rightIcon</span>: <span class=\"val\">\"sort-desc\"</span>,\r\n    <span class=\"act\">onClick</span>: () <span class=\"js\">=></span> <span class=\"act\">handleClick(</span><span class=\"num\">3</span><span class=\"act\">)</span>\r\n  }\r\n];<br />\r\n\r\n<span class=\"js\">const</span> [<span class=\"el\">currentData</span>, <span class=\"act\">setNewData</span>] = <span class=\"el\">React</span><span class=\"act\">.useState(</span><span class=\"js\">ButtonItems</span><span class=\"act\">)</span>;<br />\r\n\r\n<span class=\"js\">const</span> <span class=\"act\">handleClick</span> = (<span class=\"js\">id</span>) <span class=\"js\">=></span> {\r\n  <span class=\"act\">setNewData</span>(\r\n    <span class=\"el\">currentData</span><span class=\"act\">.map</span>(<span class=\"js\">item =>\r\n      item.id</span> === <span class=\"js\">id</span>\r\n        ? { <span class=\"js\">...item</span>, <span class=\"attr\">isActive</span>: <span class=\"bool\">true</span> }\r\n        : { <span class=\"js\">...item</span>, <span class=\"attr\">isActive</span>: <span class=\"bool\">false</span> }\r\n    )\r\n  );\r\n}\r\n`;\r\n\r\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={trimCode(Code)} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}