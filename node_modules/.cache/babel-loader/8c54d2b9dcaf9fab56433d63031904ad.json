{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Card/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        view = props.view,\n        color = props.color,\n        isInter = props.isInter,\n        isCustomWidth = props.isCustomWidth;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" def \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"smooth\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" filled | smooth | outlined| raised \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"smooth\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"interactive\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the card should respond to user interactions. If set to true, hovering over the card will increase the card's elevation and change the mouse cursor to a pointer.\")\n  }, {\n    prop: \"onClick\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Callback invoked when the card is clicked. Recommended when interactive is true.\")\n  }, {\n    prop: \"children\",\n    type: React.createElement(React.Fragment, null, \"any\"),\n    desc: React.createElement(React.Fragment, null, \"Card content.\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"el\\\">Card</span>\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\".concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  \").concat(isCustomWidth ? \"<span class=\\\"attr\\\">style</span>={{ <span class=\\\"attr\\\">maxWidth</span>: <span class=\\\"val\\\">\\\"450px\\\"</span> }}\" : '', \"\\n  \").concat(isInter ? \"<span class=\\\"attr\\\">interactive</span>\" : '', \"\\n  \").concat(isInter ? \"<span class=\\\"attr\\\">onClick</span>={() <span class=\\\"js\\\">=> doSomething()</span>)</span>}\" : '', \"\\n&gt;\\n  <span class=\\\"cmnt\\\">{/* Card content goes here */}</span>\\n  &lt;<span class=\\\"el\\\">Typography</span> <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">h6</span>\\\" <span class=\\\"attr\\\">large</span> <span class=\\\"attr\\\">type</span>style</span>={{ paddingBottom: \\\"1rem\\\" }} colorStep={\").concat(view === 'filled' ? 0 : 100, \"}>\\n    Card component example\\n  &lt;/<span class=\\\"el\\\">Typography</span>&gt;\\n  &lt;<span class=\\\"el\\\">Typography</span> colorStep={\").concat(view === 'filled' ? 0 : 100, \"}>\\n    You can put any content in this area here, including customized components and HTML elements.\\n  &lt;/<span class=\\\"el\\\">Typography</span>&gt;\\n&lt;/<span class=\\\"el\\\">Card</span>&gt;\");\n\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\n\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: trimCode(Code),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Card/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","view","color","isInter","isCustomWidth","OverviewText","APIData","prop","type","desc","Code","trimCode","code","replace"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, view, color, isInter, isCustomWidth } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> def </b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>smooth</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | smooth | outlined| raised </b>. The default state is{\" \"}\r\n          <b>smooth</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"interactive\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether the card should respond to user interactions. If set to true,\r\n          hovering over the card will increase the card's elevation and change\r\n          the mouse cursor to a pointer.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onClick\",\r\n      type: <>func</>,\r\n      desc: (\r\n        <>\r\n          Callback invoked when the card is clicked. Recommended when\r\n          interactive is true.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"children\",\r\n      type: <>any</>,\r\n      desc: <>Card content.</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"el\">Card</span>\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  ${isCustomWidth ? `<span class=\"attr\">style</span>={{ <span class=\"attr\">maxWidth</span>: <span class=\"val\">\"450px\"</span> }}` : ''}\r\n  ${isInter ? `<span class=\"attr\">interactive</span>` : ''}\r\n  ${isInter ? `<span class=\"attr\">onClick</span>={() <span class=\"js\">=> doSomething()</span>)</span>}` : ''}\r\n&gt;\r\n  <span class=\"cmnt\">{/* Card content goes here */}</span>\r\n  &lt;<span class=\"el\">Typography</span> <span class=\"attr\">type</span>=\"<span class=\"val\">h6</span>\" <span class=\"attr\">large</span> <span class=\"attr\">type</span>style</span>={{ paddingBottom: \"1rem\" }} colorStep={${view === 'filled' ? 0 : 100}}>\r\n    Card component example\r\n  &lt;/<span class=\"el\">Typography</span>&gt;\r\n  &lt;<span class=\"el\">Typography</span> colorStep={${view === 'filled' ? 0 : 100}}>\r\n    You can put any content in this area here, including customized components and HTML elements.\r\n  &lt;/<span class=\"el\">Typography</span>&gt;\r\n&lt;/<span class=\"el\">Card</span>&gt;`\r\n;\r\n\r\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={trimCode(Code)} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}