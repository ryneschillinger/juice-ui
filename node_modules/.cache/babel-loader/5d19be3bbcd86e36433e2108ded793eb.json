{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Breadcrumbs/Breadcrumbs.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Breadcrumbs as BreadcrumbsSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\n/** \r\n  __Component 'Breadcrumbs'__\r\n**/\n\nexport default function Breadcrumbs(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"default\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"smooth\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        dense = props.dense,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"dense\", \"className\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, ({\n    isDark\n  }) => React.createElement(React.Fragment, null, React.createElement(BreadcrumbsSource, Object.assign({}, restProps, {\n    className: cx(Type[type], dense && Type[\"dense\"], isDark ? View[view + \"-dark\"] : View[view], View[color], Color[color], className),\n    popoverProps: {\n      popoverClassName: cx(View[\"popover\"], Color[color])\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }))));\n}\nBreadcrumbs.propTypes = {\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * All breadcrumbs to display. Breadcrumbs that do not fit in the container will be rendered in an overflow menu instead.\r\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\r\n   * Which direction the breadcrumbs should collapse from: start or end.\r\n   */\n  collapseFrom: PropTypes.string\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Breadcrumbs/Breadcrumbs.jsx"],"names":["React","cx","PropTypes","Breadcrumbs","BreadcrumbsSource","Type","View","Color","ThemeContext","props","type","view","color","dense","className","restProps","isDark","popoverClassName","propTypes","oneOf","items","array","isRequired","collapseFrom","string"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,WAAW,IAAIC,iBAAxB,QAAiD,mBAAjD;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;;;;AAIA,eAAe,SAASL,WAAT,CAAqBM,KAArB,EAA4B;AAAA,sBAQrCA,KARqC,CAEvCC,IAFuC;AAAA,QAEvCA,IAFuC,4BAEhC,SAFgC;AAAA,sBAQrCD,KARqC,CAGvCE,IAHuC;AAAA,QAGvCA,IAHuC,4BAGhC,QAHgC;AAAA,uBAQrCF,KARqC,CAIvCG,KAJuC;AAAA,QAIvCA,KAJuC,6BAI/B,SAJ+B;AAAA,QAKvCC,KALuC,GAQrCJ,KARqC,CAKvCI,KALuC;AAAA,QAMvCC,SANuC,GAQrCL,KARqC,CAMvCK,SANuC;AAAA,QAOpCC,SAPoC,4BAQrCN,KARqC;;AAUzC,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEO,IAAAA;AAAF,GAAD,KACC,0CACE,oBAAC,iBAAD,oBACMD,SADN;AAEE,IAAA,SAAS,EAAEd,EAAE,CACXI,IAAI,CAACK,IAAD,CADO,EAEXG,KAAK,IAAIR,IAAI,CAAC,OAAD,CAFF,EAGXW,MAAM,GAAGV,IAAI,CAACK,IAAI,GAAG,OAAR,CAAP,GAA0BL,IAAI,CAACK,IAAD,CAHzB,EAIXL,IAAI,CAACM,KAAD,CAJO,EAKXL,KAAK,CAACK,KAAD,CALM,EAMXE,SANW,CAFf;AAUE,IAAA,YAAY,EAAE;AACZG,MAAAA,gBAAgB,EAAEhB,EAAE,CAACK,IAAI,CAAC,SAAD,CAAL,EAAkBC,KAAK,CAACK,KAAD,CAAvB;AADR,KAVhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFJ,CADF;AAsBD;AAEDT,WAAW,CAACe,SAAZ,GAAwB;AACtB;;;;;AAKAN,EAAAA,KAAK,EAAEV,SAAS,CAACiB,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CANe;;AAiBtB;;;AAGAC,EAAAA,KAAK,EAAElB,SAAS,CAACmB,KAAV,CAAgBC,UApBD;;AAqBtB;;;AAGAC,EAAAA,YAAY,EAAErB,SAAS,CAACsB;AAxBF,CAAxB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Breadcrumbs as BreadcrumbsSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\n/** \r\n  __Component 'Breadcrumbs'__\r\n**/\r\n\r\nexport default function Breadcrumbs(props) {\r\n  const {\r\n    type = \"default\",\r\n    view = \"smooth\",\r\n    color = \"default\",\r\n    dense,\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ isDark }) => (\r\n        <>\r\n          <BreadcrumbsSource\r\n            {...restProps}\r\n            className={cx(\r\n              Type[type],\r\n              dense && Type[\"dense\"],\r\n              isDark ? View[view + \"-dark\"] : View[view],\r\n              View[color],\r\n              Color[color],\r\n              className\r\n            )}\r\n            popoverProps={{\r\n              popoverClassName: cx(View[\"popover\"], Color[color])\r\n            }}\r\n          />\r\n        </>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nBreadcrumbs.propTypes = {\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * All breadcrumbs to display. Breadcrumbs that do not fit in the container will be rendered in an overflow menu instead.\r\n   */\r\n  items: PropTypes.array.isRequired,\r\n  /**\r\n   * Which direction the breadcrumbs should collapse from: start or end.\r\n   */\r\n  collapseFrom: PropTypes.string\r\n};\r\n"]},"metadata":{},"sourceType":"module"}