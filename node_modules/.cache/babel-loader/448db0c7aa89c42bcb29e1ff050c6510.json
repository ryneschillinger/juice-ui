{"ast":null,"code":"import _slicedToArray from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Inputs/SearchInput/SearchInput.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { InputGroup, Icon, Button } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../../styles/color.module.css\";\nimport { ThemeContext } from \"../../ThemeContext\";\n/** \r\n  __Component 'SearchInput'__\r\n**/\n\nexport default function SearchInput(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"def\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"smooth\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"primary\" : _props$color,\n        className = props.className,\n        placeholder = props.placeholder,\n        clearButton = props.clearButton,\n        clearIcon = props.clearIcon,\n        value = props.value,\n        fill = props.fill,\n        onSearch = props.onSearch,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"className\", \"placeholder\", \"clearButton\", \"clearIcon\", \"value\", \"fill\", \"onSearch\"]);\n\n  const _React$useState = React.useState(value),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isVal = _React$useState2[0],\n        setVal = _React$useState2[1]; //component value\n\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isActive = _React$useState4[0],\n        setActive = _React$useState4[1]; //component active state (focused)\n\n\n  const _React$useState5 = React.useState(isVal ? true : false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        isFilled = _React$useState6[0],\n        setFilled = _React$useState6[1]; //component filled state (unfocused and has value)\n  // add active class and placeholder\n\n\n  const handleFocus = e => {\n    setActive(true);\n    setFilled(false);\n  }; // remove active class and placeholder\n\n\n  const handleBlur = e => {\n    setActive(false);\n    setFilled(e.target.value ? true : false);\n  };\n\n  const handleClear = e => {\n    setVal(\"\");\n    setActive(false);\n    setFilled(false);\n  };\n\n  const handleChange = e => {\n    setVal(e.target.value);\n  };\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(InputGroup, Object.assign({}, restProps, {\n    type: \"text\",\n    value: isVal || \"\",\n    className: cx(Type[type], fill && Type[\"fill\"], View[type], isActive && View[\"active\"], isFilled && View[\"isFilled\"], Color[color],\n    /*Dark mode*/\n    dark ? View[view + \"-dark\"] : View[view], className),\n    placeholder: isActive ? null : placeholder,\n    leftIcon: React.createElement(Button, {\n      icon: React.createElement(Icon, {\n        icon: \"search\",\n        iconSize: type === \"dense\" ? 16 : 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }),\n      minimal: true,\n      className: View[\"searchButton\"],\n      onClick: () => onSearch && isVal ? onSearch(isVal) : !isVal ? setVal(\"\") : setVal(\"On search ...\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }),\n    onKeyPress: e => e.key === \"Enter\" && (onSearch && e.target.value ? onSearch(e.target.value) : !e.target.value ? setVal(\"\") : setVal(\"On search ...\")),\n    onFocus: e => handleFocus(e),\n    onBlur: e => handleBlur(e),\n    onChange: e => handleChange(e),\n    rightElement: React.createElement(Button, {\n      icon: isVal && React.createElement(Icon, {\n        icon: clearIcon || \"cross\",\n        iconSize: type === \"dense\" ? 16 : 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }),\n      minimal: true,\n      className: cx(isVal ? View[\"clearButton\"] : type === \"def\" && View[\"voiceSearch\"]),\n      onClick: e => handleClear(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n}\nSearchInput.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense` \r\n   * Default value (if undefined): `def` `\r\n   */\n  type: PropTypes.oneOf([\"def\", \"dense\"]),\n\n  /**\r\n   ` The view of the component.\r\n   * Variants: `outlined` `raised`\r\n   * Default value (if undefined): `smooth` `\r\n   */\n  view: PropTypes.oneOf([\"smooth\", \"outlined\", \"raised\", \"filled\"]),\n\n  /**\r\n   * Placeholder text in the absence of any value.\r\n   */\n  placeholder: PropTypes.string,\n\n  /**\r\n   * Form value of the input\r\n   */\n  value: PropTypes.string,\n\n  /**Your custom search function */\n  onSearch: PropTypes.func,\n\n  /**If `true`, the component will take up the full width of its container. */\n  fill: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Inputs/SearchInput/SearchInput.jsx"],"names":["React","cx","PropTypes","InputGroup","Icon","Button","Type","View","Color","ThemeContext","SearchInput","props","type","view","color","className","placeholder","clearButton","clearIcon","value","fill","onSearch","restProps","useState","isVal","setVal","isActive","setActive","isFilled","setFilled","handleFocus","e","handleBlur","target","handleClear","handleChange","dark","key","propTypes","oneOf","string","func","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { InputGroup, Icon, Button } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../../ThemeContext\";\r\n\r\n/** \r\n  __Component 'SearchInput'__\r\n**/\r\n\r\nexport default function SearchInput(props) {\r\n  const {\r\n    type = \"def\",\r\n    view = \"smooth\",\r\n    color = \"primary\",\r\n    className,\r\n    placeholder,\r\n    clearButton,\r\n    clearIcon,\r\n    value,\r\n    fill,\r\n    onSearch,\r\n    ...restProps\r\n  } = props;\r\n\r\n  const [isVal, setVal] = React.useState(value); //component value\r\n  const [isActive, setActive] = React.useState(false); //component active state (focused)\r\n  const [isFilled, setFilled] = React.useState(isVal ? true : false); //component filled state (unfocused and has value)\r\n\r\n  // add active class and placeholder\r\n  const handleFocus = e => {\r\n    setActive(true);\r\n    setFilled(false);\r\n  };\r\n\r\n  // remove active class and placeholder\r\n  const handleBlur = e => {\r\n    setActive(false);\r\n    setFilled(e.target.value ? true : false);\r\n  };\r\n\r\n  const handleClear = e => {\r\n    setVal(\"\");\r\n    setActive(false);\r\n    setFilled(false);\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setVal(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <InputGroup\r\n          {...restProps}\r\n          type={\"text\"}\r\n          value={isVal || ``}\r\n          className={cx(\r\n            Type[type],\r\n            fill && Type[\"fill\"],\r\n            View[type],\r\n            isActive && View[\"active\"],\r\n            isFilled && View[\"isFilled\"],\r\n            Color[color],\r\n            /*Dark mode*/\r\n            dark ? View[view + \"-dark\"] : View[view],\r\n            className\r\n          )}\r\n          placeholder={isActive ? null : placeholder}\r\n          leftIcon={\r\n            <Button\r\n              icon={\r\n                <Icon icon={\"search\"} iconSize={type === \"dense\" ? 16 : 20} />\r\n              }\r\n              minimal={true}\r\n              className={View[\"searchButton\"]}\r\n              onClick={() =>\r\n                onSearch && isVal\r\n                  ? onSearch(isVal)\r\n                  : !isVal\r\n                  ? setVal(\"\")\r\n                  : setVal(\"On search ...\")\r\n              }\r\n            />\r\n          }\r\n          onKeyPress={e =>\r\n            e.key === \"Enter\" &&\r\n            (onSearch && e.target.value\r\n              ? onSearch(e.target.value)\r\n              : !e.target.value\r\n              ? setVal(\"\")\r\n              : setVal(\"On search ...\"))\r\n          }\r\n          onFocus={e => handleFocus(e)}\r\n          onBlur={e => handleBlur(e)}\r\n          onChange={e => handleChange(e)}\r\n          rightElement={\r\n            <Button\r\n              icon={\r\n                isVal && (\r\n                  <Icon\r\n                    icon={clearIcon || \"cross\"}\r\n                    iconSize={type === \"dense\" ? 16 : 20}\r\n                  />\r\n                )\r\n              }\r\n              minimal={true}\r\n              className={cx(\r\n                isVal\r\n                  ? View[\"clearButton\"]\r\n                  : type === \"def\" && View[\"voiceSearch\"]\r\n              )}\r\n              onClick={e => handleClear(e)}\r\n            />\r\n          }\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nSearchInput.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense` \r\n   * Default value (if undefined): `def` `\r\n   */\r\n  type: PropTypes.oneOf([\"def\", \"dense\"]),\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `outlined` `raised`\r\n   * Default value (if undefined): `smooth` `\r\n   */\r\n  view: PropTypes.oneOf([\"smooth\", \"outlined\", \"raised\", \"filled\"]),\r\n  /**\r\n   * Placeholder text in the absence of any value.\r\n   */\r\n  placeholder: PropTypes.string,\r\n  /**\r\n   * Form value of the input\r\n   */\r\n  value: PropTypes.string,\r\n  /**Your custom search function */\r\n  onSearch: PropTypes.func,\r\n  /**If `true`, the component will take up the full width of its container. */\r\n  fill: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}