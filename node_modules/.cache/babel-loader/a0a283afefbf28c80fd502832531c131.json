{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Navbar/Navbar.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Navbar as NavbarSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\n/** \r\n  __Component 'Navbar'__\r\n**/\n\nexport default function Navbar(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"desktop\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"filled\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"primary\" : _props$color,\n        children = props.children,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"children\", \"className\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(NavbarSource, Object.assign({}, restProps, {\n    className: cx(Type[type], dark ? View[view + \"-dark\"] : View[view], Color[color], className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), children));\n}\nNavbar.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense` `mobile`\r\n   * Default value (if undefined): `desktop` `\r\n   */\n  type: PropTypes.oneOf([\"desktop\", \"tablet\", \"mobile\"]),\n\n  /**\r\n   ` The view of the component.\r\n   * Variants: `raised`\r\n   * Default value (if undefined): `filled` `flat` `smooth`\r\n   */\n  view: PropTypes.oneOf([\"flat\", \"filled\", \"smooth\", \"raised\"]),\n\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n  children: PropTypes.any.isRequired\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Navbar/Navbar.jsx"],"names":["React","cx","PropTypes","Navbar","NavbarSource","Type","View","Color","ThemeContext","props","type","view","color","children","className","restProps","dark","propTypes","oneOf","any","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,MAAM,IAAIC,YAAnB,QAAuC,mBAAvC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;;;;AAIA,eAAe,SAASL,MAAT,CAAgBM,KAAhB,EAAuB;AAAA,sBAQhCA,KARgC,CAElCC,IAFkC;AAAA,QAElCA,IAFkC,4BAE3B,SAF2B;AAAA,sBAQhCD,KARgC,CAGlCE,IAHkC;AAAA,QAGlCA,IAHkC,4BAG3B,QAH2B;AAAA,uBAQhCF,KARgC,CAIlCG,KAJkC;AAAA,QAIlCA,KAJkC,6BAI1B,SAJ0B;AAAA,QAKlCC,QALkC,GAQhCJ,KARgC,CAKlCI,QALkC;AAAA,QAMlCC,SANkC,GAQhCL,KARgC,CAMlCK,SANkC;AAAA,QAO/BC,SAP+B,4BAQhCN,KARgC;;AAUpC,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEO,IAAAA;AAAF,GAAD,KACC,oBAAC,YAAD,oBACMD,SADN;AAEE,IAAA,SAAS,EAAEd,EAAE,CACXI,IAAI,CAACK,IAAD,CADO,EAEXM,IAAI,GAAGV,IAAI,CAACK,IAAI,GAAG,OAAR,CAAP,GAA0BL,IAAI,CAACK,IAAD,CAFvB,EAGXJ,KAAK,CAACK,KAAD,CAHM,EAIXE,SAJW,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASGD,QATH,CAFJ,CADF;AAiBD;AAEDV,MAAM,CAACc,SAAP,GAAmB;AACjB;;;;;AAKAP,EAAAA,IAAI,EAAER,SAAS,CAACgB,KAAV,CAAgB,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAtB,CAAhB,CANW;;AAOjB;;;;;AAKAP,EAAAA,IAAI,EAAET,SAAS,CAACgB,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B,QAA7B,CAAhB,CAZW;;AAajB;;;;;AAKAN,EAAAA,KAAK,EAAEV,SAAS,CAACgB,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CAlBU;AA6BjBL,EAAAA,QAAQ,EAAEX,SAAS,CAACiB,GAAV,CAAcC;AA7BP,CAAnB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Navbar as NavbarSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\n/** \r\n  __Component 'Navbar'__\r\n**/\r\n\r\nexport default function Navbar(props) {\r\n  const {\r\n    type = \"desktop\",\r\n    view = \"filled\",\r\n    color = \"primary\",\r\n    children,\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <NavbarSource\r\n          {...restProps}\r\n          className={cx(\r\n            Type[type],\r\n            dark ? View[view + \"-dark\"] : View[view],\r\n            Color[color],\r\n            className\r\n          )}\r\n        >\r\n          {children}\r\n        </NavbarSource>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense` `mobile`\r\n   * Default value (if undefined): `desktop` `\r\n   */\r\n  type: PropTypes.oneOf([\"desktop\", \"tablet\", \"mobile\"]),\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `raised`\r\n   * Default value (if undefined): `filled` `flat` `smooth`\r\n   */\r\n  view: PropTypes.oneOf([\"flat\", \"filled\", \"smooth\", \"raised\"]),\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  children: PropTypes.any.isRequired\r\n};\r\n"]},"metadata":{},"sourceType":"module"}