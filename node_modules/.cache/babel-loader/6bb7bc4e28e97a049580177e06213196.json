{"ast":null,"code":"import _slicedToArray from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/docs/icons/section.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport Typo from \"../../../core/Typography\";\nimport { Icon } from \"@blueprintjs/core\";\nimport IconJson from \"@blueprintjs/icons/resources/icons/icons.json\";\nimport Toaster from \"../../../core/Toast/Toaster.jsx\";\nimport styles from \"./style.module.css\";\nexport const Section = props => {\n  const _React$useState = React.useState(null),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        toastRef = _React$useState2[0],\n        setRef = _React$useState2[1];\n  /**Success toast */\n\n\n  const SuccessToast = {\n    message: \"Copied to clipboard\",\n    timeout: 1000,\n    icon: React.createElement(Icon, {\n      icon: \"tick\",\n      iconSize: 24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    })\n  };\n  /**Copy function */\n\n  const copyToClipboard = source => {\n    const textField = document.createElement(\"textarea\");\n    textField.innerHTML = source;\n    document.body.appendChild(textField);\n    textField.select();\n    props.device !== \"mobile\" && document.execCommand(\"copy\") && toastRef.show(SuccessToast);\n    textField.remove();\n  };\n\n  let groupArray = [...new Set(Object(IconJson).map(name => name.group))].sort();\n\n  const groupIcons = group => {\n    let items = Object(IconJson).filter(name => name.group === group).sort();\n    let icons_name = items.map(item => item.iconName).sort();\n    let icons_display_name = items.map(item => item.displayName).sort();\n    let icons_tags = items.map(item => item.tags).sort();\n    return React.createElement(React.Fragment, null, icons_name.map((item, i) => React.createElement(\"div\", {\n      className: cx(styles.icon_item, props.className),\n      key: i,\n      onClick: () => copyToClipboard(item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.icon_item_container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.icon_svg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      icon: item,\n      iconSize: props.iconSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(Typo, {\n      large: true,\n      colorStep: 40,\n      \"data-name\": icons_display_name[i],\n      className: styles.icon_name,\n      tags: icons_tags[i],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })))).sort());\n  };\n\n  return React.createElement(React.Fragment, null, groupArray.map((item, i) => React.createElement(\"div\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Typo, {\n    type: \"h5\",\n    colorStep: 100,\n    className: styles.section_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, item), React.createElement(\"div\", {\n    className: styles.icons_section,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, groupIcons(item)))), React.createElement(Toaster, {\n    view: \"outlined\",\n    color: \"primary\",\n    usePortal: false,\n    position: \"bottom\",\n    setRef: setRef,\n    withoutClose: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/docs/icons/section.jsx"],"names":["React","cx","Typo","Icon","IconJson","Toaster","styles","Section","props","useState","toastRef","setRef","SuccessToast","message","timeout","icon","copyToClipboard","source","textField","document","createElement","innerHTML","body","appendChild","select","device","execCommand","show","remove","groupArray","Set","Object","map","name","group","sort","groupIcons","items","filter","icons_name","item","iconName","icons_display_name","displayName","icons_tags","tags","i","icon_item","className","icon_item_container","icon_svg","iconSize","icon_name","section_title","icons_section"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport Typo from \"../../../core/Typography\";\r\nimport { Icon } from \"@blueprintjs/core\";\r\nimport IconJson from \"@blueprintjs/icons/resources/icons/icons.json\";\r\nimport Toaster from \"../../../core/Toast/Toaster.jsx\";\r\n\r\nimport styles from \"./style.module.css\";\r\n\r\nexport const Section = props => {\r\n  const [toastRef, setRef] = React.useState(null);\r\n\r\n  /**Success toast */\r\n  const SuccessToast = {\r\n    message: \"Copied to clipboard\",\r\n    timeout: 1000,\r\n    icon: <Icon icon=\"tick\" iconSize={24} />\r\n  };\r\n  /**Copy function */\r\n  const copyToClipboard = source => {\r\n    const textField = document.createElement(\"textarea\");\r\n    textField.innerHTML = source;\r\n    document.body.appendChild(textField);\r\n    textField.select();\r\n    props.device !== \"mobile\" &&\r\n      (document.execCommand(\"copy\") && toastRef.show(SuccessToast));\r\n    textField.remove();\r\n  };\r\n\r\n  let groupArray = [\r\n    ...new Set(Object(IconJson).map(name => name.group))\r\n  ].sort();\r\n\r\n  const groupIcons = group => {\r\n    let items = Object(IconJson)\r\n      .filter(name => name.group === group)\r\n      .sort();\r\n    let icons_name = items.map(item => item.iconName).sort();\r\n    let icons_display_name = items.map(item => item.displayName).sort();\r\n    let icons_tags = items.map(item => item.tags).sort();\r\n\r\n    return (\r\n      <>\r\n        {icons_name\r\n          .map((item, i) => (\r\n            <div\r\n              className={cx(styles.icon_item, props.className)}\r\n              key={i}\r\n              onClick={() => copyToClipboard(item)}\r\n            >\r\n              <div className={styles.icon_item_container}>\r\n                <div className={styles.icon_svg}>\r\n                  <Icon icon={item} iconSize={props.iconSize} />\r\n                </div>\r\n\r\n                <Typo\r\n                  large\r\n                  colorStep={40}\r\n                  data-name={icons_display_name[i]}\r\n                  className={styles.icon_name}\r\n                  tags={icons_tags[i]}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))\r\n          .sort()}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {groupArray.map((item, i) => (\r\n        <div key={i}>\r\n          <Typo type=\"h5\" colorStep={100} className={styles.section_title}>\r\n            {item}\r\n          </Typo>\r\n          <div className={styles.icons_section}>{groupIcons(item)}</div>\r\n        </div>\r\n      ))}\r\n      <Toaster\r\n        view=\"outlined\"\r\n        color={\"primary\"}\r\n        usePortal={false}\r\n        position=\"bottom\"\r\n        setRef={setRef}\r\n        withoutClose={true}\r\n      />\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}