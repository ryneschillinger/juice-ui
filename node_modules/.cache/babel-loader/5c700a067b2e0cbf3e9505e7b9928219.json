{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Menu/MenuDivider/Divider.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { MenuDivider as MenuDividerSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../../styles/color.module.css\";\nimport { ThemeContext } from \"../../ThemeContext\";\n/** \r\n  __Component 'MenuDivider'__\r\n**/\n\nexport default function MenuDivider(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"def\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"smooth\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"className\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(MenuDividerSource, Object.assign({}, restProps, {\n    className: cx(Type[type], View[view], Color[color], className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n}\nMenuDivider.propTypes = {\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * A space-delimited list of class names to pass along to a child element.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Optional header title.\r\n   */\n  title: PropTypes.string\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Menu/MenuDivider/Divider.jsx"],"names":["React","cx","PropTypes","MenuDivider","MenuDividerSource","Type","View","Color","ThemeContext","props","type","view","color","className","restProps","dark","propTypes","oneOf","string","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,WAAW,IAAIC,iBAAxB,QAAiD,mBAAjD;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;;;;AAIA,eAAe,SAASL,WAAT,CAAqBM,KAArB,EAA4B;AAAA,sBAOrCA,KAPqC,CAEvCC,IAFuC;AAAA,QAEvCA,IAFuC,4BAEhC,KAFgC;AAAA,sBAOrCD,KAPqC,CAGvCE,IAHuC;AAAA,QAGvCA,IAHuC,4BAGhC,QAHgC;AAAA,uBAOrCF,KAPqC,CAIvCG,KAJuC;AAAA,QAIvCA,KAJuC,6BAI/B,SAJ+B;AAAA,QAKvCC,SALuC,GAOrCJ,KAPqC,CAKvCI,SALuC;AAAA,QAMpCC,SANoC,4BAOrCL,KAPqC;;AASzC,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEM,IAAAA;AAAF,GAAD,KACC,oBAAC,iBAAD,oBACMD,SADN;AAEE,IAAA,SAAS,EAAEb,EAAE,CAACI,IAAI,CAACK,IAAD,CAAL,EAAaJ,IAAI,CAACK,IAAD,CAAjB,EAAyBJ,KAAK,CAACK,KAAD,CAA9B,EAAuCC,SAAvC,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADF;AAUD;AAEDV,WAAW,CAACa,SAAZ,GAAwB;AACtB;;;;;AAKAJ,EAAAA,KAAK,EAAEV,SAAS,CAACe,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CANe;;AAiBtB;;;AAGAJ,EAAAA,SAAS,EAAEX,SAAS,CAACgB,MApBC;;AAqBtB;;;AAGAC,EAAAA,KAAK,EAAEjB,SAAS,CAACgB;AAxBK,CAAxB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { MenuDivider as MenuDividerSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../../styles/color.module.css\";\r\nimport { ThemeContext } from \"../../ThemeContext\";\r\n\r\n/** \r\n  __Component 'MenuDivider'__\r\n**/\r\n\r\nexport default function MenuDivider(props) {\r\n  const {\r\n    type = \"def\",\r\n    view = \"smooth\",\r\n    color = \"default\",\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <MenuDividerSource\r\n          {...restProps}\r\n          className={cx(Type[type], View[view], Color[color], className)}\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nMenuDivider.propTypes = {\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * A space-delimited list of class names to pass along to a child element.\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * Optional header title.\r\n   */\r\n  title: PropTypes.string\r\n};\r\n"]},"metadata":{},"sourceType":"module"}