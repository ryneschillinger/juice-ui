{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Slider/Slider.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Slider as SliderSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\nexport default function Slider(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"def\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"filled\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"primary\" : _props$color,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"className\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(SliderSource, Object.assign({}, restProps, {\n    className: cx(Type[type], dark ? View[view + \"-dark\"] : View[view], Color[color], className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })));\n}\nSlider.propTypes = {\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * Whether to show the slider in a vertical orientation.\r\n   */\n  vertical: PropTypes.bool,\n\n  /**\r\n   * Initial value of the slider. This determines the other end of the track fill: from initialValue to value.\r\n   */\n  initialValue: PropTypes.number,\n\n  /**\r\n   * Number of decimal places to use when rendering label value.\r\n   */\n  labelPrecision: PropTypes.number,\n\n  /**\r\n   * Increment between successive labels. Must be greater than zero.\r\n   */\n  labelStepSize: PropTypes.number,\n\n  /**\r\n   * Increment between successive values; amount by which the handle moves. Must be greater than zero.\r\n   */\n  stepSize: PropTypes.number,\n\n  /**\r\n   * Minimum value of the slider.\r\n   */\n  min: PropTypes.number,\n\n  /**\r\n   * Maximum value of the slider.\r\n   */\n  max: PropTypes.number,\n\n  /**\r\n   * Whether a solid bar should be rendered on the track between current and initial values, or between handles for RangeSlider.\r\n   */\n  showTrackFill: PropTypes.bool,\n\n  /**\r\n   * Callback to render a single label. Useful for formatting numbers as currency or percentages.\r\n   * If true, labels will use number value formatted to labelPrecision decimal places.\r\n   * If false, labels will not be shown.\r\n   */\n  labelRenderer: PropTypes.func,\n\n  /**\r\n   * Value of slider.\r\n   */\n  value: PropTypes.number,\n\n  /**\r\n   * Callback invoked when the value changes.\r\n   */\n  onChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Slider/Slider.jsx"],"names":["React","cx","PropTypes","Slider","SliderSource","Type","View","Color","ThemeContext","props","type","view","color","className","restProps","dark","propTypes","oneOf","vertical","bool","initialValue","number","labelPrecision","labelStepSize","stepSize","min","max","showTrackFill","labelRenderer","func","value","onChange"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,MAAM,IAAIC,YAAnB,QAAuC,mBAAvC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,eAAe,SAASL,MAAT,CAAgBM,KAAhB,EAAuB;AAAA,sBAOhCA,KAPgC,CAElCC,IAFkC;AAAA,QAElCA,IAFkC,4BAE3B,KAF2B;AAAA,sBAOhCD,KAPgC,CAGlCE,IAHkC;AAAA,QAGlCA,IAHkC,4BAG3B,QAH2B;AAAA,uBAOhCF,KAPgC,CAIlCG,KAJkC;AAAA,QAIlCA,KAJkC,6BAI1B,SAJ0B;AAAA,QAKlCC,SALkC,GAOhCJ,KAPgC,CAKlCI,SALkC;AAAA,QAM/BC,SAN+B,4BAOhCL,KAPgC;;AASpC,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEM,IAAAA;AAAF,GAAD,KACC,oBAAC,YAAD,oBACMD,SADN;AAEE,IAAA,SAAS,EAAEb,EAAE,CACXI,IAAI,CAACK,IAAD,CADO,EAEXK,IAAI,GAAGT,IAAI,CAACK,IAAI,GAAG,OAAR,CAAP,GAA0BL,IAAI,CAACK,IAAD,CAFvB,EAGXJ,KAAK,CAACK,KAAD,CAHM,EAIXC,SAJW,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADF;AAeD;AACDV,MAAM,CAACa,SAAP,GAAmB;AACjB;;;;;AAKAJ,EAAAA,KAAK,EAAEV,SAAS,CAACe,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CANU;;AAiBjB;;;AAGAC,EAAAA,QAAQ,EAAEhB,SAAS,CAACiB,IApBH;;AAqBjB;;;AAGAC,EAAAA,YAAY,EAAElB,SAAS,CAACmB,MAxBP;;AAyBjB;;;AAGAC,EAAAA,cAAc,EAAEpB,SAAS,CAACmB,MA5BT;;AA6BjB;;;AAGAE,EAAAA,aAAa,EAAErB,SAAS,CAACmB,MAhCR;;AAiCjB;;;AAGAG,EAAAA,QAAQ,EAAEtB,SAAS,CAACmB,MApCH;;AAqCjB;;;AAGAI,EAAAA,GAAG,EAAEvB,SAAS,CAACmB,MAxCE;;AAyCjB;;;AAGAK,EAAAA,GAAG,EAAExB,SAAS,CAACmB,MA5CE;;AA6CjB;;;AAGAM,EAAAA,aAAa,EAAEzB,SAAS,CAACiB,IAhDR;;AAiDjB;;;;;AAKAS,EAAAA,aAAa,EAAE1B,SAAS,CAAC2B,IAtDR;;AAuDjB;;;AAGAC,EAAAA,KAAK,EAAE5B,SAAS,CAACmB,MA1DA;;AA2DjB;;;AAGAU,EAAAA,QAAQ,EAAE7B,SAAS,CAAC2B;AA9DH,CAAnB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Slider as SliderSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\nexport default function Slider(props) {\r\n  const {\r\n    type = \"def\",\r\n    view = \"filled\",\r\n    color = \"primary\",\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <SliderSource\r\n          {...restProps}\r\n          className={cx(\r\n            Type[type],\r\n            dark ? View[view + \"-dark\"] : View[view],\r\n            Color[color],\r\n            className\r\n          )}\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\nSlider.propTypes = {\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * Whether to show the slider in a vertical orientation.\r\n   */\r\n  vertical: PropTypes.bool,\r\n  /**\r\n   * Initial value of the slider. This determines the other end of the track fill: from initialValue to value.\r\n   */\r\n  initialValue: PropTypes.number,\r\n  /**\r\n   * Number of decimal places to use when rendering label value.\r\n   */\r\n  labelPrecision: PropTypes.number,\r\n  /**\r\n   * Increment between successive labels. Must be greater than zero.\r\n   */\r\n  labelStepSize: PropTypes.number,\r\n  /**\r\n   * Increment between successive values; amount by which the handle moves. Must be greater than zero.\r\n   */\r\n  stepSize: PropTypes.number,\r\n  /**\r\n   * Minimum value of the slider.\r\n   */\r\n  min: PropTypes.number,\r\n  /**\r\n   * Maximum value of the slider.\r\n   */\r\n  max: PropTypes.number,\r\n  /**\r\n   * Whether a solid bar should be rendered on the track between current and initial values, or between handles for RangeSlider.\r\n   */\r\n  showTrackFill: PropTypes.bool,\r\n  /**\r\n   * Callback to render a single label. Useful for formatting numbers as currency or percentages.\r\n   * If true, labels will use number value formatted to labelPrecision decimal places.\r\n   * If false, labels will not be shown.\r\n   */\r\n  labelRenderer: PropTypes.func,\r\n  /**\r\n   * Value of slider.\r\n   */\r\n  value: PropTypes.number,\r\n  /**\r\n   * Callback invoked when the value changes.\r\n   */\r\n  onChange: PropTypes.func\r\n};\r\n"]},"metadata":{},"sourceType":"module"}