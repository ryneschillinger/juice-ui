{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Drawer/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        position = props.position,\n        backdrop = props.backdrop,\n        title = props.title,\n        icon = props.icon;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"position\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"right\")),\n    desc: React.createElement(React.Fragment, null, \"Position of a drawer. All angled positions will be casted into pure positions. Possible states are \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"top | bottom | left | right\"), \".\")\n  }, {\n    prop: \"size\",\n    type: React.createElement(React.Fragment, null, \"number | string = \\\"50%\\\"\"),\n    desc: React.createElement(React.Fragment, null, \"CSS size of the drawer. This sets width. For example,\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"size = '360px'\"))\n  }, {\n    prop: \"title\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Title of the dialog. If provided, an element with DIALOG_HEADER will be rendered inside the dialog before any children elements.\")\n  }, {\n    prop: \"icon\",\n    type: \"string | element\",\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon (or an icon element) to render in the drawer's header. Note that the header will only be rendered if title is provided.For example, \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"\\\"tick\\\"\"), \" or\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"<Icon icon=\\\"tick\\\" iconSize={24} />\"))\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"style\",\n    type: \"React.CSSProperties\",\n    desc: \"CSS styles to apply to the dialog.\"\n  }, {\n    prop: \"onClose\",\n    type: React.createElement(React.Fragment, null, \"event\"),\n    desc: React.createElement(React.Fragment, null, \"A callback that is invoked when user interaction causes the overlay to close, such as clicking on the overlay or pressing the esc key (if enabled).\")\n  }, {\n    prop: \"hasBackdrop\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"true\")),\n    desc: React.createElement(React.Fragment, null, \"Whether a container-spanning backdrop element should be rendered behind the contents. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"true\"))\n  }, {\n    prop: \"isCloseButtonShown\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"true\")),\n    desc: React.createElement(React.Fragment, null, \"Whether to show the close button in the dialog's header. Note that the header will only be rendered if title is provided. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"true\"))\n  }, {\n    prop: \"transitionDuration\",\n    type: React.createElement(React.Fragment, null, \"number = 300\"),\n    desc: React.createElement(React.Fragment, null, \"Indicates how long (in milliseconds) the overlay's enter/leave transition takes. This is used by React CSSTransition to know when a transition completes and must match the duration of the animation in CSS. Only set this prop if you override default transitions with new transitions of a different length.\")\n  }, {\n    prop: \"usePortal\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"true\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the overlay should be wrapped in a Portal, which renders its contents in a new element attached to portalContainer prop. This prop essentially determines which element is covered by the backdrop: if false, then only its parent is covered; otherwise, the entire page is covered (because the parent of the Portal is the \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"body\"), \" itself). Set this prop to false on nested overlays (such as Dialog or Popover) to ensure that they are rendered above their parents.\")\n  }];\n  /** Code source */\n\n  const Code = \"  \\n  < Drawer\\n      <i>position</i> = '\".concat(position, \"'\\n      <i>hasBackdrop</i> = '\").concat(backdrop, \"'\\n      <i>title</i> = '\").concat(title, \"'\\n      <i>icon</i> = '\").concat(icon, \"'\\n      <i>isCloseButtonShown</i> = '\").concat(isCloseButtonShown, \"'\\n  >\\n    <span class=\\\"cmnt\\\">{/* Content goes here */}</span>\\n  < / Drawer >\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Drawer/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","position","backdrop","title","icon","OverviewText","APIData","prop","type","desc","Code","isCloseButtonShown"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const {\r\n    name,\r\n    position,\r\n    backdrop,\r\n    title,\r\n    icon\r\n  } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"position\",\r\n      type: (\r\n        <>\r\n          string = <i>right</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Position of a drawer. All angled positions will be casted into pure\r\n          positions. Possible states are <b>top | bottom | left | right</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"size\",\r\n      type: <>number | string = \"50%\"</>,\r\n      desc: (\r\n        <>\r\n          CSS size of the drawer. This sets width. For example,{\" \"}\r\n          <b>size = '360px'</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"title\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          Title of the dialog. If provided, an element with DIALOG_HEADER will\r\n          be rendered inside the dialog before any children elements.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: \"string | element\",\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon (or an icon element) to render in the\r\n          drawer's header. Note that the header will only be rendered if title\r\n          is provided.For example, <b>\"tick\"</b> or{\" \"}\r\n          <b>{`<Icon icon=\"tick\" iconSize={24} />`}</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"style\",\r\n      type: \"React.CSSProperties\",\r\n      desc:\r\n        \"CSS styles to apply to the dialog.\"\r\n    },\r\n    {\r\n      prop: \"onClose\",\r\n      type: <>event</>,\r\n      desc: (\r\n        <>\r\n          A callback that is invoked when user interaction causes the overlay to\r\n          close, such as clicking on the overlay or pressing the esc key (if\r\n          enabled).\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"hasBackdrop\",\r\n      type: (\r\n        <>\r\n          boolean = <i>true</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether a container-spanning backdrop element should be rendered\r\n          behind the contents. The default state is <b>true</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"isCloseButtonShown\",\r\n      type: (\r\n        <>\r\n          boolean = <i>true</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether to show the close button in the dialog's header. Note that the\r\n          header will only be rendered if title is provided. The default state\r\n          is <b>true</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"transitionDuration\",\r\n      type: <>number = 300</>,\r\n      desc: (\r\n        <>\r\n          Indicates how long (in milliseconds) the overlay's enter/leave\r\n          transition takes. This is used by React CSSTransition to know when a\r\n          transition completes and must match the duration of the animation in\r\n          CSS. Only set this prop if you override default transitions with new\r\n          transitions of a different length.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"usePortal\",\r\n      type: (\r\n        <>\r\n          boolean = <i>true</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether the overlay should be wrapped in a Portal, which renders its\r\n          contents in a new element attached to portalContainer prop. This prop\r\n          essentially determines which element is covered by the backdrop: if\r\n          false, then only its parent is covered; otherwise, the entire page is\r\n          covered (because the parent of the Portal is the <b>body</b> itself).\r\n          Set this prop to false on nested overlays (such as Dialog or Popover)\r\n          to ensure that they are rendered above their parents.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n  < Drawer\r\n      <i>position</i> = '${position}'\r\n      <i>hasBackdrop</i> = '${backdrop}'\r\n      <i>title</i> = '${title}'\r\n      <i>icon</i> = '${icon}'\r\n      <i>isCloseButtonShown</i> = '${isCloseButtonShown}'\r\n  >\r\n    <span class=\"cmnt\">{/* Content goes here */}</span>\r\n  < / Drawer >\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}