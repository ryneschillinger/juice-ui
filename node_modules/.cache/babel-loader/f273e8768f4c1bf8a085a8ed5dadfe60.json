{"ast":null,"code":"import _defineProperty from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Tree/Tree.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Tree as TreeSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\nexport default function Tree(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"def\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"flat\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        contents = props.contents,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"contents\", \"className\"]);\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        expanded = _React$useState2[0],\n        setExpanded = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selected = _React$useState4[0],\n        setSelected = _React$useState4[1];\n  /**This is Demo functions for Tree component.\r\n   * If you need, you can use this for your application */\n\n\n  const handleNodeExpand = nodeData => {\n    nodeData.isExpanded = true;\n    setExpanded(_objectSpread({}, expanded, {\n      [nodeData.id]: true\n    }));\n  };\n\n  const forEach = nodes => {\n    nodes.map(i => !i.childNodes ? i.isSelected = false : forEach(i.childNodes));\n  };\n\n  const handleNodeCollapse = nodeData => {\n    nodeData.isExpanded = false;\n    setExpanded(_objectSpread({}, expanded, {\n      [nodeData.id]: false\n    }));\n  };\n\n  const handleNodeClick = nodeData => {\n    !nodeData.childNodes && forEach(contents);\n    !nodeData.childNodes && (nodeData.isSelected = true);\n    !nodeData.childNodes && setSelected(_objectSpread({}, selected, {\n      [nodeData.id]: true\n    }));\n    /**/\n\n    nodeData.isExpanded ? nodeData.childNodes && (nodeData.isExpanded = false) : nodeData.childNodes && (nodeData.isExpanded = true);\n    nodeData.childNodes && setExpanded(_objectSpread({}, expanded, {\n      [nodeData.id]: nodeData.isExpanded\n    }));\n  };\n  /**END of Demo functions */\n\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(TreeSource, Object.assign({}, restProps, {\n    contents: contents,\n    onNodeClick: handleNodeClick,\n    onNodeCollapse: handleNodeCollapse,\n    onNodeExpand: handleNodeExpand,\n    className: cx(Type[type], dark ? View[view + \"-dark\"] : View[view], Color[color], className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n}\nTree.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense`\r\n   * Default value (if undefined): `def` `\r\n   */\n  type: PropTypes.oneOf([\"def\", \"dense\"]),\n\n  /**\r\n  ` The view of the component.\r\n  * Variants: `flat`  \r\n  * Default value (if undefined): `flat` `\r\n  */\n  view: PropTypes.oneOf([\"flat\"]),\n\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * The data specifying the contents and appearance of the tree.\r\n   */\n  contents: PropTypes.array.isRequired,\n\n  /**\r\n   * Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.\r\n   */\n  onNodeClick: PropTypes.func,\n\n  /**\r\n   * Invoked when caret of an expanded node is clicked.\r\n   */\n  onNodeCollapse: PropTypes.func,\n\n  /**\r\n   * Invoked when the caret of a collapsed node is clicked.\r\n   */\n  onNodeExpand: PropTypes.func\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Tree/Tree.jsx"],"names":["React","cx","PropTypes","Tree","TreeSource","Type","View","Color","ThemeContext","props","type","view","color","contents","className","restProps","useState","expanded","setExpanded","selected","setSelected","handleNodeExpand","nodeData","isExpanded","id","forEach","nodes","map","i","childNodes","isSelected","handleNodeCollapse","handleNodeClick","dark","propTypes","oneOf","array","isRequired","onNodeClick","func","onNodeCollapse","onNodeExpand"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Tree as TreeSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\nexport default function Tree(props) {\r\n  const {\r\n    type = \"def\",\r\n    view = \"flat\",\r\n    color = \"default\",\r\n    contents,\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n  const [expanded, setExpanded] = React.useState([]);\r\n  const [selected, setSelected] = React.useState([]);\r\n\r\n  /**This is Demo functions for Tree component.\r\n   * If you need, you can use this for your application */\r\n\r\n  const handleNodeExpand = nodeData => {\r\n    nodeData.isExpanded = true;\r\n    setExpanded({ ...expanded, [nodeData.id]: true });\r\n  };\r\n  const forEach = nodes => {\r\n    nodes.map(i =>\r\n      !i.childNodes ? (i.isSelected = false) : forEach(i.childNodes)\r\n    );\r\n  };\r\n\r\n  const handleNodeCollapse = nodeData => {\r\n    nodeData.isExpanded = false;\r\n    setExpanded({ ...expanded, [nodeData.id]: false });\r\n  };\r\n  const handleNodeClick = nodeData => {\r\n    !nodeData.childNodes && forEach(contents);\r\n\r\n    !nodeData.childNodes && (nodeData.isSelected = true);\r\n    !nodeData.childNodes && setSelected({ ...selected, [nodeData.id]: true });\r\n\r\n    /**/\r\n    nodeData.isExpanded\r\n      ? nodeData.childNodes && (nodeData.isExpanded = false)\r\n      : nodeData.childNodes && (nodeData.isExpanded = true);\r\n    nodeData.childNodes &&\r\n      setExpanded({ ...expanded, [nodeData.id]: nodeData.isExpanded });\r\n  };\r\n\r\n  /**END of Demo functions */\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <TreeSource\r\n          {...restProps}\r\n          contents={contents}\r\n          onNodeClick={handleNodeClick}\r\n          onNodeCollapse={handleNodeCollapse}\r\n          onNodeExpand={handleNodeExpand}\r\n          className={cx(\r\n            Type[type],\r\n            dark ? View[view + \"-dark\"] : View[view],\r\n            Color[color],\r\n            className\r\n          )}\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nTree.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense`\r\n   * Default value (if undefined): `def` `\r\n   */\r\n  type: PropTypes.oneOf([\"def\", \"dense\"]),\r\n  /**\r\n  ` The view of the component.\r\n  * Variants: `flat`  \r\n  * Default value (if undefined): `flat` `\r\n  */\r\n  view: PropTypes.oneOf([\"flat\"]),\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * The data specifying the contents and appearance of the tree.\r\n   */\r\n  contents: PropTypes.array.isRequired,\r\n  /**\r\n   * Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.\r\n   */\r\n  onNodeClick: PropTypes.func,\r\n  /**\r\n   * Invoked when caret of an expanded node is clicked.\r\n   */\r\n  onNodeCollapse: PropTypes.func,\r\n  /**\r\n   * Invoked when the caret of a collapsed node is clicked.\r\n   */\r\n  onNodeExpand: PropTypes.func\r\n};\r\n"]},"metadata":{},"sourceType":"module"}