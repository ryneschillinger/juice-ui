{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Slider/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        color = props.color,\n        value = props.value,\n        vertical = props.vertical;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"primary\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"vertical\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether to show the slider in a vertical orientation.\")\n  }, {\n    prop: \"onChange\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Callback invoked when the value changes.\")\n  }, {\n    prop: \"value\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"Value of slider.\")\n  }, {\n    prop: \"initialValue\",\n    type: React.createElement(React.Fragment, null, \"number = 0\"),\n    desc: React.createElement(React.Fragment, null, \"Initial value of the slider. This determines the other end of the track fill: from initialValue to value.\")\n  }, {\n    prop: \"labelPrecision\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"Number of decimal places to use when rendering label value. Default value is the number of decimals used in the stepSize prop. This prop has no effect if you supply a custom labelRenderer callback.\")\n  }, {\n    prop: \"labelStepSize\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"Increment between successive labels. Must be greater than zero.\")\n  }, {\n    prop: \"labelRenderer\",\n    type: React.createElement(React.Fragment, null, \"boolean | (value: number) => string | Element = true\"),\n    desc: React.createElement(React.Fragment, null, \"Callback to render a single label. Useful for formatting numbers as currency or percentages. If true, labels will use number value formatted to labelPrecision decimal places. If false, labels will not be shown.\")\n  }, {\n    prop: \"stepSize\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"Increment between successive values; amount by which the handle moves. Must be greater than zero.\")\n  }, {\n    prop: \"min\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"Minimum value of the slider.\")\n  }, {\n    prop: \"max\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"Maximum value of the slider.\")\n  }];\n  /** Code source */\n\n  const Code = \"  \\n  &lt;<span class=\\\"val\\\">Slider</span>\\n      <i>color</i> = '\".concat(color, \"' \\n      <i>initialValue</i> = '\", 0, \"'\\n      <i>labelPrecision</i> = '\", 5, \"'\\n      <i>labelStepSize</i> = '\", 25, \"'\\n      <i>stepSize</i> = '\", 5, \"'\\n      <i>min</i> = '\", 0, \"'\\n      <i>max</i> = '\", 100, \"'\\n      <i>vertical</i> = \").concat(vertical ? \"{true}\" : \"{false}\", \"\\n      <i>onChange</i> = {value => setValue(\").concat(value, \")}\\n      <i>labelRenderer</i> = {value => \").concat(value, \"+\\\"%\\\"}\\n      <i>value</i> = '\").concat(value, \"'\\n  / >          \\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Slider/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","color","value","vertical","OverviewText","APIData","prop","type","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, color, value, vertical } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt\r\n          </b>\r\n          . The default state is <b>primary</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"vertical\",\r\n      type: <>boolean</>,\r\n      desc: <>Whether to show the slider in a vertical orientation.</>\r\n    },\r\n    {\r\n      prop: \"onChange\",\r\n      type: <>func</>,\r\n      desc: <>Callback invoked when the value changes.</>\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: <>number</>,\r\n      desc: <>Value of slider.</>\r\n    },\r\n    {\r\n      prop: \"initialValue\",\r\n      type: <>number = 0</>,\r\n      desc: (\r\n        <>\r\n          Initial value of the slider. This determines the other end of the\r\n          track fill: from initialValue to value.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"labelPrecision\",\r\n      type: <>number</>,\r\n      desc: (\r\n        <>\r\n          Number of decimal places to use when rendering label value. Default\r\n          value is the number of decimals used in the stepSize prop. This prop\r\n          has no effect if you supply a custom labelRenderer callback.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"labelStepSize\",\r\n      type: <>number</>,\r\n      desc: <>Increment between successive labels. Must be greater than zero.</>\r\n    },\r\n    {\r\n      prop: \"labelRenderer\",\r\n      type: <>boolean | (value: number) => string | Element = true</>,\r\n      desc: (\r\n        <>\r\n          Callback to render a single label. Useful for formatting numbers as\r\n          currency or percentages. If true, labels will use number value\r\n          formatted to labelPrecision decimal places. If false, labels will not\r\n          be shown.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"stepSize\",\r\n      type: <>number</>,\r\n      desc: (\r\n        <>\r\n          Increment between successive values; amount by which the handle moves.\r\n          Must be greater than zero.\r\n        </>\r\n      )\r\n    },\r\n\r\n    {\r\n      prop: \"min\",\r\n      type: <>number</>,\r\n      desc: <>Minimum value of the slider.</>\r\n    },\r\n    {\r\n      prop: \"max\",\r\n      type: <>number</>,\r\n      desc: <>Maximum value of the slider.</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n  &lt;<span class=\"val\">Slider</span>\r\n      <i>color</i> = '${color}' \r\n      <i>initialValue</i> = '${0}'\r\n      <i>labelPrecision</i> = '${5}'\r\n      <i>labelStepSize</i> = '${25}'\r\n      <i>stepSize</i> = '${5}'\r\n      <i>min</i> = '${0}'\r\n      <i>max</i> = '${100}'\r\n      <i>vertical</i> = ${vertical ? \"{true}\" : \"{false}\"}\r\n      <i>onChange</i> = {value => setValue(${value})}\r\n      <i>labelRenderer</i> = {value => ${value}+\"%\"}\r\n      <i>value</i> = '${value}'\r\n  / >          \r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}