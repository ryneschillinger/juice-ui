{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Navbar/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color;\n  const optionalText = React.createElement(React.Fragment, null, \"The Navbar API includes three stateless React components:\", \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"NavbarGroup NavbarHeading NavbarDivider\"), React.createElement(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"import NavbarGroup from \\\"../../core/Navbar/group.jsx\\\"; \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }), \"import NavbarHeading from \\\"../../core/Navbar/heading.jsx\\\";\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), \"import NavbarDivider from \\\"../../core/Navbar/divider.jsx\\\";\"), \"These components are simple containers for their children. Each of them supports the full range of HTML \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"div\"), \" props.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"NavbarGroup, NavbarHeading & NavbarDivider\"), \" components API contains only \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"className\"), \" prop.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"NavbarGroup\"), \" API additional contains \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"align\"), \" - the side of the navbar on which the group should appear (string, can be left, right, center ).\");\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    text: optionalText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"desktop\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \" desktop | tablet | mobile \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"desktop\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \" filled | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"fixedToTop\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether this navbar should be fixed to the top of the viewport (using CSS position: fixed).\")\n  }];\n  /** Code source */\n\n  const Code = \" \\n&lt;<span class=\\\"val\\\">NavBar</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\" <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\" <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n&gt;\\n  &lt;<span class=\\\"val\\\">NavBarGroup</span>&gt;\\n    &lt;<span class=\\\"val\\\">NavBarHeading</span>&gt;\\n      &lt;<span class=\\\"val\\\">Button</span>\\n        <span class=\\\"attr\\\">type</span>={\").concat(type === \"mobile\" ? \"icon\" : \"circle\", \"</span>}\\n        <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">smooth</span>\\\"\\n        <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n        <span class=\\\"attr\\\">icon</span>=\\\"<span class=\\\"val\\\">menu</span>\\\"\\n        <span class=\\\"attr\\\">active</span>={<span class=\\\"js\\\">isActiveCondition</span>}\\n        <span class=\\\"attr\\\">dense</span>\\n      /&gt;\\n    &lt;/<span class=\\\"val\\\">NavBarHeading</span>&gt;\\n  &lt;/<span class=\\\"val\\\">NavBarGroup</span>&gt;\\n\\n  <NavbarGroup align=\\\"center\\\">\\n    <Link\\n      to=\\\"/components/navbar/dashboard\\\"\\n      style={{ textDecoration: \\\"none\\\" }}\\n    >\\n      {view === \\\"filled\\\" ? (\\n        <CustomButton\\n          view=\\\"flat\\\"\\n          color=\").concat(color, \"\\n          text=\\\"Dashboard\\\"\\n          device=\").concat(type, \"\\n          active={location.pathname.match(\\\"dashboard\\\") && true}\\n          dense={type === \\\"desktop\\\" ? false : true}\\n        />\\n      ) : (\\n        <Button\\n          type=\\\"default\\\"\\n          view={view === \\\"smooth\\\" ? view : \\\"flat\\\"}\\n          color=\").concat(color, \"\\n          text=\\\"Dashboard\\\"\\n          active={location.pathname.match(\\\"dashboard\\\") && true}\\n          dense={type === \\\"desktop\\\" ? false : true}\\n        />\\n      )}\\n    </Link>\\n    <Link\\n      to=\\\"/components/navbar/messages\\\"\\n      style={{ textDecoration: \\\"none\\\" }}\\n    >\\n      {view === \\\"filled\\\" ? (\\n        <CustomButton\\n          view=\\\"flat\\\"\\n          color=\").concat(color, \"\\n          text=\\\"Messages\\\"\\n          device=\").concat(type, \"\\n          active={location.pathname.match(\\\"messages\\\") && true}\\n          dense={type === \\\"desktop\\\" ? false : true}\\n        />\\n      ) : (\\n        <Button\\n          type=\\\"default\\\"\\n          view={view === \\\"smooth\\\" ? view : \\\"flat\\\"}\\n          color=\").concat(color, \"\\n          text=\\\"Messages\\\"\\n          active={location.pathname.match(\\\"messages\\\") && true}\\n          dense={type === \\\"desktop\\\" ? false : true}\\n        />\\n      )}\\n    </Link>\\n    <Link\\n      to=\\\"/components/navbar/notifications\\\"\\n      style={{ textDecoration: \\\"none\\\" }}\\n    >\\n      {view === \\\"filled\\\" ? (\\n        <CustomButton\\n          view=\\\"flat\\\"\\n          color=\").concat(color, \"\\n          text=\\\"Notifications\\\"\\n          device=\").concat(type, \"\\n          active={location.pathname.match(\\\"notifications\\\") && true}\\n          dense={type === \\\"desktop\\\" ? false : true}\\n        />\\n      ) : (\\n        <Button\\n          type=\\\"default\\\"\\n          view={view === \\\"smooth\\\" ? view : \\\"flat\\\"}\\n          color=\").concat(color, \"\\n          text=\\\"Notifications\\\"\\n          active={location.pathname.match(\\\"notifications\\\") && true}\\n          dense={type === \\\"desktop\\\" ? false : true}\\n        />\\n      )}\\n    </Link>\\n  </NavbarGroup>\\n  <NavbarGroup align=\\\"right\\\">\\n    <Link\\n      to=\\\"/components/navbar/sign-in\\\"\\n      style={{\\n        textDecoration: \\\"none\\\"\\n      }}\\n    >\\n      <Button\\n        type=\\\"default\\\"\\n        view={view === \\\"filled\\\" ? \\\"smooth\\\" : \\\"outlined\\\"}\\n        color=\").concat(color, \"\\n        text=\\\"Sign In\\\"\\n        style={{ marginLeft: \\\"6px\\\" }}\\n        active={location.pathname.match(\\\"sign-in\\\") && true}\\n        dense={type === \\\"desktop\\\" ? false : true}\\n      />\\n    </Link>\\n    <Link\\n      to=\\\"/components/navbar/register\\\"\\n      style={{\\n        textDecoration: \\\"none\\\"\\n      }}\\n    >\\n      <Button\\n        type=\\\"default\\\"\\n        view=\\\"filled\\\"\\n        color=\").concat(color, \"\\n        text=\\\"Register\\\"\\n        style={{ marginLeft: \\\"1rem\\\" }}\\n        active={location.pathname.match(\\\"register\\\") && true}\\n        dense={type === \\\"desktop\\\" ? false : true}\\n      />\\n    </Link>\\n  </NavbarGroup>\\n</Navbar>\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Navbar/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","view","color","optionalText","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, view, color } = props;\r\n\r\n  const optionalText = (\r\n    <>\r\n      The Navbar API includes three stateless React components:{\" \"}\r\n      <b>NavbarGroup NavbarHeading NavbarDivider</b>\r\n      <pre>\r\n        import NavbarGroup from \"../../core/Navbar/group.jsx\"; <br />\r\n        import NavbarHeading from \"../../core/Navbar/heading.jsx\";\r\n        <br />\r\n        import NavbarDivider from \"../../core/Navbar/divider.jsx\";\r\n      </pre>\r\n      These components are simple containers for their children. Each of them\r\n      supports the full range of HTML <b>div</b> props.\r\n      <br />\r\n      <b>NavbarGroup, NavbarHeading & NavbarDivider</b> components API contains\r\n      only <b>className</b> prop.\r\n      <br />\r\n      <b>NavbarGroup</b> API additional contains <b>align</b> - the side of the\r\n      navbar on which the group should appear (string, can be left, right,\r\n      center ).\r\n    </>\r\n  );\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} text={optionalText} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>desktop</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> desktop | tablet | mobile </b>. The default state is{\" \"}\r\n          <b>desktop</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | raised </b>. The default state is <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"fixedToTop\",\r\n      type: <>boolean</>,\r\n      desc: (\r\n        <>\r\n          Whether this navbar should be fixed to the top of the viewport (using\r\n          CSS position: fixed).\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = ` \r\n&lt;<span class=\"val\">NavBar</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\" <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\" <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n&gt;\r\n  &lt;<span class=\"val\">NavBarGroup</span>&gt;\r\n    &lt;<span class=\"val\">NavBarHeading</span>&gt;\r\n      &lt;<span class=\"val\">Button</span>\r\n        <span class=\"attr\">type</span>={${type === \"mobile\" ? \"icon\" : \"circle\"}</span>}\r\n        <span class=\"attr\">view</span>=\"<span class=\"val\">smooth</span>\"\r\n        <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n        <span class=\"attr\">icon</span>=\"<span class=\"val\">menu</span>\"\r\n        <span class=\"attr\">active</span>={<span class=\"js\">isActiveCondition</span>}\r\n        <span class=\"attr\">dense</span>\r\n      /&gt;\r\n    &lt;/<span class=\"val\">NavBarHeading</span>&gt;\r\n  &lt;/<span class=\"val\">NavBarGroup</span>&gt;\r\n\r\n  <NavbarGroup align=\"center\">\r\n    <Link\r\n      to=\"/components/navbar/dashboard\"\r\n      style={{ textDecoration: \"none\" }}\r\n    >\r\n      {view === \"filled\" ? (\r\n        <CustomButton\r\n          view=\"flat\"\r\n          color=${color}\r\n          text=\"Dashboard\"\r\n          device=${type}\r\n          active={location.pathname.match(\"dashboard\") && true}\r\n          dense={type === \"desktop\" ? false : true}\r\n        />\r\n      ) : (\r\n        <Button\r\n          type=\"default\"\r\n          view={view === \"smooth\" ? view : \"flat\"}\r\n          color=${color}\r\n          text=\"Dashboard\"\r\n          active={location.pathname.match(\"dashboard\") && true}\r\n          dense={type === \"desktop\" ? false : true}\r\n        />\r\n      )}\r\n    </Link>\r\n    <Link\r\n      to=\"/components/navbar/messages\"\r\n      style={{ textDecoration: \"none\" }}\r\n    >\r\n      {view === \"filled\" ? (\r\n        <CustomButton\r\n          view=\"flat\"\r\n          color=${color}\r\n          text=\"Messages\"\r\n          device=${type}\r\n          active={location.pathname.match(\"messages\") && true}\r\n          dense={type === \"desktop\" ? false : true}\r\n        />\r\n      ) : (\r\n        <Button\r\n          type=\"default\"\r\n          view={view === \"smooth\" ? view : \"flat\"}\r\n          color=${color}\r\n          text=\"Messages\"\r\n          active={location.pathname.match(\"messages\") && true}\r\n          dense={type === \"desktop\" ? false : true}\r\n        />\r\n      )}\r\n    </Link>\r\n    <Link\r\n      to=\"/components/navbar/notifications\"\r\n      style={{ textDecoration: \"none\" }}\r\n    >\r\n      {view === \"filled\" ? (\r\n        <CustomButton\r\n          view=\"flat\"\r\n          color=${color}\r\n          text=\"Notifications\"\r\n          device=${type}\r\n          active={location.pathname.match(\"notifications\") && true}\r\n          dense={type === \"desktop\" ? false : true}\r\n        />\r\n      ) : (\r\n        <Button\r\n          type=\"default\"\r\n          view={view === \"smooth\" ? view : \"flat\"}\r\n          color=${color}\r\n          text=\"Notifications\"\r\n          active={location.pathname.match(\"notifications\") && true}\r\n          dense={type === \"desktop\" ? false : true}\r\n        />\r\n      )}\r\n    </Link>\r\n  </NavbarGroup>\r\n  <NavbarGroup align=\"right\">\r\n    <Link\r\n      to=\"/components/navbar/sign-in\"\r\n      style={{\r\n        textDecoration: \"none\"\r\n      }}\r\n    >\r\n      <Button\r\n        type=\"default\"\r\n        view={view === \"filled\" ? \"smooth\" : \"outlined\"}\r\n        color=${color}\r\n        text=\"Sign In\"\r\n        style={{ marginLeft: \"6px\" }}\r\n        active={location.pathname.match(\"sign-in\") && true}\r\n        dense={type === \"desktop\" ? false : true}\r\n      />\r\n    </Link>\r\n    <Link\r\n      to=\"/components/navbar/register\"\r\n      style={{\r\n        textDecoration: \"none\"\r\n      }}\r\n    >\r\n      <Button\r\n        type=\"default\"\r\n        view=\"filled\"\r\n        color=${color}\r\n        text=\"Register\"\r\n        style={{ marginLeft: \"1rem\" }}\r\n        active={location.pathname.match(\"register\") && true}\r\n        dense={type === \"desktop\" ? false : true}\r\n      />\r\n    </Link>\r\n  </NavbarGroup>\r\n</Navbar>\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}