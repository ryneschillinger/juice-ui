{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/ButtonGroup/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color,\n        fill = props.fill,\n        right = props.right;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" default | dense \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"flat\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"data\",\n    type: \"object\",\n    desc: React.createElement(React.Fragment, null, \" \", \"Data object can have next keys:\", \"{ \\n        id:  number,  \\n        text: string,\\n        icon: string | element,\\n        rightIcon: string | element,\\n        isActive: boolean,\\n        onClick: function\\n        }\", \".\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this ButtonGroup should expand to fill its container. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"right\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Right position of ButtonGroup in a container.\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">ButtonGroup</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">items</span>={<span class=\\\"js\\\">ButtonItems</span>}\\n  <span class=\\\"attr\\\">fill</span>=\").concat(fill ? '{<span class=\"bool\">true</span>}' : '{<span class=\"bool\">false</span>}', \"\\n/&gt;\\n<br />\\n<span class=\\\"cmnt\\\">/*** JS DATA ***/</span>\\n<span class=\\\"js\\\">const</span> <span class=\\\"el\\\">ButtonItems</span> = [\\n  {\\n    id: 0,\\n    // text: \\\"First\\\",\\n    icon: \\\"sort-alphabetical\\\",\\n    //rightIcon: \\\"manually-entered-data\\\",\\n    isActive: true,\\n    onClick: () => handleClick(0)\\n  },\\n  {\\n    id: 1,\\n    // text: \\\"Second\\\",\\n    icon: \\\"sort-alphabetical-desc\\\",\\n    //rightIcon: \\\"trending-up\\\",\\n    onClick: () => handleClick(1)\\n    //isActive: false\\n  },\\n  {\\n    id: 2,\\n    text: \\\"Third\\\",\\n    icon: \\\"sort-asc\\\",\\n    //rightIcon: \\\"pin\\\",\\n    onClick: () => handleClick(2)\\n  },\\n  {\\n    id: 3,\\n    text: \\\"Fourth\\\",\\n    //icon: \\\"sort-desc\\\",\\n    rightIcon: \\\"sort-desc\\\",\\n    onClick: () => handleClick(3)\\n  }\\n];\\n\");\n\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\n\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: trimCode(Code),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/ButtonGroup/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","view","color","fill","right","OverviewText","APIData","prop","desc","Code","trimCode","code","replace"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, view, color, fill, right } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> default | dense </b>. The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | flat | smooth | outlined | raised </b>. The default state\r\n          is <b>flat</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"data\",\r\n      type: \"object\",\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          Data object can have next keys:\r\n          {`{ \r\n        id:  number,  \r\n        text: string,\r\n        icon: string | element,\r\n        rightIcon: string | element,\r\n        isActive: boolean,\r\n        onClick: function\r\n        }`}\r\n          .\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this ButtonGroup should expand to fill its container. The\r\n          default state is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"right\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Right position of ButtonGroup in a container.</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">ButtonGroup</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">items</span>={<span class=\"js\">ButtonItems</span>}\r\n  <span class=\"attr\">fill</span>=${fill ? '{<span class=\"bool\">true</span>}' : '{<span class=\"bool\">false</span>}'}\r\n/&gt;\r\n<br />\r\n<span class=\"cmnt\">/*** JS DATA ***/</span>\r\n<span class=\"js\">const</span> <span class=\"el\">ButtonItems</span> = [\r\n  {\r\n    id: 0,\r\n    // text: \"First\",\r\n    icon: \"sort-alphabetical\",\r\n    //rightIcon: \"manually-entered-data\",\r\n    isActive: true,\r\n    onClick: () => handleClick(0)\r\n  },\r\n  {\r\n    id: 1,\r\n    // text: \"Second\",\r\n    icon: \"sort-alphabetical-desc\",\r\n    //rightIcon: \"trending-up\",\r\n    onClick: () => handleClick(1)\r\n    //isActive: false\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"Third\",\r\n    icon: \"sort-asc\",\r\n    //rightIcon: \"pin\",\r\n    onClick: () => handleClick(2)\r\n  },\r\n  {\r\n    id: 3,\r\n    text: \"Fourth\",\r\n    //icon: \"sort-desc\",\r\n    rightIcon: \"sort-desc\",\r\n    onClick: () => handleClick(3)\r\n  }\r\n];\r\n`;\r\n\r\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={trimCode(Code)} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}