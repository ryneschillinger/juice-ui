{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/CheckBox/Checkbox.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Checkbox as CheckboxSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\n/** \r\n  __Component 'Checkbox'__\r\n**/\n\nexport default function Checkbox(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"def\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"flat\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        checked = props.checked,\n        indeterminate = props.indeterminate,\n        label = props.label,\n        margin = props.margin,\n        disabled = props.disabled,\n        helperText = props.helperText,\n        _props$fill = props.fill,\n        fill = _props$fill === void 0 ? false : _props$fill,\n        rtl = props.rtl,\n        _props$right = props.right,\n        right = _props$right === void 0 ? false : _props$right,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"checked\", \"indeterminate\", \"label\", \"margin\", \"disabled\", \"helperText\", \"fill\", \"rtl\", \"right\", \"className\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(\"div\", {\n    className: cx(Type[\"container\"], View[\"container\"], checked && View[\"checked\"], disabled && View[\"disabled\"], fill && Type[\"fill\"], Color[color]),\n    style: margin && {\n      margin: margin\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(CheckboxSource, Object.assign({}, restProps, {\n    className: cx(Type[type], View[view], Color[color], checked && Type[\"checked\"], checked && View[\"checked\"], disabled && View[\"disabled\"], helperText && Type[\"with_helper\"], rtl && Type[\"rtl\"], right && Type[\"right\"], indeterminate && View[\"indeterminate\"], type === \"def\" && Type[\"large\"], className),\n    checked: checked ? true : false,\n    indeterminate: indeterminate ? true : false,\n    disabled: disabled,\n    alignIndicator: right && \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: cx(Type[\"box_layout\"], View[\"box_layout\"]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: cx(helperText && Type[\"helperBox\"], disabled && View[\"disabled\"], Type[\"text\"]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, label, helperText && React.createElement(\"div\", {\n    className: cx(Type[\"helperText\"], View[\"helperText\"]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, helperText)))));\n}\nCheckbox.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense`\r\n   * Default value (if undefined): `def` `\r\n   */\n  type: PropTypes.oneOf([\"def\", \"dense\"]),\n\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `flat` `\r\n   */\n  view: PropTypes.oneOf([\"flat\", \"smooth\", \"outlined\", \"raised\"]),\n\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * Whether the control is checked.\r\n   */\n  checked: PropTypes.bool,\n\n  /**\r\n   * Text label for the control. This prop actually supports JSX elements.\r\n   */\n  label: PropTypes.string,\n\n  /**\r\n   * If `true`, the component will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Whether this checkbox is indeterminate\r\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\r\n   * Second line text\r\n   */\n  helperText: PropTypes.string,\n\n  /**\r\n   * RTL text\r\n   */\n  rtl: PropTypes.bool,\n\n  /**\r\n   * Alignment of the indicator within container.\r\n   */\n  right: PropTypes.bool,\n\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\n  fill: PropTypes.bool,\n\n  /**\r\n   * Event handler invoked when input value is changed.\r\n   */\n  onChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/CheckBox/Checkbox.jsx"],"names":["React","cx","PropTypes","Checkbox","CheckboxSource","Type","View","Color","ThemeContext","props","type","view","color","checked","indeterminate","label","margin","disabled","helperText","fill","rtl","right","className","restProps","dark","propTypes","oneOf","bool","string","onChange","func"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Checkbox as CheckboxSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\n/** \r\n  __Component 'Checkbox'__\r\n**/\r\n\r\nexport default function Checkbox(props) {\r\n  const {\r\n    type = \"def\",\r\n    view = \"flat\",\r\n    color = \"default\",\r\n    checked,\r\n    indeterminate,\r\n    label,\r\n    margin,\r\n    disabled,\r\n    helperText,\r\n    fill = false,\r\n    rtl,\r\n    right = false,\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <div\r\n          className={cx(\r\n            Type[\"container\"],\r\n            View[\"container\"],\r\n            checked && View[\"checked\"],\r\n            disabled && View[\"disabled\"],\r\n            fill && Type[\"fill\"],\r\n            Color[color]\r\n          )}\r\n          style={margin && { margin: margin }}\r\n        >\r\n          <CheckboxSource\r\n            {...restProps}\r\n            className={cx(\r\n              Type[type],\r\n              View[view],\r\n              Color[color],\r\n              checked && Type[\"checked\"],\r\n              checked && View[\"checked\"],\r\n              disabled && View[\"disabled\"],\r\n              helperText && Type[\"with_helper\"],\r\n              rtl && Type[\"rtl\"],\r\n              right && Type[\"right\"],\r\n              indeterminate && View[\"indeterminate\"],\r\n              type === \"def\" && Type[\"large\"],\r\n              className\r\n            )}\r\n            checked={checked ? true : false}\r\n            indeterminate={indeterminate ? true : false}\r\n            disabled={disabled}\r\n            alignIndicator={right && \"right\"}\r\n          >\r\n            <div className={cx(Type[\"box_layout\"], View[\"box_layout\"])} />\r\n            <div\r\n              className={cx(\r\n                helperText && Type[\"helperBox\"],\r\n                disabled && View[\"disabled\"],\r\n                Type[\"text\"]\r\n              )}\r\n            >\r\n              {label}\r\n              {helperText && (\r\n                <div className={cx(Type[\"helperText\"], View[\"helperText\"])}>\r\n                  {helperText}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CheckboxSource>\r\n        </div>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nCheckbox.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `dense`\r\n   * Default value (if undefined): `def` `\r\n   */\r\n  type: PropTypes.oneOf([\"def\", \"dense\"]),\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `flat` `\r\n   */\r\n  view: PropTypes.oneOf([\"flat\", \"smooth\", \"outlined\", \"raised\"]),\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * Whether the control is checked.\r\n   */\r\n  checked: PropTypes.bool,\r\n  /**\r\n   * Text label for the control. This prop actually supports JSX elements.\r\n   */\r\n  label: PropTypes.string,\r\n  /**\r\n   * If `true`, the component will be disabled.\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * Whether this checkbox is indeterminate\r\n   */\r\n  indeterminate: PropTypes.bool,\r\n  /**\r\n   * Second line text\r\n   */\r\n  helperText: PropTypes.string,\r\n  /**\r\n   * RTL text\r\n   */\r\n  rtl: PropTypes.bool,\r\n  /**\r\n   * Alignment of the indicator within container.\r\n   */\r\n  right: PropTypes.bool,\r\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\r\n  fill: PropTypes.bool,\r\n  /**\r\n   * Event handler invoked when input value is changed.\r\n   */\r\n  onChange: PropTypes.func\r\n};\r\n"]},"metadata":{},"sourceType":"module"}