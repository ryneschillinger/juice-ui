{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/DefaultInput/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const isDense = props.isDense,\n        isPass = props.isPass,\n        view = props.view,\n        isClear = props.isClear,\n        isSuccess = props.isSuccess,\n        isError = props.isError,\n        isFill = props.isFill;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: \"DefaultInput\",\n    folder: \"Inputs/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"smooth\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \" smooth | outlined | raised | filled \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"smooth\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"primary\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \" primary | default\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"primary\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"label\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Label text.\")\n  }, {\n    prop: \"value\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Form value of the input, for controlled usage.\")\n  }, {\n    prop: \"placeholder\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Placeholder text in the absence of any value.\")\n  }, {\n    prop: \"errorHelperText\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Helper text.\")\n  }, {\n    prop: \"clearButton\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Use or not clear button (cross icon) to clear value.\")\n  }, {\n    prop: \"success\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Component success state.\")\n  }, {\n    prop: \"error\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Component error state.\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should expand to fill its container. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }];\n  /** Code source */\n\n  const Code = \" \\n  < Input\\n      <i>type</i> = '\".concat(isPass ? \"password\" : \"text\", \"' \\n      <i>view</i> = '\").concat(view, \"' \\n      <i>dense</i> = { \").concat(isDense ? \"true\" : \"false\", \" }\\n      <i>color</i> = 'primary' \\n      <i>label</i> = 'Label'\\n      <i>value</i> = 'Value'\\n      <i>placeholder</i> = 'Placeholder'\\n      <i>clearButton</i> = { \").concat(isClear ? \"true\" : \"false\", \" }\\n      <i>success</i> = { \").concat(isSuccess ? \"true\" : \"false\", \" }\\n      <i>error</i> = { \").concat(isError ? \"true\" : \"false\", \" }\\n      <i>fill</i> = { \").concat(isFill ? \"true\" : \"false\", \" }\\n      <i>errorHelperText</i> = \").concat(isError ? \"'This person does not exist'\" : \"{ null }\", \"\\n  / >\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/DefaultInput/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","isDense","isPass","view","isClear","isSuccess","isError","isFill","OverviewText","APIData","prop","type","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { isDense, isPass, view, isClear, isSuccess, isError, isFill } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = (\r\n    <OverviewTemplate name={\"DefaultInput\"} folder=\"Inputs/\" />\r\n  );\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>smooth</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:\r\n          <b> smooth | outlined | raised | filled </b>. The default state is{\" \"}\r\n          <b>smooth</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>primary</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b> primary | default</b>. The default state is <b>primary</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"label\",\r\n      type: <>string</>,\r\n      desc: <>Label text.</>\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: <>string</>,\r\n      desc: <>Form value of the input, for controlled usage.</>\r\n    },\r\n    {\r\n      prop: \"placeholder\",\r\n      type: <>string</>,\r\n      desc: <>Placeholder text in the absence of any value.</>\r\n    },\r\n    {\r\n      prop: \"errorHelperText\",\r\n      type: <>string</>,\r\n      desc: <>Helper text.</>\r\n    },\r\n    {\r\n      prop: \"clearButton\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Use or not clear button (cross icon) to clear value.</>\r\n    },\r\n    {\r\n      prop: \"success\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Component success state.</>\r\n    },\r\n    {\r\n      prop: \"error\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Component error state.</>\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should expand to fill its container. The default\r\n          state is <b>false</b>.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = ` \r\n  < Input\r\n      <i>type</i> = '${isPass ? \"password\" : \"text\"}' \r\n      <i>view</i> = '${view}' \r\n      <i>dense</i> = { ${isDense ? \"true\" : \"false\"} }\r\n      <i>color</i> = 'primary' \r\n      <i>label</i> = 'Label'\r\n      <i>value</i> = 'Value'\r\n      <i>placeholder</i> = 'Placeholder'\r\n      <i>clearButton</i> = { ${isClear ? \"true\" : \"false\"} }\r\n      <i>success</i> = { ${isSuccess ? \"true\" : \"false\"} }\r\n      <i>error</i> = { ${isError ? \"true\" : \"false\"} }\r\n      <i>fill</i> = { ${isFill ? \"true\" : \"false\"} }\r\n      <i>errorHelperText</i> = ${\r\n        isError ? \"'This person does not exist'\" : \"{ null }\"\r\n      }\r\n  / >\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}