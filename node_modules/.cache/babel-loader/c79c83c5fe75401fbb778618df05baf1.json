{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/Button/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nimport { CodeVal } from \"../api/CodeVal\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color,\n        icon = props.icon,\n        rightIcon = props.rightIcon,\n        fill = props.fill,\n        dis = props.dis,\n        isLoad = props.isLoad,\n        dense = props.dense;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \" default | card | action | circle | icon\"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"text\",\n    type: \"string\",\n    desc: React.createElement(React.Fragment, null, \"Action text. Haven't default state.\")\n  }, {\n    prop: \"dense\",\n    type: \"boolean\",\n    desc: React.createElement(React.Fragment, null, \"Whether this button should use minimal styles.\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should expand to fill its container. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"icon\",\n    type: \"string \",\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon to render before the text. For example,\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"\\\"tick\\\"\"))\n  }, {\n    prop: \"rightIcon\",\n    type: \"string | element\",\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon (or an icon element) to render before the text.\")\n  }, {\n    prop: \"loading\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the button will display a centered loading spinner instead of its contents. The width of the button is not affected by the value of this prop. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the button will be disabled. The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"onClick\",\n    type: \"func\",\n    desc: React.createElement(React.Fragment, null, \"Click event handler.\")\n  }, {\n    prop: \"elementRef\",\n    type: \"any\",\n    desc: React.createElement(React.Fragment, null, \"A ref handler that receives the native HTML element backing this component.\")\n  }];\n  /** Code source */\n\n  const Code = \"\\n&lt;<CodeVal value=\\\"Button\\\" />\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">dense</span>={<span class=\\\"val\\\">\").concat(dense ? \"true\" : \"false\", \"</span>}\\n  \").concat(type !== \"circle\" && type !== \"icon\" ? '<span class=\"attr\">text=</span>\"<span class=\"val\">Show code</span>\"' : '', \"\\n  <span class=\\\"attr\\\">icon=</span>\").concat(type === \"circle\" || type === \"icon\" || icon === true ? '\"<span class=\"val\">plus</span>\"' : '{<span class=\"bool\">false</span>}', \"\\n  <span class=\\\"attr\\\">rightIcon</span>=\").concat(type !== \"circle\" && type !== \"card\" && type !== \"icon\" && rightIcon === true ? '\"<span class=\"val\">history</span>\"' : '{<span class=\"bool\">false</span>}', \"\\n  <span class=\\\"attr\\\">loading</span>=\").concat(isLoad ? '{<span class=\"bool\">true</span}' : '{<span class=\"bool\">false</span>}', \"\\n  <span class=\\\"attr\\\">disabled</span>=\").concat(dis ? '{<span class=\"bool\">true<span>}' : '{<span class=\"bool\">false</span>}', \"\\n  <span class=\\\"attr\\\">fill</span>=\").concat(fill ? '{<span class=\"bool\">true</span>}' : '{<span class=\"bool\">false</span>}', \"\\n/&gt;\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ui-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/demo/Button/api.jsx"],"names":["React","Overview","OverviewTemplate","CodeVal","API","props","name","type","view","color","icon","rightIcon","fill","dis","isLoad","dense","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\nimport { CodeVal } from \"../api/CodeVal\";\r\n\r\nexport const API = props => {\r\n  const {\r\n    name,\r\n    type,\r\n    view,\r\n    color,\r\n    icon,\r\n    rightIcon,\r\n    fill,\r\n    dis,\r\n    isLoad,\r\n    dense\r\n  } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> default | card | action | circle | icon</b>. The default state is{\" \"}\r\n          <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | flat | smooth | outlined | raised </b>. The default state\r\n          is <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"text\",\r\n      type: \"string\",\r\n      desc: <>Action text. Haven't default state.</>\r\n    },\r\n    {\r\n      prop: \"dense\",\r\n      type: \"boolean\",\r\n      desc: <>Whether this button should use minimal styles.</>\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should expand to fill its container. The default\r\n          state is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: \"string \",\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon to render before the text. For example,{\" \"}\r\n          <b>\"tick\"</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"rightIcon\",\r\n      type: \"string | element\",\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon (or an icon element) to render before the\r\n          text.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"loading\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the button will display a centered loading spinner\r\n          instead of its contents. The width of the button is not affected by\r\n          the value of this prop. The default state is <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the button will be disabled. The default state is{\" \"}\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onClick\",\r\n      type: \"func\",\r\n      desc: <>Click event handler.</>\r\n    },\r\n    {\r\n      prop: \"elementRef\",\r\n      type: \"any\",\r\n      desc: (\r\n        <>\r\n          A ref handler that receives the native HTML element backing this\r\n          component.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `\r\n&lt;<CodeVal value=\"Button\" />\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">dense</span>={<span class=\"val\">${dense ? \"true\" : \"false\"}</span>}\r\n  ${type !== \"circle\" && type !== \"icon\" ? '<span class=\"attr\">text=</span>\"<span class=\"val\">Show code</span>\"' : ''}\r\n  <span class=\"attr\">icon=</span>${\r\n    type === \"circle\" || type === \"icon\" || icon === true\r\n      ? '\"<span class=\"val\">plus</span>\"'\r\n      : '{<span class=\"bool\">false</span>}'\r\n  }\r\n  <span class=\"attr\">rightIcon</span>=${\r\n    type !== \"circle\" &&\r\n    type !== \"card\" &&\r\n    type !== \"icon\" &&\r\n    rightIcon === true\r\n      ? '\"<span class=\"val\">history</span>\"'\r\n      : '{<span class=\"bool\">false</span>}'\r\n  }\r\n  <span class=\"attr\">loading</span>=${isLoad ? '{<span class=\"bool\">true</span}' : '{<span class=\"bool\">false</span>}'}\r\n  <span class=\"attr\">disabled</span>=${dis ? '{<span class=\"bool\">true<span>}' : '{<span class=\"bool\">false</span>}'}\r\n  <span class=\"attr\">fill</span>=${fill ? '{<span class=\"bool\">true</span>}' : '{<span class=\"bool\">false</span>}'}\r\n/&gt;`;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}