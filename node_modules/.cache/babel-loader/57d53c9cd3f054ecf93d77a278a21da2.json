{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Dialog/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color,\n        isOpen = props.isOpen,\n        opacity = props.opacity;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" default | dense\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" filled | smooth | raised \"), \". The default state is\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"icon\",\n    type: \"string \",\n    desc: React.createElement(React.Fragment, null, \"Name of a icon to render in the dialog's header. Note that the header will only be rendered if title is provided. For example,\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"\\\"tick\\\"\"))\n  }, {\n    prop: \"title\",\n    type: \"string\",\n    desc: React.createElement(React.Fragment, null, \"A title of the dialog.\")\n  }, {\n    prop: \"text\",\n    type: \"string\",\n    desc: React.createElement(React.Fragment, null, \"Action text. Haven't default state.\")\n  }, {\n    prop: \"backdropOpacity\",\n    type: \"number = 20\",\n    desc: React.createElement(React.Fragment, null, \"Opacity of backdrop. From 0 to 100 with step 10. The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"20\"), \".\")\n  }, {\n    prop: \"leftButton\",\n    type: \"element\",\n    desc: React.createElement(React.Fragment, null, \"A Left button of a dialog.\")\n  }, {\n    prop: \"rightButton\",\n    type: \"element\",\n    desc: React.createElement(React.Fragment, null, \"A Right button of a dialog.\")\n  }, {\n    prop: \"isOpen\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Toggles the visibility of the overlay and its children. This prop is required because the component is controlled.\")\n  }, {\n    prop: \"onClose\",\n    type: \"func\",\n    desc: React.createElement(React.Fragment, null, \"A callback that is invoked when user interaction causes the overlay to close, such as clicking on the overlay or pressing the esc key.\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">Button</span>\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">filled</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">primary</span>\\\"\\n  <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">Open Dialog</span>\\\"\\n  <span class=\\\"attr\\\">onClick</span>={<span class=\\\"data\\\">() => setOpen(true)</span>}\\n/&gt\\n&lt;<span class=\\\"val\\\">Dialog</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">icon</span>=\\\"<span class=\\\"val\\\">info-sign</span>\\\"\\n  <span class=\\\"attr\\\">title</span>=\\\"<span class=\\\"val\\\">This is a dialog</span>\\\"\\n  <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">text</span>\\\"\\n  <span class=\\\"attr\\\">backdropOpacity</span>={<span class=\\\"num\\\">\").concat(opacity, \"</span>}\\n  <span class=\\\"attr\\\">leftButton</span>={\\n    &lt;<span class=\\\"val\\\">Button</span>\\n      <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">default</span>\\\"\\n      <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view === \"filled\" ? \"filled\" : view === \"raised\" ? \"flat\" : \"outlined\", \"</span>\\\"\\n      <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n      <span class=\\\"attr\\\">dense</span>={<span class=\\\"bool\\\">\").concat(type === \"dense\" ? true : false, \"</span>}\\n      <span class=\\\"attr\\\">onClick</span>={<span class=\\\"data\\\">() =&gt setOpen(false)</span>}\\n      <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">Maybe next time</span>\\\"\\n    /&gt\\n  }\\n  rightButton={\\n    &lt; Button\\n      type=\\\"default\\\"\\n      view=\\\"\").concat(view === \"filled\" ? \"raised\" : view === \"raised\" ? \"smooth\" : \"filled\", \"\\\"\\n      color=\\\"\").concat(color, \"\\\"\\n      dense={ \").concat(type === \"dense\" ? true : false, \" }\\n      onClick={ () =&gt setOpen(false) }\\n      text=\\\"Sure, continue!\\\"\\n    / &gt\\n  }\\n  isOpen={ \").concat(isOpen, \" }\\n  onClose={ () =&gt setOpen(false) }\\n/&gt\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Dialog/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","view","color","isOpen","opacity","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, view, color, isOpen, opacity } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:\r\n          <b> default | dense</b>. The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:\r\n          <b> filled | smooth | raised </b>. The default state is\r\n          <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: \"string \",\r\n      desc: (\r\n        <>\r\n          Name of a icon to render in the dialog's header. Note that the header\r\n          will only be rendered if title is provided. For example,\r\n          <b>\"tick\"</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"title\",\r\n      type: \"string\",\r\n      desc: <>A title of the dialog.</>\r\n    },\r\n    {\r\n      prop: \"text\",\r\n      type: \"string\",\r\n      desc: <>Action text. Haven't default state.</>\r\n    },\r\n    {\r\n      prop: \"backdropOpacity\",\r\n      type: \"number = 20\",\r\n      desc: (\r\n        <>\r\n          Opacity of backdrop. From 0 to 100 with step 10. The default state is{\" \"}\r\n          <b>20</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"leftButton\",\r\n      type: \"element\",\r\n      desc: <>A Left button of a dialog.</>\r\n    },\r\n    {\r\n      prop: \"rightButton\",\r\n      type: \"element\",\r\n      desc: <>A Right button of a dialog.</>\r\n    },\r\n    {\r\n      prop: \"isOpen\",\r\n      type: <>boolean</>,\r\n      desc: (\r\n        <>\r\n          Toggles the visibility of the overlay and its children. This prop is\r\n          required because the component is controlled.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onClose\",\r\n      type: \"func\",\r\n      desc: (\r\n        <>\r\n          A callback that is invoked when user interaction causes the overlay to\r\n          close, such as clicking on the overlay or pressing the esc key.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">Button</span>\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">filled</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">primary</span>\"\r\n  <span class=\"attr\">text</span>=\"<span class=\"val\">Open Dialog</span>\"\r\n  <span class=\"attr\">onClick</span>={<span class=\"data\">() => setOpen(true)</span>}\r\n/&gt\r\n&lt;<span class=\"val\">Dialog</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">icon</span>=\"<span class=\"val\">info-sign</span>\"\r\n  <span class=\"attr\">title</span>=\"<span class=\"val\">This is a dialog</span>\"\r\n  <span class=\"attr\">text</span>=\"<span class=\"val\">text</span>\"\r\n  <span class=\"attr\">backdropOpacity</span>={<span class=\"num\">${opacity}</span>}\r\n  <span class=\"attr\">leftButton</span>={\r\n    &lt;<span class=\"val\">Button</span>\r\n      <span class=\"attr\">type</span>=\"<span class=\"val\">default</span>\"\r\n      <span class=\"attr\">view</span>=\"<span class=\"val\">${\r\n        view === \"filled\"\r\n          ? \"filled\"\r\n          : view === \"raised\"\r\n          ? \"flat\"\r\n          : \"outlined\"\r\n      }</span>\"\r\n      <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n      <span class=\"attr\">dense</span>={<span class=\"bool\">${type === \"dense\" ? true : false}</span>}\r\n      <span class=\"attr\">onClick</span>={<span class=\"data\">() =&gt setOpen(false)</span>}\r\n      <span class=\"attr\">text</span>=\"<span class=\"val\">Maybe next time</span>\"\r\n    /&gt\r\n  }\r\n  rightButton={\r\n    &lt; Button\r\n      type=\"default\"\r\n      view=\"${\r\n        view === \"filled\"\r\n          ? \"raised\"\r\n          : view === \"raised\"\r\n          ? \"smooth\"\r\n          : \"filled\"\r\n      }\"\r\n      color=\"${color}\"\r\n      dense={ ${type === \"dense\" ? true : false} }\r\n      onClick={ () =&gt setOpen(false) }\r\n      text=\"Sure, continue!\"\r\n    / &gt\r\n  }\r\n  isOpen={ ${isOpen} }\r\n  onClose={ () =&gt setOpen(false) }\r\n/&gt`\r\n  ;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}