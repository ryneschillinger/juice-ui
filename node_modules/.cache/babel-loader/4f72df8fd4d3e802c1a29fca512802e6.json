{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/patterns/Radio/demo.jsx\";\nimport React from \"react\"; //import cx from \"classnames\";\n\nimport { HashLink } from \"react-router-hash-link\";\nimport { Label, RadioGroup, Icon } from \"@blueprintjs/core\";\nimport Radio from \"../../../core/Radio\";\nimport CheckBox from \"../../../core/CheckBox\";\nimport Typo from \"../../../core/Typography\";\nimport { SidebarContainer } from \"../../components/SidebarContainer\";\nimport { CustomScrollbar } from \"../../components/CustomScrollbar\";\nimport StyleGrid from \"../../styles/style.module.css\";\nimport { PatternListItem } from \"../PatternListItem\";\nimport { PatternLink } from \"../PatternLink\";\nimport styles from \"../style.module.css\";\nimport DemoAppStyle from \"../../styles/style.module.css\";\n\nconst DemoStart = props => {\n  React.useEffect(() => {\n    document.title = \"React Design System 2.0 | Getting Started\";\n    document.getElementsByTagName(\"META\")[\"description\"].content = \"Ready-to-use React JS componentsfor save your time. Installation guide.\";\n  });\n  return React.createElement(\"div\", {\n    className: DemoAppStyle[\"content-container\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: DemoAppStyle[\"content-component\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Typo, {\n    type: \"h3\",\n    className: styles.h4_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Radio Button\"), React.createElement(Typo, {\n    className: styles.text,\n    type: \"body\",\n    large: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"With a radio button, users make a choice among a set of mutually exclusive, related options. Users can choose one and only one option. Radio buttons are so called because they function like the channel presets on radios.\"), React.createElement(\"div\", {\n    className: styles.patternExample,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(RadioGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"link\",\n    checked: true,\n    label: \"Display as a link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"menu\",\n    checked: false,\n    label: \"Display as a menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"dont\",\n    checked: false,\n    label: \"Don't display this item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }))), React.createElement(Typo, {\n    className: styles.patternExampleCaption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"A typical group of radio buttons.\"), React.createElement(Typo, {\n    className: styles.text,\n    style: {\n      marginBottom: \"1rem\"\n    },\n    type: \"body\",\n    large: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"A group of radio buttons behaves like a single control. Only the selected choice is accessible using the Tab key, but users can cycle through the group using the arrow keys.\"), React.createElement(\"div\", {\n    id: \"rightControl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Typo, {\n    type: \"h5\",\n    colorStep: 80,\n    className: styles.sub_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Is this the right control to use?\"), React.createElement(Typo, {\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"To decide, consider these questions:\", React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(PatternListItem, {\n    title: \"Is the control used to choose one option from a set of mutually exclusive choices?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"If not, use another control. To choose multiple options, use\", React.createElement(PatternLink, {\n    url: \"/components/checkbox\",\n    text: \"checkboxes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), \"or a\", React.createElement(PatternLink, {\n    url: \"/components/select-multi\",\n    text: \"multi-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), \"instead.\"), React.createElement(PatternListItem, {\n    title: \"Is the number of options between two and seven?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Since the screen space used is proportional to the number of options, keep the number of options in a group between two and seven. For eight or more options, use a\", React.createElement(PatternLink, {\n    url: \"/components/select-default\",\n    text: \"select list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), \".\"), React.createElement(PatternListItem, {\n    title: \"Would a check box be a better choice?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"If there are only two options, you could use a single\", React.createElement(PatternLink, {\n    url: \"/components/checkbox\",\n    text: \"check box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), \"instead. However, check boxes are suitable only for turning a single option on or off, whereas radio buttons can be used for completely different alternatives. If both solutions are possible:\", React.createElement(\"ul\", {\n    className: styles.nestedList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Use radio buttons if the meaning of the cleared check box isn't immediately obvious.\", React.createElement(\"div\", {\n    style: {\n      margin: \"1rem 0 0.5rem 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"cross\",\n    iconSize: 20,\n    color: \"var(--red50)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \" Incorrect:\")), React.createElement(\"div\", {\n    className: styles.patternExampleIncorrect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(CheckBox, {\n    type: \"def\",\n    color: \"primary\",\n    view: \"flat\",\n    checked: false,\n    label: \"Landscape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      margin: \"1rem 0 0.5rem 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"tick\",\n    iconSize: 20,\n    color: \"var(--green50)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \" Correct:\")), React.createElement(\"div\", {\n    className: styles.patternExampleCorrect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(RadioGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"landscape\",\n    checked: true,\n    label: \"Landscape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"portrait\",\n    checked: false,\n    label: \"Portrait\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }))), React.createElement(Typo, {\n    className: styles.patternExampleCaption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"In the correct example, the choices are not opposites so radio buttons are the better choice.\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Use radio buttons on wizard pages to make the alternatives clear, even if a check box is otherwise acceptable.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Use radio buttons if you have enough screen space and the options are important enough to be a good use of that screen space. Otherwise, use a check box or drop-down list.\", React.createElement(\"div\", {\n    style: {\n      margin: \"1rem 0 0.5rem 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"cross\",\n    iconSize: 20,\n    color: \"var(--red50)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \" Incorrect:\")), React.createElement(\"div\", {\n    className: styles.patternExampleIncorrect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(RadioGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"show\",\n    checked: true,\n    label: \"Show this message again\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"dont\",\n    checked: false,\n    label: \"Don't show this message again\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }))), React.createElement(Typo, {\n    className: styles.patternExampleCaption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"In this example, the options aren't important enough to use radio buttons.\"), React.createElement(\"div\", {\n    style: {\n      margin: \"1rem 0 0.5rem 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"tick\",\n    iconSize: 20,\n    color: \"var(--green50)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \" Correct:\")), React.createElement(\"div\", {\n    className: styles.patternExampleCorrect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(CheckBox, {\n    type: \"def\",\n    color: \"primary\",\n    view: \"flat\",\n    checked: false,\n    label: \"Don't show this message again\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })), React.createElement(Typo, {\n    className: styles.patternExampleCaption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"In this example, a check box is an efficient use of screen space for this peripheral option.\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Use a check box if there other check boxes on the page.\")))))), React.createElement(\"div\", {\n    id: \"guidelines\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(Typo, {\n    type: \"h5\",\n    colorStep: 80,\n    className: styles.sub_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Guidelines\"), React.createElement(Typo, {\n    type: \"h6\",\n    colorStep: 60,\n    className: styles.sub_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"General\"), React.createElement(Typo, {\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(PatternListItem, {\n    title: \"List the options in a logical order,\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"such as most likely to be selected to least, simplest operation to most complex, or least risk to most. Alphabetical ordering is not recommended because it is language dependent and therefore not localizable.\"), React.createElement(PatternListItem, {\n    title: \"If none of the options is a valid choice, add another option to reflect this choice,\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"such as None or Does not apply.\"), React.createElement(PatternListItem, {\n    title: \"Reconsider using group boxes to organize groups of radio buttons.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"This often results in unnecessary screen clutter.\"), React.createElement(PatternListItem, {\n    title: \"Don't use radio button labels as group box labels.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }), React.createElement(PatternListItem, {\n    title: \"Don't use the selection of a radio button to:\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"Perform commands.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"Display other windows, such as a dialog box to gather more input.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"Dynamically show or hide other controls related to the selected control (screen readers cannot detect such events). However, you can change text dynamically based on the selection.\"))))), React.createElement(Typo, {\n    type: \"h6\",\n    colorStep: 60,\n    className: styles.sub_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \"Subordinate Controls\"), React.createElement(Typo, {\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"Place subordinate controls to the right of or below (indented, flush with the radio button label) the radio button and its label. End the radio button label with a colon.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \"In this example, the radio button and its subordinate control share the radio button label and its access key. In this case, the arrow keys move focus from the radio button to its subordinate text box.\")), React.createElement(PatternListItem, {\n    title: \"Leave dependent editable text boxes and drop-down lists enabled if they share the radio button's label.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, \"When users type or paste anything into the box, select the corresponding option automatically. Doing so simplifies the interaction.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"In this example, entering a page number automatically selects Pages.\")), React.createElement(PatternListItem, {\n    title: \"Avoid nesting radio buttons with other radio buttons or check boxes.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, \"If possible, keep all the options at the same level.\"), React.createElement(\"div\", {\n    style: {\n      margin: \"1rem 0 0.5rem 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"tick\",\n    iconSize: 20,\n    color: \"var(--green50)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, \" Correct:\")), React.createElement(\"div\", {\n    className: styles.patternExampleCorrect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(RadioGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"win\",\n    checked: false,\n    label: \"Let Internet Explorer determine how pop-ups should open\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"lin\",\n    checked: true,\n    label: \"Always open pop-ups in a new window\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"and\",\n    checked: false,\n    label: \"Always open pop-ups in a new tab\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }))), React.createElement(Typo, {\n    className: styles.patternExampleCaption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, \"In this example, the options are at the same level.\"), React.createElement(\"div\", {\n    style: {\n      margin: \"1rem 0 0.5rem 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    icon: \"cross\",\n    iconSize: 20,\n    color: \"var(--red50)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \" Incorrect:\")), React.createElement(\"div\", {\n    className: styles.patternExampleIncorrect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(RadioGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"win\",\n    checked: false,\n    label: \"Let Internet Explorer determine how pop-ups should open\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"lin\",\n    checked: true,\n    label: \"Always open pop-ups:\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"1rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"and\",\n    checked: false,\n    label: \"In a new window\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }), React.createElement(Radio, {\n    type: \"def\",\n    color: \"primary\",\n    value: \"and\",\n    checked: false,\n    label: \"In a new tab\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  })))), React.createElement(Typo, {\n    className: styles.patternExampleCaption,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, \"In this example, using nested options adds unnecessary complexity.\")), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, \"If you do nest radio buttons with other radio buttons or check boxes, \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, \"disable these subordinate controls until the high-level option is selected\"), \". Doing so avoids confusion about the meaning of the subordinate controls.\")))), React.createElement(\"div\", {\n    id: \"labels\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }, React.createElement(Typo, {\n    type: \"h5\",\n    colorStep: 80,\n    className: styles.sub_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332\n    },\n    __self: this\n  }, \"Labels\"), React.createElement(Typo, {\n    type: \"h6\",\n    colorStep: 60,\n    className: styles.sub_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, \"Radio button labels\"), React.createElement(Typo, {\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344\n    },\n    __self: this\n  }, \"Use sentence-style capitalization.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, \"Write the label as a phrase, not as a sentence, and use no ending punctuation.\", React.createElement(\"ul\", {\n    className: styles.nestedList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349\n    },\n    __self: this\n  }, React.createElement(PatternListItem, {\n    title: \"Exception:\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, \"If a radio button label also labels a subordinate control that follows it, end the label with a colon.\"))), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376\n    },\n    __self: this\n  }, \"Label every radio button.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379\n    },\n    __self: this\n  }, \"Label every radio button.\")))), React.createElement(\"div\", {\n    id: \"documentation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, React.createElement(Typo, {\n    type: \"h5\",\n    colorStep: 80,\n    className: styles.sub_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }, \"Documentation\"), React.createElement(Typo, {\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }, \"When referring to radio buttons:\", React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }, React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394\n    },\n    __self: this\n  }, \"Use the exact label text, including its capitalization, but don't include the access key underscore or colon.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    },\n    __self: this\n  }, \"In programming and other technical documentation, refer to radio buttons as radio buttons. Everywhere else use option buttons, especially in user documentation.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400\n    },\n    __self: this\n  }, \"To describe user interaction, use click.\"), React.createElement(PatternListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403\n    },\n    __self: this\n  }, \"When possible, format the label using bold text. Otherwise, put the label in quotation marks only if required to prevent confusion.\"))), React.createElement(Typo, {\n    className: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408\n    },\n    __self: this\n  }, \"Example: Click \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409\n    },\n    __self: this\n  }, \"Current page\"), \", and then click \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409\n    },\n    __self: this\n  }, \"OK\"), \".\"))), React.createElement(SidebarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: DemoAppStyle[\"right_sidebar\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417\n    },\n    __self: this\n  }, React.createElement(CustomScrollbar, {\n    autoHide: true,\n    autoHideTimeout: 2000,\n    hideTracksWhenNotNeeded: true,\n    renderThumbHorizontal: () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      });\n    },\n    renderTrackHorizontal: () => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: StyleGrid[\"demo-props\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428\n    },\n    __self: this\n  }, \"In this section:\"), React.createElement(HashLink, {\n    to: \"#rightControl\",\n    className: styles.sidebarLink,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429\n    },\n    __self: this\n  }, \"Is this the right control to use?\"), React.createElement(HashLink, {\n    to: \"#guidelines\",\n    className: styles.sidebarLink,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432\n    },\n    __self: this\n  }, \"Guidelines\"), React.createElement(HashLink, {\n    to: \"#labels\",\n    className: styles.sidebarLink,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435\n    },\n    __self: this\n  }, \"Labels\"), React.createElement(HashLink, {\n    to: \"#documentation\",\n    className: styles.sidebarLink,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438\n    },\n    __self: this\n  }, \"Documentation\"))))));\n};\n\nexport default DemoStart;","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/patterns/Radio/demo.jsx"],"names":["React","HashLink","Label","RadioGroup","Icon","Radio","CheckBox","Typo","SidebarContainer","CustomScrollbar","StyleGrid","PatternListItem","PatternLink","styles","DemoAppStyle","DemoStart","props","useEffect","document","title","getElementsByTagName","content","h4_title","text","patternExample","patternExampleCaption","marginBottom","sub_title","nestedList","margin","patternExampleIncorrect","patternExampleCorrect","paddingLeft","sidebarLink"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n//import cx from \"classnames\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport { Label, RadioGroup, Icon } from \"@blueprintjs/core\";\r\nimport Radio from \"../../../core/Radio\";\r\nimport CheckBox from \"../../../core/CheckBox\";\r\nimport Typo from \"../../../core/Typography\";\r\nimport { SidebarContainer } from \"../../components/SidebarContainer\";\r\nimport { CustomScrollbar } from \"../../components/CustomScrollbar\";\r\nimport StyleGrid from \"../../styles/style.module.css\";\r\nimport { PatternListItem } from \"../PatternListItem\";\r\nimport { PatternLink } from \"../PatternLink\";\r\nimport styles from \"../style.module.css\";\r\nimport DemoAppStyle from \"../../styles/style.module.css\";\r\n\r\nconst DemoStart = props => {\r\n  React.useEffect(() => {\r\n    document.title = `React Design System 2.0 | Getting Started`;\r\n    document.getElementsByTagName(\"META\")[\r\n      \"description\"\r\n    ].content = `Ready-to-use React JS componentsfor save your time. Installation guide.`;\r\n  });\r\n\r\n  return (\r\n    <div className={DemoAppStyle[\"content-container\"]}>\r\n      <div className={DemoAppStyle[\"content-component\"]}>\r\n        <Typo type=\"h3\" className={styles.h4_title}>\r\n          Radio Button\r\n        </Typo>\r\n        <Typo className={styles.text} type=\"body\" large>\r\n          With a radio button, users make a choice among a set of mutually exclusive, related options. Users can choose one and only one option. Radio buttons are so called because they function like the channel presets on radios.\r\n        </Typo>\r\n        <div className={styles.patternExample}>\r\n          <RadioGroup>\r\n            <Radio\r\n              type=\"def\"\r\n              color=\"primary\"\r\n              value=\"link\"\r\n              checked={true}\r\n              label=\"Display as a link\"\r\n            />\r\n            <Radio\r\n              type=\"def\"\r\n              color=\"primary\"\r\n              value=\"menu\"\r\n              checked={false}\r\n              label=\"Display as a menu\"\r\n            />\r\n            <Radio\r\n              type=\"def\"\r\n              color=\"primary\"\r\n              value=\"dont\"\r\n              checked={false}\r\n              label=\"Don't display this item\"\r\n            />\r\n          </RadioGroup>\r\n        </div>\r\n        <Typo className={styles.patternExampleCaption}>\r\n          A typical group of radio buttons.\r\n        </Typo>\r\n        <Typo className={styles.text} style={{ marginBottom: \"1rem\" }} type=\"body\" large>\r\n          A group of radio buttons behaves like a single control. Only the selected choice is accessible using the Tab key, but users can cycle through the group using the arrow keys.\r\n        </Typo>\r\n\r\n        {/* Is this the right control to use? */}\r\n        <div id=\"rightControl\">\r\n          <Typo type=\"h5\" colorStep={80} className={styles.sub_title}>\r\n            Is this the right control to use?\r\n          </Typo>\r\n          <Typo className={styles.text}>\r\n            To decide, consider these questions:\r\n            <ul>\r\n              <PatternListItem\r\n                title=\"Is the control used to choose one option from a set of mutually exclusive choices?\"\r\n              >\r\n                If not, use another control. To choose multiple options, use\r\n                <PatternLink\r\n                  url=\"/components/checkbox\"\r\n                  text=\"checkboxes\"\r\n                />\r\n                or a \r\n                <PatternLink\r\n                  url=\"/components/select-multi\"\r\n                  text=\"multi-select\"\r\n                />\r\n                instead.\r\n              </PatternListItem>\r\n              <PatternListItem title=\"Is the number of options between two and seven?\">\r\n                Since the screen space used is proportional to the number of options, keep the number of options in a group between two and seven. For eight or more options, use a\r\n                <PatternLink\r\n                  url=\"/components/select-default\"\r\n                  text=\"select list\"\r\n                />\r\n                .\r\n              </PatternListItem>\r\n              <PatternListItem title=\"Would a check box be a better choice?\">\r\n                If there are only two options, you could use a single \r\n                <PatternLink\r\n                  url=\"/components/checkbox\"\r\n                  text=\"check box\"\r\n                />\r\n                instead. However, check boxes are suitable only for turning a single option on or off, whereas radio buttons can be used for completely different alternatives. If both solutions are possible:\r\n                <ul className={styles.nestedList}>\r\n                  <li>\r\n                    Use radio buttons if the meaning of the cleared check box isn't immediately obvious.\r\n                    <div style={{ margin: \"1rem 0 0.5rem 0\" }}>\r\n                      <Icon icon=\"cross\" iconSize={20} color=\"var(--red50)\" />\r\n                      <strong> Incorrect:</strong>\r\n                    </div>\r\n                    <div className={styles.patternExampleIncorrect}>\r\n                      <CheckBox\r\n                        type=\"def\"\r\n                        color=\"primary\"\r\n                        view=\"flat\"\r\n                        checked={false}\r\n                        label=\"Landscape\"\r\n                      />\r\n                    </div>\r\n                    <div style={{ margin: \"1rem 0 0.5rem 0\" }}>\r\n                      <Icon icon=\"tick\" iconSize={20} color=\"var(--green50)\" />\r\n                      <strong> Correct:</strong>\r\n                    </div>\r\n                    <div className={styles.patternExampleCorrect}>\r\n                      <RadioGroup>\r\n                        <Radio\r\n                          type=\"def\"\r\n                          color=\"primary\"\r\n                          value=\"landscape\"\r\n                          checked={true}\r\n                          label=\"Landscape\"\r\n                        />\r\n                        <Radio\r\n                          type=\"def\"\r\n                          color=\"primary\"\r\n                          value=\"portrait\"\r\n                          checked={false}\r\n                          label=\"Portrait\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </div>\r\n                    <Typo className={styles.patternExampleCaption}>\r\n                      In the correct example, the choices are not opposites so radio buttons are the better choice.\r\n                    </Typo>\r\n                  </li>\r\n                  <li>\r\n                    Use radio buttons on wizard pages to make the alternatives clear, even if a check box is otherwise acceptable.\r\n                  </li>\r\n                  <li>\r\n                    Use radio buttons if you have enough screen space and the options are important enough to be a good use of that screen space. Otherwise, use a check box or drop-down list.\r\n                    <div style={{ margin: \"1rem 0 0.5rem 0\" }}>\r\n                      <Icon icon=\"cross\" iconSize={20} color=\"var(--red50)\" />\r\n                      <strong> Incorrect:</strong>\r\n                    </div>\r\n                    <div className={styles.patternExampleIncorrect}>\r\n                      <RadioGroup>\r\n                        <Radio\r\n                          type=\"def\"\r\n                          color=\"primary\"\r\n                          value=\"show\"\r\n                          checked={true}\r\n                          label=\"Show this message again\"\r\n                        />\r\n                        <Radio\r\n                          type=\"def\"\r\n                          color=\"primary\"\r\n                          value=\"dont\"\r\n                          checked={false}\r\n                          label=\"Don't show this message again\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </div>\r\n                    <Typo className={styles.patternExampleCaption}>\r\n                      In this example, the options aren't important enough to use radio buttons.\r\n                    </Typo>\r\n                    <div style={{ margin: \"1rem 0 0.5rem 0\" }}>\r\n                      <Icon icon=\"tick\" iconSize={20} color=\"var(--green50)\" />\r\n                      <strong> Correct:</strong>\r\n                    </div>\r\n                    <div className={styles.patternExampleCorrect}>\r\n                      <CheckBox\r\n                        type=\"def\"\r\n                        color=\"primary\"\r\n                        view=\"flat\"\r\n                        checked={false}\r\n                        label=\"Don't show this message again\"\r\n                      />\r\n                    </div>\r\n                    <Typo className={styles.patternExampleCaption}>\r\n                      In this example, a check box is an efficient use of screen space for this peripheral option.\r\n                    </Typo>\r\n                  </li>\r\n                  <li>\r\n                    Use a check box if there other check boxes on the page.\r\n                  </li>\r\n                </ul>\r\n              </PatternListItem>\r\n            </ul>\r\n          </Typo>\r\n        </div>\r\n\r\n        {/* Guidelines */}\r\n        <div id=\"guidelines\">\r\n          <Typo type=\"h5\" colorStep={80} className={styles.sub_title}>\r\n            Guidelines\r\n          </Typo>\r\n          {/* General */}\r\n          <Typo type=\"h6\" colorStep={60} className={styles.sub_title}>\r\n            General\r\n          </Typo>\r\n          <Typo className={styles.text}>\r\n            <ul>\r\n              <PatternListItem title=\"List the options in a logical order,\">\r\n                such as most likely to be selected to least, simplest operation to most complex, or least risk to most. Alphabetical ordering is not recommended because it is language dependent and therefore not localizable.\r\n              </PatternListItem>\r\n              <PatternListItem title=\"If none of the options is a valid choice, add another option to reflect this choice,\">\r\n                such as None or Does not apply.\r\n              </PatternListItem>\r\n              <PatternListItem title=\"Reconsider using group boxes to organize groups of radio buttons.\">\r\n                This often results in unnecessary screen clutter.\r\n              </PatternListItem>\r\n              <PatternListItem title=\"Don't use radio button labels as group box labels.\" />\r\n              <PatternListItem title=\"Don't use the selection of a radio button to:\">\r\n                <ul>\r\n                  <li>Perform commands.</li>\r\n                  <li>Display other windows, such as a dialog box to gather more input.</li>\r\n                  <li>Dynamically show or hide other controls related to the selected control (screen readers cannot detect such events). However, you can change text dynamically based on the selection.</li>\r\n                </ul>\r\n              </PatternListItem>\r\n            </ul>\r\n          </Typo>\r\n          {/* Subordinate Controls */}\r\n          <Typo type=\"h6\" colorStep={60} className={styles.sub_title}>\r\n            Subordinate Controls\r\n          </Typo>\r\n          <Typo className={styles.text}>\r\n            <ul>\r\n              <PatternListItem>\r\n                <p>Place subordinate controls to the right of or below (indented, flush with the radio button label) the radio button and its label. End the radio button label with a colon.</p>\r\n                <p>In this example, the radio button and its subordinate control share the radio button label and its access key. In this case, the arrow keys move focus from the radio button to its subordinate text box.</p>\r\n              </PatternListItem>\r\n              <PatternListItem\r\n                title=\"Leave dependent editable text boxes and drop-down lists enabled if they share the radio button's label.\"\r\n              >\r\n                <p>When users type or paste anything into the box, select the corresponding option automatically. Doing so simplifies the interaction.</p>\r\n                <p>In this example, entering a page number automatically selects Pages.</p>\r\n              </PatternListItem>\r\n              <PatternListItem title=\"Avoid nesting radio buttons with other radio buttons or check boxes.\">\r\n                <p>If possible, keep all the options at the same level.</p>\r\n                <div style={{ margin: \"1rem 0 0.5rem 0\" }}>\r\n                  <Icon icon=\"tick\" iconSize={20} color=\"var(--green50)\" />\r\n                  <strong> Correct:</strong>\r\n                </div>\r\n                <div className={styles.patternExampleCorrect}>\r\n                  <RadioGroup>\r\n                    <Radio\r\n                      type=\"def\"\r\n                      color=\"primary\"\r\n                      value=\"win\"\r\n                      checked={false}\r\n                      label=\"Let Internet Explorer determine how pop-ups should open\"\r\n                    />\r\n                    <Radio\r\n                      type=\"def\"\r\n                      color=\"primary\"\r\n                      value=\"lin\"\r\n                      checked={true}\r\n                      label=\"Always open pop-ups in a new window\"\r\n                    />\r\n                    <Radio\r\n                      type=\"def\"\r\n                      color=\"primary\"\r\n                      value=\"and\"\r\n                      checked={false}\r\n                      label=\"Always open pop-ups in a new tab\"\r\n                    />\r\n                  </RadioGroup>\r\n                </div>\r\n                <Typo className={styles.patternExampleCaption}>\r\n                  In this example, the options are at the same level.\r\n                </Typo>\r\n                <div style={{ margin: \"1rem 0 0.5rem 0\" }}>\r\n                  <Icon icon=\"cross\" iconSize={20} color=\"var(--red50)\" />\r\n                  <strong> Incorrect:</strong>\r\n                </div>\r\n                <div className={styles.patternExampleIncorrect}>\r\n                  <RadioGroup>\r\n                    <Radio\r\n                      type=\"def\"\r\n                      color=\"primary\"\r\n                      value=\"win\"\r\n                      checked={false}\r\n                      label=\"Let Internet Explorer determine how pop-ups should open\"\r\n                    />\r\n                    <Radio\r\n                      type=\"def\"\r\n                      color=\"primary\"\r\n                      value=\"lin\"\r\n                      checked={true}\r\n                      label=\"Always open pop-ups:\"\r\n                    />\r\n                    <div style={{paddingLeft: \"1rem\"}}>\r\n                      <Radio\r\n                        type=\"def\"\r\n                        color=\"primary\"\r\n                        value=\"and\"\r\n                        checked={false}\r\n                        label=\"In a new window\"\r\n                      />\r\n                      <Radio\r\n                        type=\"def\"\r\n                        color=\"primary\"\r\n                        value=\"and\"\r\n                        checked={false}\r\n                        label=\"In a new tab\"\r\n                      />\r\n                    </div>\r\n                  </RadioGroup>\r\n                </div>\r\n                <Typo className={styles.patternExampleCaption}>\r\n                  In this example, using nested options adds unnecessary complexity.\r\n                </Typo>\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                If you do nest radio buttons with other radio buttons or check boxes, <strong>disable these subordinate controls until the high-level option is selected</strong>. Doing so avoids confusion about the meaning of the subordinate controls.\r\n              </PatternListItem>\r\n            </ul>\r\n          </Typo>\r\n        </div>\r\n\r\n        {/* Labels */}\r\n        <div id=\"labels\">\r\n          <Typo type=\"h5\" colorStep={80} className={styles.sub_title}>\r\n            Labels\r\n          </Typo>\r\n          {/* General */}\r\n          <Typo type=\"h6\" colorStep={60} className={styles.sub_title}>\r\n            Radio button labels\r\n          </Typo>\r\n          <Typo className={styles.text}>\r\n            <ul>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Use sentence-style capitalization.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Write the label as a phrase, not as a sentence, and use no ending punctuation.\r\n                <ul className={styles.nestedList}>\r\n                  <PatternListItem title=\"Exception:\">\r\n                    If a radio button label also labels a subordinate control that follows it, end the label with a colon.\r\n                  </PatternListItem>\r\n                </ul>\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                Label every radio button.\r\n              </PatternListItem>\r\n            </ul>\r\n          </Typo>\r\n        </div>\r\n\r\n        {/* Documentation */}\r\n        <div id=\"documentation\">\r\n          <Typo type=\"h5\" colorStep={80} className={styles.sub_title}>\r\n            Documentation\r\n          </Typo>\r\n          <Typo className={styles.text}>\r\n            When referring to radio buttons:\r\n            <ul>\r\n              <PatternListItem>\r\n                Use the exact label text, including its capitalization, but don't include the access key underscore or colon.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                In programming and other technical documentation, refer to radio buttons as radio buttons. Everywhere else use option buttons, especially in user documentation.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                To describe user interaction, use click.\r\n              </PatternListItem>\r\n              <PatternListItem>\r\n                When possible, format the label using bold text. Otherwise, put the label in quotation marks only if required to prevent confusion.\r\n              </PatternListItem>\r\n            </ul>\r\n          </Typo>\r\n          <Typo className={styles.text}>\r\n            Example: Click <strong>Current page</strong>, and then click <strong>OK</strong>.\r\n          </Typo>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {/* Props*/}\r\n      <SidebarContainer>\r\n        <div className={DemoAppStyle[\"right_sidebar\"]}>\r\n          <CustomScrollbar\r\n            autoHide\r\n            autoHideTimeout={2000}\r\n            hideTracksWhenNotNeeded\r\n            renderThumbHorizontal={() => {\r\n              return <div />;\r\n            }}\r\n            renderTrackHorizontal={() => <div />}\r\n          >\r\n            <div className={StyleGrid[\"demo-props\"]}>\r\n              <Label>In this section:</Label>\r\n              <HashLink to=\"#rightControl\" className={styles.sidebarLink}>\r\n                Is this the right control to use?\r\n              </HashLink>\r\n              <HashLink to=\"#guidelines\" className={styles.sidebarLink}>\r\n                Guidelines\r\n              </HashLink>\r\n              <HashLink to=\"#labels\" className={styles.sidebarLink}>\r\n                Labels\r\n              </HashLink>\r\n              <HashLink to=\"#documentation\" className={styles.sidebarLink}>\r\n                Documentation\r\n              </HashLink>\r\n            </div>\r\n          </CustomScrollbar>\r\n        </div>\r\n      </SidebarContainer>\r\n      {/***** */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemoStart;\r\n"]},"metadata":{},"sourceType":"module"}