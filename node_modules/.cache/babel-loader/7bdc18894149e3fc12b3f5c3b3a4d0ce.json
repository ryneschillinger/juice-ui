{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\"; // HACKHACK: these components should go in separate files\n\n/* eslint-disable max-classes-per-file */\n\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { refHandler, setRef } from \"../../common/refs\";\nimport { AbstractButton } from \"./abstractButton\";\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n\n  function Button() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n\n\n    _this.buttonRef = null;\n    _this.handleRef = refHandler(_this, \"buttonRef\", _this.props.elementRef);\n    return _this;\n  }\n\n  Button.prototype.render = function () {\n    return React.createElement(\"button\", __assign({\n      type: \"button\",\n      ref: this.handleRef\n    }, removeNonHTMLProps(this.props), this.getCommonButtonProps()), this.renderChildren());\n  };\n\n  Button.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.elementRef !== this.props.elementRef) {\n      setRef(prevProps.elementRef, null);\n      this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n      setRef(this.props.elementRef, this.buttonRef);\n    }\n  };\n\n  Button.displayName = DISPLAYNAME_PREFIX + \".Button\";\n  return Button;\n}(AbstractButton);\n\nexport { Button };\n\nvar AnchorButton =\n/** @class */\nfunction (_super) {\n  __extends(AnchorButton, _super);\n\n  function AnchorButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n\n\n    _this.buttonRef = null;\n    _this.handleRef = refHandler(_this, \"buttonRef\", _this.props.elementRef);\n    return _this;\n  }\n\n  AnchorButton.prototype.render = function () {\n    var _a = this.props,\n        href = _a.href,\n        _b = _a.tabIndex,\n        tabIndex = _b === void 0 ? 0 : _b;\n    var commonProps = this.getCommonButtonProps();\n    return React.createElement(\"a\", __assign({\n      role: \"button\",\n      ref: this.handleRef\n    }, removeNonHTMLProps(this.props), commonProps, {\n      href: commonProps.disabled ? undefined : href,\n      tabIndex: commonProps.disabled ? -1 : tabIndex\n    }), this.renderChildren());\n  };\n\n  AnchorButton.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.elementRef !== this.props.elementRef) {\n      setRef(prevProps.elementRef, null);\n      this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n      setRef(this.props.elementRef, this.buttonRef);\n    }\n  };\n\n  AnchorButton.displayName = DISPLAYNAME_PREFIX + \".AnchorButton\";\n  return AnchorButton;\n}(AbstractButton);\n\nexport { AnchorButton };","map":null,"metadata":{},"sourceType":"module"}