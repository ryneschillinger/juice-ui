{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Toast/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nimport OverviewAPI from \"../OverviewAPI.jsx\";\nexport const API = props => {\n  const name = props.name,\n        isClose = props.isClose,\n        view = props.view,\n        color = props.color,\n        position = props.position,\n        isIcon = props.isIcon,\n        isAction = props.isAction,\n        timeout = props.timeout;\n  const ToasterAPI = [{\n    prop: \"autoFocus\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether a toast should acquire application focus when it first opens. This is disabled by default so that toasts do not interrupt the user's flow. Note that \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"enforceFocus\"), \" is always disabled for Toasters.\")\n  }, {\n    prop: \"canEscapeKeyClear\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether pressing the esc key should clear all active toasts.\")\n  }, {\n    prop: \"classname\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"A space-delimited list of class names to pass along to a child element.\")\n  }, {\n    prop: \"maxToasts\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"The maximum number of active toasts that can be displayed at once. When the limit is about to be exceeded, the oldest active toast is removed.\")\n  }, {\n    prop: \"position\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Position of Toaster within its container. Possible states: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"bottom | bottom-left | bottom-right | top | top-left | top-right\"), \".\")\n  }];\n  const toastAPIDescription = React.createElement(React.Fragment, null, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Toast\"), \" is an array and has its own specific API.\");\n  const optionalText = React.createElement(React.Fragment, null, \"The way to use the \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Toaster\"), \" component is\", \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"<Toaster ref={ref => ref.show({ ...toast })}/> \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), \"Render a \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Toaster\"), \" element and use the ref prop to access its instance methods.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(OverviewAPI, {\n    title: \"Toaster\",\n    data: ToasterAPI,\n    additionalText: toastAPIDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    text: optionalText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  });\n  /**API */\n\n  const ToastAPI = [{\n    prop: \"action\",\n    type: React.createElement(React.Fragment, null, \"element\"),\n    desc: React.createElement(React.Fragment, null, \"Action rendered as a Button. The toast is dismissed automatically when the user clicks the action button. Omit this prop to omit the action button. Options: \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" href target text \"), \". For example,\", \" \", \" { href: 'https://gum.co/figma2react', target: '_blank', text: <strong>Yum.</strong> }\", \".\")\n  }, {\n    prop: \"classname\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"A space-delimited list of class names to pass along to a child element.\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"icon\",\n    type: React.createElement(React.Fragment, null, \"string | element\"),\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon (or an icon element) to render before the message.\")\n  }, {\n    prop: \"message\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Message to display in the body of the toast. Required.\")\n  }, {\n    prop: \"onDismiss\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Callback invoked when the toast is dismissed, either by the user or by the timeout. The value of the argument indicates whether the toast was closed because the timeout expired.\")\n  }, {\n    prop: \"setRef\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Function to store ref of Toaster\")\n  }, {\n    prop: \"timeout\",\n    type: React.createElement(React.Fragment, null, \"number = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"5000\")),\n    desc: React.createElement(React.Fragment, null, \"Milliseconds to wait before automatically dismissing toast. Providing a value less than or equal to 0 will disable the timeout (this is discouraged).\")\n  }, {\n    prop: \"withoutClose\",\n    type: React.createElement(React.Fragment, null, \"boolean \"),\n    desc: React.createElement(React.Fragment, null, \"To show or not Close button.\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \" filled | smooth | outlined | raised \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }];\n  /** Code source */\n\n  const Code = \"<span class=\\\"cmnt\\\">/*** HTML COMPONENTS ***/</span>\\n&lt;<span class=\\\"el\\\">Button</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">filled</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">primary</span>\\\"\\n  <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">Toast me</span>\\\"\\n  <span class=\\\"attr\\\">onClick</span>={() <span class=\\\"js\\\">=> myRef</span><span class=\\\"act\\\">.show</span></span>(<span class=\\\"js\\\">DemoToast</span>)</span>}\\n/&gt;\\n&lt;<span class=\\\"el\\\">Toaster</span>\\n  <span class=\\\"attr\\\">position</span>=\\\"<span class=\\\"val\\\">\".concat(position, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">setRef</span>={<span class=\\\"act\\\">setRef</span>}\\n  <span class=\\\"attr\\\">withoutClose</span>={<span class=\\\"bool\\\">\").concat(!isClose, \"</span>}\\n  <span class=\\\"attr\\\">maxToasts</span>={<span class=\\\"num\\\">2</span>}\\n/&gt;\\n<br />\\n<span class=\\\"cmnt\\\">/*** TOAST DATA ***/</span>\\n<span class=\\\"js\\\">const</span> <span class=\\\"el\\\">DemoToast</span> = {\\n  <span class=\\\"attr\\\">message</span>: <span class=\\\"val\\\">\\\"Just a toast!\\\"</span>,\\n  \").concat(isIcon ? \"<span class=\\\"attr\\\">icon</span>: &lt;<span class=\\\"val\\\">Icon</span> <span class=\\\"attr\\\">icon</span>=\\\"<span class=\\\"val\\\">info-sign</span>\\\" <span class=\\\"attr\\\">iconSize</span>={<span class=\\\"num\\\">24</span>} /&gt;,\" : '', \"\\n  <span class=\\\"attr\\\">timeout</span>: <span class=\\\"num\\\">\").concat(timeout, \"</span>,\\n  \").concat(isAction ? \"\\n  <span class=\\\"attr\\\">action</span>: \\n    {\\n      <span class=\\\"attr\\\">href</span>: <span class=\\\"val\\\">\\\"https://procatinator.com/\\\"</span>,\\n      <span class=\\\"attr\\\">target</span>: <span class=\\\"val\\\">\\\"_blank\\\"</span>,\\n      <span class=\\\"attr\\\">text</span>: &lt;<span class=\\\"val\\\">strong</span>&gt;Do something.&lt;/<span class=\\\"val\\\">strong</span>&gt;,\\n    }\\n  \" : '', \"\\n};\\n<span class=\\\"js\\\">const</span> [<span class=\\\"js\\\">myRef</span>, <span class=\\\"act\\\">setRef</span>] = <span class=\\\"el\\\">React</span><span class=\\\"act\\\">.useState</span>(<span class=\\\"bool\\\">null</span>);\\n\");\n\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\n\n  return React.createElement(Overview, {\n    title: \"Toast\",\n    overview: OverviewText,\n    apidata: ToastAPI,\n    code: trimCode(Code),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Toast/api.jsx"],"names":["React","Overview","OverviewTemplate","OverviewAPI","API","props","name","isClose","view","color","position","isIcon","isAction","timeout","ToasterAPI","prop","type","desc","toastAPIDescription","optionalText","OverviewText","ToastAPI","Code","trimCode","code","replace"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\nimport OverviewAPI from \"../OverviewAPI.jsx\";\r\n\r\nexport const API = props => {\r\n  const {\r\n    name,\r\n    isClose,\r\n    view,\r\n    color,\r\n    position,\r\n    isIcon,\r\n    isAction,\r\n    timeout\r\n  } = props;\r\n\r\n  const ToasterAPI = [\r\n    {\r\n      prop: \"autoFocus\",\r\n      type: <>boolean</>,\r\n      desc: (\r\n        <>\r\n          Whether a toast should acquire application focus when it first opens. This is disabled by default so that toasts do not interrupt the user's flow. Note that <b>enforceFocus</b> is always disabled for Toasters.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"canEscapeKeyClear\",\r\n      type: <>boolean</>,\r\n      desc: (\r\n        <>\r\n          Whether pressing the esc key should clear all active toasts.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"classname\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          A space-delimited list of class names to pass along to a child element.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"maxToasts\",\r\n      type: <>number</>,\r\n      desc: (\r\n        <>\r\n          The maximum number of active toasts that can be displayed at once. When the limit is about to be exceeded, the oldest active toast is removed.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"position\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          Position of Toaster within its container. Possible states: <b>bottom | bottom-left | bottom-right | top | top-left | top-right</b>.\r\n        </>\r\n      )\r\n    },\r\n  ];\r\n\r\n  const toastAPIDescription = (\r\n    <>\r\n      <br />\r\n      <br />\r\n      <b>Toast</b> is an array and has its own specific API.\r\n    </>\r\n  );\r\n\r\n  const optionalText = (\r\n    <>\r\n      The way to use the <b>Toaster</b> component is{\" \"}\r\n      <b>{\"<Toaster ref={ref => ref.show({ ...toast })}/> \"}</b>\r\n      <br />\r\n      Render a <b>Toaster</b> element and use the ref prop to access its\r\n      instance methods.\r\n      <br />\r\n      <OverviewAPI title=\"Toaster\" data={ToasterAPI} additionalText={toastAPIDescription} />\r\n    </>\r\n  );\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} text={optionalText} />;\r\n\r\n  /**API */\r\n  const ToastAPI = [\r\n    {\r\n      prop: \"action\",\r\n      type: <>element</>,\r\n      desc: (\r\n        <>\r\n          Action rendered as a Button. The toast is dismissed automatically when\r\n          the user clicks the action button. Omit this prop to omit the action\r\n          button. Options: <b> href target text </b>. For example,{\" \"}\r\n          {\r\n            \" { href: 'https://gum.co/figma2react', target: '_blank', text: <strong>Yum.</strong> }\"\r\n          }\r\n          .\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"classname\",\r\n      type: <>string</>,\r\n      desc: (\r\n        <>\r\n          A space-delimited list of class names to pass along to a child element.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: <>string | element</>,\r\n      desc: (\r\n        <>\r\n          Name of a Blueprint UI icon (or an icon element) to render before the\r\n          message.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"message\",\r\n      type: <>string</>,\r\n      desc: <>Message to display in the body of the toast. Required.</>\r\n    },\r\n    {\r\n      prop: \"onDismiss\",\r\n      type: <>func</>,\r\n      desc: (\r\n        <>\r\n          Callback invoked when the toast is dismissed, either by the user or by\r\n          the timeout. The value of the argument indicates whether the toast was\r\n          closed because the timeout expired.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"setRef\",\r\n      type: <>func</>,\r\n      desc: <>Function to store ref of Toaster</>\r\n    },\r\n    {\r\n      prop: \"timeout\",\r\n      type: (\r\n        <>\r\n          number = <i>5000</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Milliseconds to wait before automatically dismissing toast. Providing\r\n          a value less than or equal to 0 will disable the timeout (this is\r\n          discouraged).\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"withoutClose\",\r\n      type: <>boolean </>,\r\n      desc: <>To show or not Close button.</>\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | smooth | outlined | raised </b>. The default state is{\" \"}\r\n          <b>filled</b>.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `<span class=\"cmnt\">/*** HTML COMPONENTS ***/</span>\r\n&lt;<span class=\"el\">Button</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">filled</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">primary</span>\"\r\n  <span class=\"attr\">text</span>=\"<span class=\"val\">Toast me</span>\"\r\n  <span class=\"attr\">onClick</span>={() <span class=\"js\">=> myRef</span><span class=\"act\">.show</span></span>(<span class=\"js\">DemoToast</span>)</span>}\r\n/&gt;\r\n&lt;<span class=\"el\">Toaster</span>\r\n  <span class=\"attr\">position</span>=\"<span class=\"val\">${position}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">setRef</span>={<span class=\"act\">setRef</span>}\r\n  <span class=\"attr\">withoutClose</span>={<span class=\"bool\">${!isClose}</span>}\r\n  <span class=\"attr\">maxToasts</span>={<span class=\"num\">2</span>}\r\n/&gt;\r\n<br />\r\n<span class=\"cmnt\">/*** TOAST DATA ***/</span>\r\n<span class=\"js\">const</span> <span class=\"el\">DemoToast</span> = {\r\n  <span class=\"attr\">message</span>: <span class=\"val\">\"Just a toast!\"</span>,\r\n  ${isIcon ? `<span class=\"attr\">icon</span>: &lt;<span class=\"val\">Icon</span> <span class=\"attr\">icon</span>=\"<span class=\"val\">info-sign</span>\" <span class=\"attr\">iconSize</span>={<span class=\"num\">24</span>} /&gt;,` : ''}\r\n  <span class=\"attr\">timeout</span>: <span class=\"num\">${timeout}</span>,\r\n  ${isAction? `\r\n  <span class=\"attr\">action</span>: \r\n    {\r\n      <span class=\"attr\">href</span>: <span class=\"val\">\"https://procatinator.com/\"</span>,\r\n      <span class=\"attr\">target</span>: <span class=\"val\">\"_blank\"</span>,\r\n      <span class=\"attr\">text</span>: &lt;<span class=\"val\">strong</span>&gt;Do something.&lt;/<span class=\"val\">strong</span>&gt;,\r\n    }\r\n  ` : ''}\r\n};\r\n<span class=\"js\">const</span> [<span class=\"js\">myRef</span>, <span class=\"act\">setRef</span>] = <span class=\"el\">React</span><span class=\"act\">.useState</span>(<span class=\"bool\">null</span>);\r\n`;\r\n\r\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\r\n\r\n  return <Overview title=\"Toast\" overview={OverviewText} apidata={ToastAPI} code={trimCode(Code)} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}