{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { IconSvgPaths16, IconSvgPaths20 } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nexport var IconSize;\n\n(function (IconSize) {\n  IconSize[IconSize[\"STANDARD\"] = 16] = \"STANDARD\";\n  IconSize[IconSize[\"LARGE\"] = 20] = \"LARGE\";\n})(IconSize || (IconSize = {}));\n\nvar Icon =\n/** @class */\nfunction (_super) {\n  __extends(Icon, _super);\n\n  function Icon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Icon.prototype.render = function () {\n    var icon = this.props.icon;\n\n    if (icon == null || typeof icon === \"boolean\") {\n      return null;\n    } else if (typeof icon !== \"string\") {\n      return icon;\n    }\n\n    var _a = this.props,\n        className = _a.className,\n        color = _a.color,\n        htmlTitle = _a.htmlTitle,\n        // eslint-disable-next-line deprecation/deprecation\n    iconSize = _a.iconSize,\n        intent = _a.intent,\n        _b = _a.size,\n        size = _b === void 0 ? iconSize !== null && iconSize !== void 0 ? iconSize : IconSize.STANDARD : _b,\n        title = _a.title,\n        _c = _a.tagName,\n        tagName = _c === void 0 ? \"span\" : _c,\n        htmlprops = __rest(_a, [\"className\", \"color\", \"htmlTitle\", \"iconSize\", \"intent\", \"size\", \"title\", \"tagName\"]); // choose which pixel grid is most appropriate for given icon size\n\n\n    var pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD; // render path elements, or nothing if icon name is unknown.\n\n    var paths = this.renderSvgPaths(pixelGridSize, icon); // eslint-disable-next-line deprecation/deprecation\n\n    var classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n    var viewBox = \"0 0 \" + pixelGridSize + \" \" + pixelGridSize;\n    return React.createElement(tagName, __assign(__assign({}, htmlprops), {\n      \"aria-hidden\": title ? undefined : true,\n      className: classes,\n      title: htmlTitle\n    }), React.createElement(\"svg\", {\n      fill: color,\n      \"data-icon\": icon,\n      width: size,\n      height: size,\n      viewBox: viewBox\n    }, title && React.createElement(\"desc\", null, title), paths));\n  };\n  /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n\n\n  Icon.prototype.renderSvgPaths = function (pathsSize, iconName) {\n    var svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n    var pathStrings = svgPathsRecord[iconName];\n\n    if (pathStrings == null) {\n      return null;\n    }\n\n    return pathStrings.map(function (d, i) {\n      return React.createElement(\"path\", {\n        key: i,\n        d: d,\n        fillRule: \"evenodd\"\n      });\n    });\n  };\n\n  Icon.displayName = DISPLAYNAME_PREFIX + \".Icon\";\n  /** @deprecated use IconSize.STANDARD */\n\n  Icon.SIZE_STANDARD = IconSize.STANDARD;\n  /** @deprecated use IconSize.LARGE */\n\n  Icon.SIZE_LARGE = IconSize.LARGE;\n  Icon = __decorate([polyfill], Icon);\n  return Icon;\n}(AbstractPureComponent2);\n\nexport { Icon };","map":null,"metadata":{},"sourceType":"module"}