{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Select/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        view = props.view,\n        color = props.color,\n        icon = props.icon,\n        dense = props.dense,\n        filterable = props.filterable,\n        disabled = props.disabled;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" filled | smooth | outlined | raised \"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"text\",\n    type: \"string\",\n    desc: React.createElement(React.Fragment, null, \"Select button text.\")\n  }, {\n    prop: \"dense\",\n    type: \"boolean\",\n    desc: React.createElement(React.Fragment, null, \"Whether this button should use minimal styles.\")\n  }, {\n    prop: \"position = 'bottom-left'\",\n    type: \"string \",\n    desc: React.createElement(React.Fragment, null, \"The position (relative to the target) at which the popover should appear. The default value is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"bottom-left\"), \". Possible values:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"\\\"bottom-left\\\" | \\\"auto\\\" | \\\"auto-end\\\" | \\\"auto-start\\\" | \\\"bottom\\\" | \\\"bottom-right\\\" | \\\"left\\\" | \\\"left-bottom\\\" | \\\"left-top\\\" | \\\"right\\\" | \\\"right-bottom\\\" | \\\"right-top\\\" | \\\"top\\\" | \\\"top-left\\\" | \\\"top-right\\\"\"))\n  }, {\n    prop: \"content\",\n    type: React.createElement(React.Fragment, null, \"string | Element\"),\n    desc: React.createElement(React.Fragment, null, \"The content displayed inside the popover. This can instead be provided as the second element in children (first is target).\")\n  }];\n  /** Code source */\n\n  const Code = \"<Select\\n  view={view}\\n  color={color}\\n  text=\\\"Select\\\"\\n  position=\\\"bottom-left\\\"\\n  dense={dense}\\n  content={\\n\\n  }\\n/>\\n \";\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Select/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","view","color","icon","dense","filterable","disabled","OverviewText","APIData","prop","type","desc","Code"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GACuCD,KADvC,CAClBC,IADkB;AAAA,QACZC,IADY,GACuCF,KADvC,CACZE,IADY;AAAA,QACNC,KADM,GACuCH,KADvC,CACNG,KADM;AAAA,QACCC,IADD,GACuCJ,KADvC,CACCI,IADD;AAAA,QACOC,KADP,GACuCL,KADvC,CACOK,KADP;AAAA,QACcC,UADd,GACuCN,KADvC,CACcM,UADd;AAAA,QAC0BC,QAD1B,GACuCP,KADvC,CAC0BO,QAD1B;AAG1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAEP,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMQ,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,+DAE4D,GAF5D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAHF,4BAGqE,GAHrE,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AARJ,GADc,EAiBd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,gEAE6D,GAF7D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,2GAGyC,GAHzC,CAHF,6BAQyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARzB;AARJ,GAjBc,EAqCd;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GArCc,EA2Cd;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3Cc,EAgDd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhDc,EAqDd;AACEF,IAAAA,IAAI,EAAE,0BADR;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EACF,6IAE+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAF/B,wBAEoE,GAFpE,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wOAHF;AAJJ,GArDc,EAoEd;AACEF,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,IAAI,EAAE,6DAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GApEc,CAAhB;AAgFA;;AACA,QAAMC,IAAI,uIAAV;AAYA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEL,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEI,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CArGM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, view, color, icon, dense, filterable, disabled } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | smooth | outlined | raised </b>. The default state is{\" \"}\r\n          <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"text\",\r\n      type: \"string\",\r\n      desc: <>Select button text.</>\r\n    },\r\n    {\r\n      prop: \"dense\",\r\n      type: \"boolean\",\r\n      desc: <>Whether this button should use minimal styles.</>\r\n    },\r\n    {\r\n      prop: \"position = 'bottom-left'\",\r\n      type: \"string \",\r\n      desc: (\r\n        <>\r\n          The position (relative to the target) at which the popover should\r\n          appear. The default value is <b>bottom-left</b>. Possible values:{\" \"}\r\n          <b>\r\n            \"bottom-left\" | \"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" |\r\n            \"bottom-right\" | \"left\" | \"left-bottom\" | \"left-top\" | \"right\" |\r\n            \"right-bottom\" | \"right-top\" | \"top\" | \"top-left\" | \"top-right\"\r\n          </b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"content\",\r\n      type: <>string | Element</>,\r\n      desc: (\r\n        <>\r\n          The content displayed inside the popover. This can instead be provided\r\n          as the second element in children (first is target).\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `<Select\r\n  view={view}\r\n  color={color}\r\n  text=\"Select\"\r\n  position=\"bottom-left\"\r\n  dense={dense}\r\n  content={\r\n\r\n  }\r\n/>\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}