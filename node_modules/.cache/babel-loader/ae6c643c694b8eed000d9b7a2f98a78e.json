{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Callout/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        view = props.view,\n        color = props.color,\n        isTitle = props.isTitle,\n        isIcon = props.isIcon,\n        type = props.type;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"dense\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the dense shape of the component. The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"title\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"String content of optional title element.\")\n  }, {\n    prop: \"icon\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Name of a Blueprint UI icon to render on the left side.\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"el\\\">Callout</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">icon</span>=\").concat(isIcon ? '{<<span class=\"val\">Icon</span> <span class=\"attr\">icon</span>=\"<span class=\"val\">info-sign</span>\" <span class=\"attr\">iconSize</span>={<span class=\"bool\">24</span>} />}' : '{<span class=\"bool\">null</span>}', \"\\n  \").concat(title ? \"<span class=\\\"attr\\\">title</span>=\\\"<span class=\\\"val\\\">Visually important content</span>\" : '', \"\\n&gt; \\n  The component is a simple wrapper around the CSS API that provides props\\n  for modifiers and optional title element. Any additional HTML props will\\n  be spread to the rendered &lt;div&gt; element.\\n&lt;/<span class=\\\"val\\\">Callout</span>&gt;\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Callout/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","view","color","isTitle","isIcon","type","OverviewText","APIData","prop","desc","Code","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GAC2BD,KAD3B,CAClBC,IADkB;AAAA,QACZC,IADY,GAC2BF,KAD3B,CACZE,IADY;AAAA,QACNC,KADM,GAC2BH,KAD3B,CACNG,KADM;AAAA,QACCC,OADD,GAC2BJ,KAD3B,CACCI,OADD;AAAA,QACUC,MADV,GAC2BL,KAD3B,CACUK,MADV;AAAA,QACkBC,IADlB,GAC2BN,KAD3B,CACkBM,IADlB;AAG1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAEN,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMO,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,OADR;AAEEH,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEI,IAAAA,IAAI,EACF,kHACuE,GADvE,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AARJ,GADc,EAed;AACED,IAAAA,IAAI,EAAE,MADR;AAEEH,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,CAHJ;AAOEI,IAAAA,IAAI,EACF,uGAC4D,GAD5D,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAFF,6BAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHL;AARJ,GAfc,EA8Bd;AACED,IAAAA,IAAI,EAAE,OADR;AAEEH,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEI,IAAAA,IAAI,EACF,wGAC6D,GAD7D,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHAEyC,GAFzC,CAFF,6BAMyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANzB;AARJ,GA9Bc,EAgDd;AACED,IAAAA,IAAI,EAAE,WADR;AAEEH,IAAAA,IAAI,EAAE,mDAFR;AAGEI,IAAAA,IAAI,EACF;AAJJ,GAhDc,EAsDd;AACED,IAAAA,IAAI,EAAE,OADR;AAEEH,IAAAA,IAAI,EAAE,mDAFR;AAGEI,IAAAA,IAAI,EAAE;AAHR,GAtDc,EA2Dd;AACED,IAAAA,IAAI,EAAE,MADR;AAEEH,IAAAA,IAAI,EAAE,mDAFR;AAGEI,IAAAA,IAAI,EAAE;AAHR,GA3Dc,CAAhB;AAkEA;;AACA,QAAMC,IAAI,6GAC0CL,IAD1C,iFAE0CJ,IAF1C,kFAG2CC,KAH3C,2DAKRE,MAAM,GAAG,2KAAH,GAAiL,kCAL/K,iBAORO,KAAK,iGAA4F,EAPzF,mQAAV;AAeA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEL,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEG,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA1FM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, view, color, isTitle, isIcon, type } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"dense\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the dense shape of the component. The default state is{\" \"}\r\n          <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled | flat | smooth | outlined | raised </b>. The default state\r\n          is <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"title\",\r\n      type: <>string</>,\r\n      desc: <>String content of optional title element.</>\r\n    },\r\n    {\r\n      prop: \"icon\",\r\n      type: <>string</>,\r\n      desc: <>Name of a Blueprint UI icon to render on the left side.</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"el\">Callout</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">icon</span>=${\r\n    isIcon ? '{<<span class=\"val\">Icon</span> <span class=\"attr\">icon</span>=\"<span class=\"val\">info-sign</span>\" <span class=\"attr\">iconSize</span>={<span class=\"bool\">24</span>} />}' : '{<span class=\"bool\">null</span>}'\r\n  }\r\n  ${title ? `<span class=\"attr\">title</span>=\"<span class=\"val\">Visually important content</span>` : ''}\r\n&gt; \r\n  The component is a simple wrapper around the CSS API that provides props\r\n  for modifiers and optional title element. Any additional HTML props will\r\n  be spread to the rendered &lt;div&gt; element.\r\n&lt;/<span class=\"val\">Callout</span>&gt;`          \r\n  ;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}