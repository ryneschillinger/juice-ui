{"ast":null,"code":"import _slicedToArray from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Counter/Counter.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\n/** \r\n  __Component 'Counter'__\r\n**/\n\nexport default function Counter(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"default\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"filled\" : _props$view,\n        _props$leftColor = props.leftColor,\n        leftColor = _props$leftColor === void 0 ? \"default\" : _props$leftColor,\n        _props$rightColor = props.rightColor,\n        rightColor = _props$rightColor === void 0 ? \"default\" : _props$rightColor,\n        leftIcon = props.leftIcon,\n        rightIcon = props.rightIcon,\n        value = props.value,\n        active = props.active,\n        dense = props.dense,\n        vertical = props.vertical,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"leftColor\", \"rightColor\", \"leftIcon\", \"rightIcon\", \"value\", \"active\", \"dense\", \"vertical\", \"className\"]);\n\n  const _React$useState = React.useState(value),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        newValue = _React$useState2[0],\n        setNewValue = _React$useState2[1];\n\n  function Increment() {\n    setNewValue(newValue - 1);\n  }\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(\"div\", {\n    className: vertical ? Type[\"vertical\"] : Type[\"horizontal\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Button, Object.assign({}, restProps, {\n    className: cx(Type[type], dense && Type[\"dense\"], dark ? View[view + \"-dark\"] : View[view], Color[leftColor], active && View[\"focused\"], className),\n    icon: leftIcon,\n    onClick: () => Increment(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: cx(Type[\"value\"], dense && Type[\"denseValue\"], vertical && Type[\"verticalValue\"]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, newValue), React.createElement(Button, Object.assign({}, restProps, {\n    className: cx(Type[type], dense && Type[\"dense\"], dark ? View[view + \"-dark\"] : View[view], Color[rightColor], active && View[\"focused\"], className),\n    icon: rightIcon,\n    onClick: () => setNewValue(newValue + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))));\n}\nCounter.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `square` `action` `fab` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\n  type: PropTypes.oneOf([\"default\", \"square\", \"action\", \"fab\", \"icon\"]),\n\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\n\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * Click event handler.\r\n   */\n  onClick: PropTypes.func,\n\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\n  fill: PropTypes.bool,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\n  icon: PropTypes.any,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\n  rightIcon: PropTypes.any,\n\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Dense size\r\n   */\n  dense: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Counter/Counter.jsx"],"names":["React","cx","PropTypes","Button","Type","View","Color","ThemeContext","Counter","props","type","view","leftColor","rightColor","leftIcon","rightIcon","value","active","dense","vertical","className","restProps","useState","newValue","setNewValue","Increment","dark","propTypes","oneOf","color","onClick","func","fill","bool","icon","any","loading","disabled"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Button } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\n/** \r\n  __Component 'Counter'__\r\n**/\r\n\r\nexport default function Counter(props) {\r\n  const {\r\n    type = \"default\",\r\n    view = \"filled\",\r\n    leftColor = \"default\",\r\n    rightColor = \"default\",\r\n    leftIcon,\r\n    rightIcon,\r\n    value,\r\n    active,\r\n    dense,\r\n    vertical,\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n\r\n  const [newValue, setNewValue] = React.useState(value);\r\n\r\n  function Increment() {\r\n    setNewValue(newValue - 1);\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <div className={vertical ? Type[\"vertical\"] : Type[\"horizontal\"]}>\r\n          <Button\r\n            {...restProps}\r\n            className={cx(\r\n              Type[type],\r\n              dense && Type[\"dense\"],\r\n              dark ? View[view + \"-dark\"] : View[view],\r\n              Color[leftColor],\r\n              active && View[\"focused\"],\r\n              className\r\n            )}\r\n            icon={leftIcon}\r\n            onClick={() => Increment()}\r\n          />\r\n          <div\r\n            className={cx(\r\n              Type[\"value\"],\r\n              dense && Type[\"denseValue\"],\r\n              vertical && Type[\"verticalValue\"]\r\n            )}\r\n          >\r\n            {newValue}\r\n          </div>\r\n          <Button\r\n            {...restProps}\r\n            className={cx(\r\n              Type[type],\r\n              dense && Type[\"dense\"],\r\n              dark ? View[view + \"-dark\"] : View[view],\r\n              Color[rightColor],\r\n              active && View[\"focused\"],\r\n              className\r\n            )}\r\n            icon={rightIcon}\r\n            onClick={() => setNewValue(newValue + 1)}\r\n          />\r\n        </div>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nCounter.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `square` `action` `fab` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  type: PropTypes.oneOf([\"default\", \"square\", \"action\", \"fab\", \"icon\"]),\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\r\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * Click event handler.\r\n   */\r\n  onClick: PropTypes.func,\r\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\r\n  fill: PropTypes.bool,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\r\n  icon: PropTypes.any,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\r\n  rightIcon: PropTypes.any,\r\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * Dense size\r\n   */\r\n  dense: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}