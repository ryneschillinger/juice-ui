{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Tooltip/Tooltip.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Tooltip as TooltipSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\nexport default function Tooltip(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"def\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"filled\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        content = props.content,\n        position = props.position,\n        children = props.children,\n        className = props.className,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"content\", \"position\", \"children\", \"className\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(TooltipSource, Object.assign({}, restProps, {\n    popoverClassName: cx(Type[type], dark ? View[view + \"-dark\"] : View[view], Color[color], className),\n    content: content,\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), children));\n}\nTooltip.propTypes = {\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * The position (relative to the target) at which the popover should appear.\r\n   * Variants: \"auto\", \"top\", \"left\", \"right\", \"bottom\"\r\n   */\n  position: PropTypes.oneOf([\"auto\", \"top\", \"left\", \"right\", \"bottom\"]),\n\n  /**\r\n   * The content that will be displayed inside of the tooltip.\r\n   */\n  content: PropTypes.string.isRequired,\n\n  /**\r\n   * Whether the popover is visible.\r\n   * Passing this prop puts the popover in controlled mode, where the only way to change visibility is by updating this property.\r\n   * If disabled={true}, this prop will be ignored, and the popover will remain closed.\r\n   */\n  isOpen: PropTypes.bool,\n\n  /**\r\n   * Prevents the popover from appearing when true.\r\n   */\n  disabled: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Tooltip/Tooltip.jsx"],"names":["React","cx","PropTypes","Tooltip","TooltipSource","Type","View","Color","ThemeContext","props","type","view","color","content","position","children","className","restProps","dark","propTypes","oneOf","string","isRequired","isOpen","bool","disabled"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAO,IAAIC,aAApB,QAAyC,mBAAzC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,eAAe,SAASL,OAAT,CAAiBM,KAAjB,EAAwB;AAAA,sBAUjCA,KAViC,CAEnCC,IAFmC;AAAA,QAEnCA,IAFmC,4BAE5B,KAF4B;AAAA,sBAUjCD,KAViC,CAGnCE,IAHmC;AAAA,QAGnCA,IAHmC,4BAG5B,QAH4B;AAAA,uBAUjCF,KAViC,CAInCG,KAJmC;AAAA,QAInCA,KAJmC,6BAI3B,SAJ2B;AAAA,QAKnCC,OALmC,GAUjCJ,KAViC,CAKnCI,OALmC;AAAA,QAMnCC,QANmC,GAUjCL,KAViC,CAMnCK,QANmC;AAAA,QAOnCC,QAPmC,GAUjCN,KAViC,CAOnCM,QAPmC;AAAA,QAQnCC,SARmC,GAUjCP,KAViC,CAQnCO,SARmC;AAAA,QAShCC,SATgC,4BAUjCR,KAViC;;AAYrC,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAES,IAAAA;AAAF,GAAD,KACC,oBAAC,aAAD,oBACMD,SADN;AAEE,IAAA,gBAAgB,EAAEhB,EAAE,CAClBI,IAAI,CAACK,IAAD,CADc,EAElBQ,IAAI,GAAGZ,IAAI,CAACK,IAAI,GAAG,OAAR,CAAP,GAA0BL,IAAI,CAACK,IAAD,CAFhB,EAGlBJ,KAAK,CAACK,KAAD,CAHa,EAIlBI,SAJkB,CAFtB;AAQE,IAAA,OAAO,EAAEH,OARX;AASE,IAAA,QAAQ,EAAEC,QATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWGC,QAXH,CAFJ,CADF;AAmBD;AAEDZ,OAAO,CAACgB,SAAR,GAAoB;AAClB;;;;;AAKAP,EAAAA,KAAK,EAAEV,SAAS,CAACkB,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CANW;;AAiBlB;;;;AAIAN,EAAAA,QAAQ,EAAEZ,SAAS,CAACkB,KAAV,CAAgB,CAAC,MAAD,EAAS,KAAT,EAAgB,MAAhB,EAAwB,OAAxB,EAAiC,QAAjC,CAAhB,CArBQ;;AAsBlB;;;AAGAP,EAAAA,OAAO,EAAEX,SAAS,CAACmB,MAAV,CAAiBC,UAzBR;;AA0BlB;;;;;AAKAC,EAAAA,MAAM,EAAErB,SAAS,CAACsB,IA/BA;;AAgClB;;;AAGAC,EAAAA,QAAQ,EAAEvB,SAAS,CAACsB;AAnCF,CAApB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Tooltip as TooltipSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\nexport default function Tooltip(props) {\r\n  const {\r\n    type = \"def\",\r\n    view = \"filled\",\r\n    color = \"default\",\r\n    content,\r\n    position,\r\n    children,\r\n    className,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <TooltipSource\r\n          {...restProps}\r\n          popoverClassName={cx(\r\n            Type[type],\r\n            dark ? View[view + \"-dark\"] : View[view],\r\n            Color[color],\r\n            className\r\n          )}\r\n          content={content}\r\n          position={position}\r\n        >\r\n          {children}\r\n        </TooltipSource>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nTooltip.propTypes = {\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * The position (relative to the target) at which the popover should appear.\r\n   * Variants: \"auto\", \"top\", \"left\", \"right\", \"bottom\"\r\n   */\r\n  position: PropTypes.oneOf([\"auto\", \"top\", \"left\", \"right\", \"bottom\"]),\r\n  /**\r\n   * The content that will be displayed inside of the tooltip.\r\n   */\r\n  content: PropTypes.string.isRequired,\r\n  /**\r\n   * Whether the popover is visible.\r\n   * Passing this prop puts the popover in controlled mode, where the only way to change visibility is by updating this property.\r\n   * If disabled={true}, this prop will be ignored, and the popover will remain closed.\r\n   */\r\n  isOpen: PropTypes.bool,\r\n  /**\r\n   * Prevents the popover from appearing when true.\r\n   */\r\n  disabled: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}