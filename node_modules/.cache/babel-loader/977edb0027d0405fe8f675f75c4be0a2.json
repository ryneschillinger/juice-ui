{"ast":null,"code":"import _slicedToArray from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Select/Select.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\n/**Import core component (variable)*/\n\nimport Button from \"../../core/Button\";\nimport { filterItem, renderItem, renderMenuList } from \"./SelectFunctions\";\nimport { Select as SelectSource } from \"@blueprintjs/select\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\nexport default function Select(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"default\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"filled\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        items = props.items,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"items\"]);\n\n  const _React$useState = React.useState(items[0]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        item = _React$useState2[0],\n        setItem = _React$useState2[1];\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, ({\n    isDark\n  }) => React.createElement(SelectSource, Object.assign({\n    view: view,\n    color: color,\n    items: items,\n    itemPredicate: filterItem,\n    itemRenderer: renderItem,\n    itemListRenderer: renderMenuList,\n    onItemSelect: setItem\n  }, restProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(Button, {\n    text: item.title,\n    rightIcon: \"caret-down\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })));\n}\nSelect.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `card` `action` `circle` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\n  type: PropTypes.oneOf([\"default\", \"card\", \"action\", \"circle\", \"icon\"]),\n\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\n\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * Click event handler.\r\n   */\n  onClick: PropTypes.func,\n\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\n  fill: PropTypes.bool,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\n  icon: PropTypes.any,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\n  rightIcon: PropTypes.any,\n\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Dense size\r\n   */\n  dense: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/core/Select/Select.jsx"],"names":["React","cx","PropTypes","Button","filterItem","renderItem","renderMenuList","Select","SelectSource","Type","View","Color","ThemeContext","props","type","view","color","items","restProps","useState","item","setItem","isDark","title","propTypes","oneOf","onClick","func","fill","bool","icon","any","rightIcon","loading","disabled","dense"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,cAAjC,QAAuD,mBAAvD;AACA,SAASC,MAAM,IAAIC,YAAnB,QAAuC,qBAAvC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,eAAe,SAASL,MAAT,CAAgBM,KAAhB,EAAuB;AAAA,sBAOhCA,KAPgC,CAElCC,IAFkC;AAAA,QAElCA,IAFkC,4BAE3B,SAF2B;AAAA,sBAOhCD,KAPgC,CAGlCE,IAHkC;AAAA,QAGlCA,IAHkC,4BAG3B,QAH2B;AAAA,uBAOhCF,KAPgC,CAIlCG,KAJkC;AAAA,QAIlCA,KAJkC,6BAI1B,SAJ0B;AAAA,QAKlCC,KALkC,GAOhCJ,KAPgC,CAKlCI,KALkC;AAAA,QAM/BC,SAN+B,4BAOhCL,KAPgC;;AAAA,0BASZb,KAAK,CAACmB,QAAN,CAAeF,KAAK,CAAC,CAAD,CAApB,CATY;AAAA;AAAA,QAS7BG,IAT6B;AAAA,QASvBC,OATuB;;AAWpC,SACE,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,oBAAC,YAAD;AACE,IAAA,IAAI,EAAEP,IADR;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,aAAa,EAAEb,UAJjB;AAKE,IAAA,YAAY,EAAEC,UALhB;AAME,IAAA,gBAAgB,EAAEC,cANpB;AAOE,IAAA,YAAY,EAAEe;AAPhB,KAQMH,SARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEE,IAAI,CAACG,KAAnB;AAA0B,IAAA,SAAS,EAAC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CAFJ,CADF;AAkBD;AAEDhB,MAAM,CAACiB,SAAP,GAAmB;AACjB;;;;;AAKAV,EAAAA,IAAI,EAAEZ,SAAS,CAACuB,KAAV,CAAgB,CAAC,SAAD,EAAY,MAAZ,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,MAAxC,CAAhB,CANW;;AAOjB;;;;;AAKAV,EAAAA,IAAI,EAAEb,SAAS,CAACuB,KAAV,CAAgB,CAAC,QAAD,EAAW,MAAX,EAAmB,QAAnB,EAA6B,UAA7B,EAAyC,QAAzC,CAAhB,CAZW;;AAajB;;;;;AAKAT,EAAAA,KAAK,EAAEd,SAAS,CAACuB,KAAV,CAAgB,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,QAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,aAPqB,EAQrB,YARqB,EASrB,aATqB,CAAhB,CAlBU;;AA6BjB;;;AAGAC,EAAAA,OAAO,EAAExB,SAAS,CAACyB,IAhCF;;AAiCjB;;;AAGAC,EAAAA,IAAI,EAAE1B,SAAS,CAAC2B,IApCC;;AAqCjB;;;AAGAC,EAAAA,IAAI,EAAE5B,SAAS,CAAC6B,GAxCC;;AAyCjB;;;AAGAC,EAAAA,SAAS,EAAE9B,SAAS,CAAC6B,GA5CJ;;AA6CjB;;;;AAIAE,EAAAA,OAAO,EAAE/B,SAAS,CAAC2B,IAjDF;;AAkDjB;;;AAGAK,EAAAA,QAAQ,EAAEhC,SAAS,CAAC2B,IArDH;;AAsDjB;;;AAGAM,EAAAA,KAAK,EAAEjC,SAAS,CAAC2B;AAzDA,CAAnB","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**Import core component (variable)*/\r\nimport Button from \"../../core/Button\";\r\nimport { filterItem, renderItem, renderMenuList } from \"./SelectFunctions\";\r\nimport { Select as SelectSource } from \"@blueprintjs/select\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\nexport default function Select(props) {\r\n  const {\r\n    type = \"default\",\r\n    view = \"filled\",\r\n    color = \"default\",\r\n    items,\r\n    ...restProps\r\n  } = props;\r\n\r\n  const [item, setItem] = React.useState(items[0]);\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ isDark }) => (\r\n        <SelectSource\r\n          view={view}\r\n          color={color}\r\n          items={items}\r\n          itemPredicate={filterItem}\r\n          itemRenderer={renderItem}\r\n          itemListRenderer={renderMenuList}\r\n          onItemSelect={setItem}\r\n          {...restProps}\r\n        >\r\n          <Button text={item.title} rightIcon=\"caret-down\" />\r\n        </SelectSource>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nSelect.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `card` `action` `circle` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  type: PropTypes.oneOf([\"default\", \"card\", \"action\", \"circle\", \"icon\"]),\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\r\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * Click event handler.\r\n   */\r\n  onClick: PropTypes.func,\r\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\r\n  fill: PropTypes.bool,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\r\n  icon: PropTypes.any,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\r\n  rightIcon: PropTypes.any,\r\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * Dense size\r\n   */\r\n  dense: PropTypes.bool\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}