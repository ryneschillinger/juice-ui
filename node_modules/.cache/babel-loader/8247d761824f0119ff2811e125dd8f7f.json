{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Button/Button.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Button as ButtonSource, Icon } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\n/** \r\n  __Component 'Button'__\r\n**/\n\nexport default function Button(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"default\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"filled\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        active = props.active,\n        dense = props.dense,\n        className = props.className,\n        icon = props.icon,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"active\", \"dense\", \"className\", \"icon\"]);\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, ({\n    isDark\n  }) => React.createElement(ButtonSource, Object.assign({}, restProps, {\n    className: cx(Type[type], dense && Type[\"dense\"], isDark ? View[view + \"-dark\"] : View[view], Color[color], active && View[\"focused\"], className),\n    icon: icon && React.createElement(Icon, {\n      icon: icon,\n      iconSize: dense ? type === \"action\" ? 24 : type === \"circle\" ? 20 : 16 : type === \"action\" ? 32 : type === \"circle\" ? 24 : 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })));\n}\nButton.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `card` `action` `circle` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\n  type: PropTypes.oneOf([\"default\", \"card\", \"action\", \"circle\", \"icon\"]),\n\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\n\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * Click event handler.\r\n   */\n  onClick: PropTypes.func,\n\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\n  fill: PropTypes.bool,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\n  icon: PropTypes.any,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\n  rightIcon: PropTypes.any,\n\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Dense size\r\n   */\n  dense: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/ux-kitchen/ui-kitchen-ingredients/src/@setproduct-ui/core/Button/Button.jsx"],"names":["React","cx","PropTypes","Button","ButtonSource","Icon","Type","View","Color","ThemeContext","props","type","view","color","active","dense","className","icon","restProps","isDark","propTypes","oneOf","onClick","func","fill","bool","any","rightIcon","loading","disabled"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Button as ButtonSource, Icon } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\n\r\n/** \r\n  __Component 'Button'__\r\n**/\r\n\r\nexport default function Button(props) {\r\n  const {\r\n    type = \"default\",\r\n    view = \"filled\",\r\n    color = \"default\",\r\n    active,\r\n    dense,\r\n    className,\r\n    icon,\r\n    ...restProps\r\n  } = props;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ isDark }) => (\r\n        <ButtonSource\r\n          {...restProps}\r\n          className={cx(\r\n            Type[type],\r\n            dense && Type[\"dense\"],\r\n            isDark ? View[view + \"-dark\"] : View[view],\r\n            Color[color],\r\n            active && View[\"focused\"],\r\n            className\r\n          )}\r\n          icon={\r\n            icon && (\r\n              <Icon\r\n                icon={icon}\r\n                iconSize={\r\n                  dense\r\n                    ? type === \"action\"\r\n                      ? 24\r\n                      : type === \"circle\"\r\n                      ? 20\r\n                      : 16\r\n                    : type === \"action\"\r\n                    ? 32\r\n                    : type === \"circle\"\r\n                    ? 24\r\n                    : 20\r\n                }\r\n              />\r\n            )\r\n          }\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `card` `action` `circle` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  type: PropTypes.oneOf([\"default\", \"card\", \"action\", \"circle\", \"icon\"]),\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\r\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * Click event handler.\r\n   */\r\n  onClick: PropTypes.func,\r\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\r\n  fill: PropTypes.bool,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\r\n  icon: PropTypes.any,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\r\n  rightIcon: PropTypes.any,\r\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * Dense size\r\n   */\r\n  dense: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}