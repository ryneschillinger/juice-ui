{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Checkbox/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        color = props.color,\n        isDemo = props.isDemo,\n        dis = props.dis,\n        indet = props.indet,\n        help = props.help,\n        right = props.right,\n        fill = props.fill,\n        rtl = props.rtl;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \" def | dense \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"flat\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \" flat \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"flat\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"label\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Text label for the control.\")\n  }, {\n    prop: \"helperText\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: React.createElement(React.Fragment, null, \"Second line text\")\n  }, {\n    prop: \"fill\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should expand to fill its container. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"checked\",\n    type: React.createElement(React.Fragment, null, \"boolean\"),\n    desc: React.createElement(React.Fragment, null, \"Whether the control is checked.\")\n  }, {\n    prop: \"right\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Alignment of the indicator within container.\")\n  }, {\n    prop: \"indeterminate\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this checkbox is indeterminate, or \\\"partially checked.\\\" The checkbox will appear with a small dash instead of a tick to indicate that the value is not exactly true or false. The default state is\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"disabled\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"If set to true, the component will be disabled. The default state is\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"false\"))\n  }, {\n    prop: \"onChange\",\n    type: React.createElement(React.Fragment, null, \"func\"),\n    desc: React.createElement(React.Fragment, null, \"Event handler invoked when input value is changed.\")\n  }, {\n    prop: \"rtl\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Set the text direction to \\\"right-to-left\\\".\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">Checkbox</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">checked</span>={\").concat(isDemo ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>', \"}\\n  <span class=\\\"attr\\\">label</span>=\\\"\").concat(rtl ? '<span class=\"val\">خانة الاختيار</span>' : '<span class=\"val\">Checkbox</span>', \"\\\"\\n  <span class=\\\"attr\\\">disabled</span>={\").concat(dis ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>', \"}\\n  <span class=\\\"attr\\\">fill</span>={\").concat(fill ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>', \"}\\n  <span class=\\\"attr\\\">indeterminate</span>={\").concat(indet ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>', \"}\\n  <span class=\\\"attr\\\">helperText</span>=\").concat(help ? rtl ? '\"<span class=\"val\">تسمية توضيحية اختيارية</span>\"' : '\"<span class=\"val\">Optional subcaption</span>\"' : '{<span class=\"bool\">false</span>}', \"\\n  <span class=\\\"attr\\\">rtl</span>={\").concat(rtl ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>', \"}\\n  <span class=\\\"attr\\\">right</span>={\").concat(right ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>', \"}\\n  <span class=\\\"attr\\\">onChange</span>={<span class=\\\"js\\\">() => someFunc()</span>}\\n/&gt;\");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Checkbox/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","color","isDemo","dis","indet","help","right","fill","rtl","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const {\r\n    name,\r\n    type,\r\n    color,\r\n    isDemo,\r\n    dis,\r\n    indet,\r\n    help,\r\n    right,\r\n    fill,\r\n    rtl\r\n  } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:\r\n          <b> def | dense </b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>flat</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> flat </b>. The default state is <b>flat</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"label\",\r\n      type: <>string</>,\r\n      desc: <>Text label for the control.</>\r\n    },\r\n    {\r\n      prop: \"helperText\",\r\n      type: <>string</>,\r\n      desc: <>Second line text</>\r\n    },\r\n    {\r\n      prop: \"fill\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should expand to fill its container. The default\r\n          state is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"checked\",\r\n      type: <>boolean</>,\r\n      desc: <>Whether the control is checked.</>\r\n    },\r\n    {\r\n      prop: \"right\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Alignment of the indicator within container.</>\r\n    },\r\n    {\r\n      prop: \"indeterminate\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this checkbox is indeterminate, or \"partially checked.\" The\r\n          checkbox will appear with a small dash instead of a tick to indicate\r\n          that the value is not exactly true or false. The default state is\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"disabled\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          If set to true, the component will be disabled. The default state is\r\n          <b>false</b>\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"onChange\",\r\n      type: <>func</>,\r\n      desc: <>Event handler invoked when input value is changed.</>\r\n    },\r\n    {\r\n      prop: \"rtl\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Set the text direction to \"right-to-left\".</>\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">Checkbox</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">checked</span>={${isDemo ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>'}}\r\n  <span class=\"attr\">label</span>=\"${rtl ? '<span class=\"val\">خانة الاختيار</span>' : '<span class=\"val\">Checkbox</span>'}\"\r\n  <span class=\"attr\">disabled</span>={${dis ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>'}}\r\n  <span class=\"attr\">fill</span>={${fill ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>'}}\r\n  <span class=\"attr\">indeterminate</span>={${indet ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>'}}\r\n  <span class=\"attr\">helperText</span>=${\r\n    help\r\n      ? rtl\r\n        ? '\"<span class=\"val\">تسمية توضيحية اختيارية</span>\"'\r\n        : '\"<span class=\"val\">Optional subcaption</span>\"'\r\n      : '{<span class=\"bool\">false</span>}'\r\n  }\r\n  <span class=\"attr\">rtl</span>={${rtl ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>'}}\r\n  <span class=\"attr\">right</span>={${right ? '<span class=\"bool\">true</span>' : '<span class=\"bool\">false</span>'}}\r\n  <span class=\"attr\">onChange</span>={<span class=\"js\">() => someFunc()</span>}\r\n/&gt;`\r\n;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}