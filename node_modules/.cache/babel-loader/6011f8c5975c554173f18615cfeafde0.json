{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Hamburger/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        view = props.view,\n        color = props.color,\n        size = props.size,\n        isOpen = props.isOpen,\n        variant = props.variant,\n        rounded = props.rounded;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" default | circle \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"flat\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined \"), \". The default state is\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"flat\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: \"string\",\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"size\",\n    type: React.createElement(React.Fragment, null, \"number = 32\"),\n    desc: React.createElement(React.Fragment, null, \"A Size of the component in px.\")\n  }, {\n    prop: \"rounded\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"true\")),\n    desc: React.createElement(React.Fragment, null, \"Rounded style.\")\n  }, {\n    prop: \"isOpen\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"An Open state. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"setOpen\",\n    type: \"func\",\n    desc: React.createElement(React.Fragment, null, \"Click event handler.\")\n  }, {\n    prop: \"variant\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"slider\"), \" \"),\n    desc: React.createElement(React.Fragment, null, \"This prop set animation variant of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \" squeeze | elastic | emphatic | spin | slider \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"slider\"), \".\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">Hamburger</span>\\n      <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n      <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n      <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n      <span class=\\\"attr\\\">size</span>={<span class=\\\"num\\\">\").concat(size, \"</span>}\\n      <span class=\\\"attr\\\">isOpen</span>={<span class=\\\"bool\\\">\").concat(isOpen ? \"true\" : \"false\", \"</span>}\\n      <span class=\\\"attr\\\">setOpen</span>={<span class=\\\"data\\\">() => someFunc()</span>}\\n      <span class=\\\"attr\\\">variant</span>=\\\"<span class=\\\"val\\\">\").concat(variant, \"</span>\\\"\\n      <span class=\\\"attr\\\">rounded</span>={ \").concat(rounded ? \"true\" : \"false\", \" }\\n  />\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/Hamburger/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","view","color","size","isOpen","variant","rounded","OverviewText","APIData","prop","desc","Code"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, view, color, size, isOpen, variant, rounded } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:\r\n          <b> default | circle </b>. The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>flat</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:\r\n          <b> filled | flat | smooth | outlined </b>. The default state is\r\n          <b>flat</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: \"string\",\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"size\",\r\n      type: <>number = 32</>,\r\n      desc: <>A Size of the component in px.</>\r\n    },\r\n    {\r\n      prop: \"rounded\",\r\n      type: (\r\n        <>\r\n          boolean = <i>true</i>\r\n        </>\r\n      ),\r\n      desc: <>Rounded style.</>\r\n    },\r\n    {\r\n      prop: \"isOpen\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          An Open state. The default state is <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"setOpen\",\r\n      type: \"func\",\r\n      desc: <>Click event handler.</>\r\n    },\r\n    {\r\n      prop: \"variant\",\r\n      type: (\r\n        <>\r\n          string = <i>slider</i>{\" \"}\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set animation variant of the component. Possible states:\r\n          <b> squeeze | elastic | emphatic | spin | slider </b>. The default\r\n          state is <b>slider</b>.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">Hamburger</span>\r\n      <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n      <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n      <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n      <span class=\"attr\">size</span>={<span class=\"num\">${size}</span>}\r\n      <span class=\"attr\">isOpen</span>={<span class=\"bool\">${isOpen ? \"true\" : \"false\"}</span>}\r\n      <span class=\"attr\">setOpen</span>={<span class=\"data\">() => someFunc()</span>}\r\n      <span class=\"attr\">variant</span>=\"<span class=\"val\">${variant}</span>\"\r\n      <span class=\"attr\">rounded</span>={ ${rounded ? \"true\" : \"false\"} }\r\n  />\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}