{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/DateTime/TimePicker/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../../OverviewComponent\";\nimport { OverviewTemplate } from \"../../OverviewText\";\nexport const API = props => {\n  const type = props.type,\n        view = props.view,\n        name = props.name,\n        color = props.color,\n        isSec = props.isSec,\n        isMsec = props.isMsec,\n        useAmPm = props.useAmPm,\n        isArrow = props.isArrow;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"precision\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"MINUTE\")),\n    desc: React.createElement(React.Fragment, null, \"The precision of time the user can set. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"MINUTE | SECOND | MILLISECOND\"), \". The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"MINUTE\"), \".\")\n  }, {\n    prop: \"showArrowButtons\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether to show arrows buttons for changing the time.\")\n  }, {\n    prop: \"useAmPm\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether to use a 12 hour format with an AM/PM dropdown.\")\n  }, {\n    prop: \"value\",\n    type: React.createElement(React.Fragment, null, \"Date\"),\n    desc: React.createElement(React.Fragment, null, \"The currently set time. If this prop is provided, the component acts in a controlled manner.\")\n  }];\n  /** Code source */\n\n  const Code = \"&lt;<span class=\\\"val\\\">TimePicker</span>\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">\".concat(type, \"</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">precision</span>=\\\"<span class=\\\"val\\\">\").concat(isSec ? \"SECOND\" : isMsec ? \"MILLISECOND\" : \"MINUTE\", \"</span>\\\"\\n  \").concat(isArrow ? \"<span class=\\\"attr\\\">showArrowButtons</span>\" : '', \"\\n  \").concat(useAmPm ? \"<span class=\\\"attr\\\">useAmPm</span>\" : '', \"\\n&lt;/&gt;\\n\");\n\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\n\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: trimCode(Code),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/DateTime/TimePicker/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","type","view","name","color","isSec","isMsec","useAmPm","isArrow","OverviewText","APIData","prop","desc","Code","trimCode","code","replace"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GAC2CD,KAD3C,CAClBC,IADkB;AAAA,QACZC,IADY,GAC2CF,KAD3C,CACZE,IADY;AAAA,QACNC,IADM,GAC2CH,KAD3C,CACNG,IADM;AAAA,QACAC,KADA,GAC2CJ,KAD3C,CACAI,KADA;AAAA,QACOC,KADP,GAC2CL,KAD3C,CACOK,KADP;AAAA,QACcC,MADd,GAC2CN,KAD3C,CACcM,MADd;AAAA,QACsBC,OADtB,GAC2CP,KAD3C,CACsBO,OADtB;AAAA,QAC+BC,OAD/B,GAC2CR,KAD3C,CAC+BQ,OAD/B;AAG1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAEN,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMO,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,OADR;AAEEV,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEW,IAAAA,IAAI,EACF,0CACG,GADH,gEAE6D,GAF7D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,2GAGyC,GAHzC,CAHF,6BAQyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARzB;AARJ,GADc,EAqBd;AACED,IAAAA,IAAI,EAAE,WADR;AAEEV,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,CAHJ;AAOEW,IAAAA,IAAI,EACF,sGAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFF,4BAE6D,GAF7D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AARJ,GArBc,EAoCd;AACED,IAAAA,IAAI,EAAE,kBADR;AAEEV,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEW,IAAAA,IAAI,EAAE;AAPR,GApCc,EA6Cd;AACED,IAAAA,IAAI,EAAE,SADR;AAEEV,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEW,IAAAA,IAAI,EAAE;AAPR,GA7Cc,EAsDd;AACED,IAAAA,IAAI,EAAE,OADR;AAEEV,IAAAA,IAAI,EAAE,iDAFR;AAGEW,IAAAA,IAAI,EACF;AAJJ,GAtDc,CAAhB;AAkEA;;AACA,QAAMC,IAAI,iHAC0CZ,IAD1C,iFAE0CC,IAF1C,kFAG2CE,KAH3C,sFAI+CC,KAAK,GAAG,QAAH,GAAeC,MAAM,GAAG,aAAH,GAAmB,QAJ5F,0BAKRE,OAAO,oDAAkD,EALjD,iBAMRD,OAAO,2CAAyC,EANxC,kBAAV;;AAUA,QAAMO,QAAQ,GAAGC,IAAI,IAAIA,IAAI,CAACC,OAAL,CAAa,eAAb,EAA8B,EAA9B,CAAzB;;AAEA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEP,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEI,QAAQ,CAACD,IAAD,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAvFM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { type, view, name, color, isSec, isMsec, useAmPm, isArrow } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"precision\",\r\n      type: (\r\n        <>\r\n          string = <i>MINUTE</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          The precision of time the user can set. Possible states:\r\n          <b>MINUTE | SECOND | MILLISECOND</b>. The default state is{\" \"}\r\n          <b>MINUTE</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"showArrowButtons\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Whether to show arrows buttons for changing the time.</>\r\n    },\r\n    {\r\n      prop: \"useAmPm\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: <>Whether to use a 12 hour format with an AM/PM dropdown.</>\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: <>Date</>,\r\n      desc: (\r\n        <>\r\n          The currently set time. If this prop is provided, the component acts\r\n          in a controlled manner.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `&lt;<span class=\"val\">TimePicker</span>\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">${type}</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">precision</span>=\"<span class=\"val\">${isSec ? \"SECOND\" : (isMsec ? \"MILLISECOND\" : \"MINUTE\")}</span>\"\r\n  ${isArrow ? `<span class=\"attr\">showArrowButtons</span>` : ''}\r\n  ${useAmPm ? `<span class=\"attr\">useAmPm</span>` : ''}\r\n&lt;/&gt;\r\n`;\r\n\r\n  const trimCode = code => code.replace(/(^[ \\t]*\\n)/gm, \"\");\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={trimCode(Code)} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}