{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Drawer/Drawer.jsx\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Drawer as DrawerSource } from \"@blueprintjs/core\";\nimport Type from \"./_type.module.css\";\nimport View from \"./_view.module.css\";\nimport Color from \"../../styles/color.module.css\";\nimport { ThemeContext } from \"../ThemeContext\";\nimport { useDevice } from \"../hooks/customHooks\";\nexport default function Drawer(props) {\n  const _props$type = props.type,\n        type = _props$type === void 0 ? \"default\" : _props$type,\n        _props$view = props.view,\n        view = _props$view === void 0 ? \"smooth\" : _props$view,\n        _props$color = props.color,\n        color = _props$color === void 0 ? \"default\" : _props$color,\n        _props$position = props.position,\n        position = _props$position === void 0 ? \"right\" : _props$position,\n        className = props.className,\n        size = props.size,\n        restProps = _objectWithoutProperties(props, [\"type\", \"view\", \"color\", \"position\", \"className\", \"size\"]);\n\n  let device = useDevice();\n\n  let _size = !size ? device === \"mobile\" ? position === \"bottom\" ? \"50%\" : \"80%\" : device === \"tablet\" ? \"32%\" : position === \"bottom\" ? \"32%\" : \"16%\" : size;\n\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, ({\n    dark\n  }) => React.createElement(DrawerSource, Object.assign({}, restProps, {\n    className: cx(Type[type], Type[position], dark ? View[view + \"-dark\"] : View[view], Color[color], className),\n    position: position,\n    size: _size,\n    title: \"title goes here\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })));\n}\nDrawer.propTypes = {\n  /**\r\n   `The type of the component.\r\n   * Variants: `square` `action` `fab` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\n  type: PropTypes.oneOf([\"default\", \"square\", \"action\", \"fab\", \"icon\"]),\n\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\n\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\n  color: PropTypes.oneOf([\"default\", \"primary\", \"warning\", \"danger\", \"success\", \"primary_alt\", \"warning_alt\", \"danger_alt\", \"success_alt\"]),\n\n  /**\r\n   * Click event handler.\r\n   */\n  onClick: PropTypes.func,\n\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\n  fill: PropTypes.bool,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\n  icon: PropTypes.any,\n\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\n  rightIcon: PropTypes.any,\n\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Dense size\r\n   */\n  dense: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/core/Drawer/Drawer.jsx"],"names":["React","cx","PropTypes","Drawer","DrawerSource","Type","View","Color","ThemeContext","useDevice","props","type","view","color","position","className","size","restProps","device","_size","dark","propTypes","oneOf","onClick","func","fill","bool","icon","any","rightIcon","loading","disabled","dense"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Drawer as DrawerSource } from \"@blueprintjs/core\";\r\n\r\nimport Type from \"./_type.module.css\";\r\nimport View from \"./_view.module.css\";\r\nimport Color from \"../../styles/color.module.css\";\r\n\r\nimport { ThemeContext } from \"../ThemeContext\";\r\nimport { useDevice } from \"../hooks/customHooks\";\r\n\r\nexport default function Drawer(props) {\r\n  const {\r\n    type = \"default\",\r\n    view = \"smooth\",\r\n    color = \"default\",\r\n    position = \"right\",\r\n    className,\r\n    size,\r\n    ...restProps\r\n  } = props;\r\n\r\n  let device = useDevice();\r\n  let _size = !size\r\n    ? device === \"mobile\"\r\n      ? position === \"bottom\"\r\n        ? \"50%\"\r\n        : \"80%\"\r\n      : device === \"tablet\"\r\n      ? \"32%\"\r\n      : position === \"bottom\"\r\n      ? \"32%\"\r\n      : \"16%\"\r\n    : size;\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ dark }) => (\r\n        <DrawerSource\r\n          {...restProps}\r\n          className={cx(\r\n            Type[type],\r\n            Type[position],\r\n            dark ? View[view + \"-dark\"] : View[view],\r\n            Color[color],\r\n            className\r\n          )}\r\n          position={position}\r\n          size={_size}\r\n          title=\"title goes here\"\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nDrawer.propTypes = {\r\n  /**\r\n   `The type of the component.\r\n   * Variants: `square` `action` `fab` `icon`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  type: PropTypes.oneOf([\"default\", \"square\", \"action\", \"fab\", \"icon\"]),\r\n  /**\r\n   ` The view of the component.\r\n   * Variants: `flat` `smooth` `outlined` `raised`\r\n   * Default value (if undefined): `filled` `\r\n   */\r\n  view: PropTypes.oneOf([\"filled\", \"flat\", \"smooth\", \"outlined\", \"raised\"]),\r\n  /**\r\n  ` The color of the component.\r\n   * Variants: `primary` `warning` `danger` `success` `primaryAlt` `warningAlt` `dangerAlt` `successAlt`\r\n   * Default value (if undefined): `default` `\r\n   */\r\n  color: PropTypes.oneOf([\r\n    \"default\",\r\n    \"primary\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"success\",\r\n    \"primary_alt\",\r\n    \"warning_alt\",\r\n    \"danger_alt\",\r\n    \"success_alt\"\r\n  ]),\r\n  /**\r\n   * Click event handler.\r\n   */\r\n  onClick: PropTypes.func,\r\n  /**\r\n   * Whether this component should expand to fill its container.\r\n   */\r\n  fill: PropTypes.bool,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render before the text.\r\n   */\r\n  icon: PropTypes.any,\r\n  /**\r\n   * Name of a Blueprint UI icon (or an icon element) to render after the text.\r\n   */\r\n  rightIcon: PropTypes.any,\r\n  /**\r\n   * If set to `true`, the button will display a centered loading spinner instead of its contents.\r\n   * The width of the button is not affected by the value of this prop.\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * If `true`, the button will be disabled.\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * Dense size\r\n   */\r\n  dense: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}