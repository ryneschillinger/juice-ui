{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Typography/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        type = props.type,\n        font = props.font,\n        color = props.color,\n        tagName = props.tagName,\n        small = props.small,\n        large = props.large,\n        colorStep = props.colorStep;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"body\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"body | button | overline | caption | h1 | h2 | h3 | h4 | h5 | h6\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"body\"), \".\")\n  }, {\n    prop: \"font\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"inter\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the view of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \" filled | flat | smooth | outlined | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the color of the component. Possible states:\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"tagName\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"div\")),\n    desc: React.createElement(React.Fragment, null, \"A Name of HTML tag\")\n  }, {\n    prop: \"colorStep\",\n    type: React.createElement(React.Fragment, null, \"integer = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"100\")),\n    desc: React.createElement(React.Fragment, null, \"A Color depth. Step is 10. Min value is 0, max value is 100. \")\n  }, {\n    prop: \"small\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should use minimal styles. The default state is\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }, {\n    prop: \"large\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether this button should expand to fill its container. The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"false\"), \".\")\n  }];\n  /** Code source */\n\n  const Code = \"  \\n  < Typography\\n      <i>type</i> = '\".concat(type, \"'\\n      <i>font</i> = '\").concat(font, \"' \\n      <i>color</i> = '\").concat(color, \"' \\n      <i>colorStep</i> = \").concat(colorStep, \"\\n      <i>tagName</i> = '\").concat(tagName, \"'\\n      <i>small</i> = { \").concat(small ? \"true\" : \"false\", \" }\\n      <i>large</i> = { \").concat(large ? \"true\" : \"false\", \" }\\n  > \\n      Children\\n  < Typography / >\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/Typography/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","type","font","color","tagName","small","large","colorStep","OverviewText","APIData","prop","desc","Code"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GAC4CD,KAD5C,CAClBC,IADkB;AAAA,QACZC,IADY,GAC4CF,KAD5C,CACZE,IADY;AAAA,QACNC,IADM,GAC4CH,KAD5C,CACNG,IADM;AAAA,QACAC,KADA,GAC4CJ,KAD5C,CACAI,KADA;AAAA,QACOC,OADP,GAC4CL,KAD5C,CACOK,OADP;AAAA,QACgBC,KADhB,GAC4CN,KAD5C,CACgBM,KADhB;AAAA,QACuBC,KADvB,GAC4CP,KAD5C,CACuBO,KADvB;AAAA,QAC8BC,SAD9B,GAC4CR,KAD5C,CAC8BQ,SAD9B;AAG1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAER,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMS,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,MADR;AAEET,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADX,CAHJ;AAOEU,IAAAA,IAAI,EACF,wGAC6D,GAD7D,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EAFF,6BAKyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALzB;AARJ,GADc,EAkBd;AACED,IAAAA,IAAI,EAAE,MADR;AAEET,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADX,CAHJ;AAOEU,IAAAA,IAAI,EACF,uGAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAFF,6BAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHL;AARJ,GAlBc,EAiCd;AACED,IAAAA,IAAI,EAAE,OADR;AAEET,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEU,IAAAA,IAAI,EACF,wGAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+GAFF,6BAMyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANzB;AARJ,GAjCc,EAmDd;AACED,IAAAA,IAAI,EAAE,WADR;AAEET,IAAAA,IAAI,EAAE,mDAFR;AAGEU,IAAAA,IAAI,EACF;AAJJ,GAnDc,EAyDd;AACED,IAAAA,IAAI,EAAE,SADR;AAEET,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADX,CAHJ;AAOEU,IAAAA,IAAI,EAAE;AAPR,GAzDc,EAkEd;AACED,IAAAA,IAAI,EAAE,WADR;AAEET,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADZ,CAHJ;AAOEU,IAAAA,IAAI,EAAE;AAPR,GAlEc,EA2Ed;AACED,IAAAA,IAAI,EAAE,OADR;AAEET,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEU,IAAAA,IAAI,EACF,iHACsE,GADtE,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AARJ,GA3Ec,EAyFd;AACED,IAAAA,IAAI,EAAE,OADR;AAEET,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEU,IAAAA,IAAI,EACF,4HAEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFX;AARJ,GAzFc,CAAhB;AAyGA;;AACA,QAAMC,IAAI,sDAEWX,IAFX,qCAGWC,IAHX,uCAIYC,KAJZ,0CAKeI,SALf,uCAMcH,OANd,uCAOaC,KAAK,GAAG,MAAH,GAAY,OAP9B,wCAQaC,KAAK,GAAG,MAAH,GAAY,OAR9B,oDAAV;AAcA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEE,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEG,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAhIM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, type, font, color, tagName, small, large, colorStep } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>body</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b>\r\n            body | button | overline | caption | h1 | h2 | h3 | h4 | h5 | h6\r\n          </b>\r\n          . The default state is <b>body</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"font\",\r\n      type: (\r\n        <>\r\n          string = <i>inter</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the view of the component. Possible states:\r\n          <b> filled | flat | smooth | outlined | raised </b>. The default state\r\n          is <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the color of the component. Possible states:\r\n          <b>\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"tagName\",\r\n      type: (\r\n        <>\r\n          string = <i>div</i>\r\n        </>\r\n      ),\r\n      desc: <>A Name of HTML tag</>\r\n    },\r\n    {\r\n      prop: \"colorStep\",\r\n      type: (\r\n        <>\r\n          integer = <i>100</i>\r\n        </>\r\n      ),\r\n      desc: <>A Color depth. Step is 10. Min value is 0, max value is 100. </>\r\n    },\r\n    {\r\n      prop: \"small\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should use minimal styles. The default state is{\" \"}\r\n          <b>false</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"large\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether this button should expand to fill its container. The default\r\n          state is <b>false</b>.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n  < Typography\r\n      <i>type</i> = '${type}'\r\n      <i>font</i> = '${font}' \r\n      <i>color</i> = '${color}' \r\n      <i>colorStep</i> = ${colorStep}\r\n      <i>tagName</i> = '${tagName}'\r\n      <i>small</i> = { ${small ? \"true\" : \"false\"} }\r\n      <i>large</i> = { ${large ? \"true\" : \"false\"} }\r\n  > \r\n      Children\r\n  < Typography / >\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}