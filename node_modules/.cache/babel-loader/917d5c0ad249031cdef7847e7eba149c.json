{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/DateTime/DatePicker/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../../OverviewComponent\";\nimport { OverviewTemplate } from \"../../OverviewText\";\nexport const API = props => {\n  const name = props.name,\n        view = props.view,\n        color = props.color,\n        bar = props.bar,\n        curDay = props.curDay;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"tring = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"flat\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" flat | smooth | raised \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"highlightCurrentDay\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"false\")),\n    desc: \"Whether the current day should be highlighted in the calendar.\"\n  }, {\n    prop: \"showActionsBar\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"false\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the bottom bar displaying \\\"Today\\\" and \\\"Clear\\\" buttons should be shown.\")\n  }];\n  /** Code source */\n\n  const Code = \"  \\n  < DatePicker\\n      <i>view</i> = '\".concat(view, \"' \\n      <i>color</i> = '\").concat(color, \"' \\n      <i>highlightCurrentDay</i> = {\").concat(curDay ? \"true\" : \"false\", \"}\\n      <i>showActionsBar</i> = {\").concat(bar ? \"true\" : \"false\", \"}\\n  />\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@setproduct-ui/demo/DateTime/DatePicker/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","name","view","color","bar","curDay","OverviewText","APIData","prop","type","desc","Code"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,IADkB,GACiBD,KADjB,CAClBC,IADkB;AAAA,QACZC,IADY,GACiBF,KADjB,CACZE,IADY;AAAA,QACNC,KADM,GACiBH,KADjB,CACNG,KADM;AAAA,QACCC,GADD,GACiBJ,KADjB,CACCI,GADD;AAAA,QACMC,MADN,GACiBL,KADjB,CACMK,MADN;AAG1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAEL,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMM,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,sDACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADV,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,+DAE4D,GAF5D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAHF,6BAGwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHxD;AARJ,GADc,EAgBd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,gEAE6D,GAF7D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,2GAGyC,GAHzC,CAHF,6BAQyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARzB;AARJ,GAhBc,EAoCd;AACEF,IAAAA,IAAI,EAAE,qBADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEC,IAAAA,IAAI,EAAE;AAPR,GApCc,EA8Cd;AACEF,IAAAA,IAAI,EAAE,gBADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADZ,CAHJ;AAOEC,IAAAA,IAAI,EACF;AARJ,GA9Cc,CAAhB;AA8DA;;AACA,QAAMC,IAAI,sDAEWT,IAFX,uCAGYC,KAHZ,qDAI0BE,MAAM,GAAG,MAAH,GAAY,OAJ5C,+CAKqBD,GAAG,GAAG,MAAH,GAAY,OALpC,eAAV;AASA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEE,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEI,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAhFM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { name, view, color, bar, curDay } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={name} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          tring = <i>flat</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> flat | smooth | raised </b>. The default state is <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          . The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"highlightCurrentDay\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: \"Whether the current day should be highlighted in the calendar.\"\r\n    },\r\n\r\n    {\r\n      prop: \"showActionsBar\",\r\n      type: (\r\n        <>\r\n          boolean = <i>false</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          Whether the bottom bar displaying \"Today\" and \"Clear\" buttons should\r\n          be shown.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n  < DatePicker\r\n      <i>view</i> = '${view}' \r\n      <i>color</i> = '${color}' \r\n      <i>highlightCurrentDay</i> = {${curDay ? \"true\" : \"false\"}}\r\n      <i>showActionsBar</i> = {${bar ? \"true\" : \"false\"}}\r\n  />\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}