{"ast":null,"code":"var _jsxFileName = \"/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/ProgressBar/api.jsx\";\nimport React from \"react\";\nimport { Overview } from \"../OverviewComponent\";\nimport { OverviewTemplate } from \"../OverviewText\";\nexport const API = props => {\n  const color = props.color,\n        animate = props.animate,\n        stripes = props.stripes,\n        value = props.value;\n  /**Overview */\n\n  const OverviewText = React.createElement(OverviewTemplate, {\n    name: \"ProgressBar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n  /**API */\n\n  const APIData = [{\n    prop: \"type\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"def\")),\n    desc: React.createElement(React.Fragment, null, \"This prop set the shape of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" def \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"def\"), \".\")\n  }, {\n    prop: \"view\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"filled\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the view of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \" filled \"), \". The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"filled\"), \".\")\n  }, {\n    prop: \"color\",\n    type: React.createElement(React.Fragment, null, \"string = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"default\")),\n    desc: React.createElement(React.Fragment, null, \" \", \"This prop set the color of the component. Possible states:\", \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \" \", \"default | primary | warning | danger | success | primary_alt | warning_alt | danger_alt | success_alt\", \" \"), \"/ The default state is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"default\"), \".\")\n  }, {\n    prop: \"className\",\n    type: React.createElement(React.Fragment, null, \"string\"),\n    desc: \"A space-delimited list of class names to pass along to a child element.\"\n  }, {\n    prop: \"animate\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"true\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the background should animate.\")\n  }, {\n    prop: \"stripes\",\n    type: React.createElement(React.Fragment, null, \"boolean = \", React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"true\")),\n    desc: React.createElement(React.Fragment, null, \"Whether the background should be striped.\")\n  }, {\n    prop: \"value\",\n    type: React.createElement(React.Fragment, null, \"number\"),\n    desc: React.createElement(React.Fragment, null, \"A value between 0 and 1 (inclusive) representing how far along the operation is. Values below 0 or above 1 will be interpreted as 0 or 1, respectively. Omitting this prop will result in an \\\"indeterminate\\\" progress meter that fills the entire bar.\")\n  }];\n  /** Code source */\n\n  const Code = \"  \\n&lt;<span class=\\\"val\\\">ProgressBar</span>&gt;\\n  <i>type</i> = 'def'\\n  <i>view</i> = 'filled'\\n  <i>color</i> = '\".concat(color, \"' \\n  <i>animate</i> = \").concat(animate ? \"{true}\" : \"{false}\", \"\\n  <i>stripes</i> = \").concat(stripes ? \"{true}\" : \"{false}\", \"\\n  <i>value</i> = '\").concat(value / 100, \"'\\n  <span class=\\\"attr\\\">type</span>=\\\"<span class=\\\"val\\\">def</span>\\\"\\n  <span class=\\\"attr\\\">view</span>=\\\"<span class=\\\"val\\\">\").concat(view, \"</span>\\\"\\n  <span class=\\\"attr\\\">color</span>=\\\"<span class=\\\"val\\\">\").concat(color, \"</span>\\\"\\n  <span class=\\\"attr\\\">icon</span>=\\\"<span class=\\\"val\\\">cut</span>\\\"\\n  <span class=\\\"attr\\\">text</span>=\\\"<span class=\\\"val\\\">Cut</span>\\\"\\n  <span class=\\\"attr\\\">labelElement</span>=\\\"<span class=\\\"val\\\">\\u2318X</span>\\\"\\n/&gt;\\n \");\n  return React.createElement(Overview, {\n    overview: OverviewText,\n    apidata: APIData,\n    code: Code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/ryneschillinger1/dev_projects/candy-ui/candy-ui/src/@candy-ui/demo/ProgressBar/api.jsx"],"names":["React","Overview","OverviewTemplate","API","props","color","animate","stripes","value","OverviewText","APIData","prop","type","desc","Code","view"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAO,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA,QAClBC,KADkB,GACiBD,KADjB,CAClBC,KADkB;AAAA,QACXC,OADW,GACiBF,KADjB,CACXE,OADW;AAAA,QACFC,OADE,GACiBH,KADjB,CACFG,OADE;AAAA,QACOC,KADP,GACiBJ,KADjB,CACOI,KADP;AAG1B;;AACA,QAAMC,YAAY,GAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAE,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB;AAEA;;AACA,QAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,wGAC6D,GAD7D,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,6BAEqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFrC;AARJ,GADc,EAed;AACEF,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,+DAE4D,GAF5D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,6BAGwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHxC;AARJ,GAfc,EA8Bd;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EACF,uDACW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADX,CAHJ;AAOEC,IAAAA,IAAI,EACF,0CACG,GADH,gEAE6D,GAF7D,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,2GAGyC,GAHzC,CAHF,6BAQyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARzB;AARJ,GA9Bc,EAkDd;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,IAAI,EAAE,mDAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GAlDc,EAwDd;AACEF,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADZ,CAHJ;AAOEC,IAAAA,IAAI,EAAE;AAPR,GAxDc,EAiEd;AACEF,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,IAAI,EACF,wDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADZ,CAHJ;AAOEC,IAAAA,IAAI,EAAE;AAPR,GAjEc,EA0Ed;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,mDAFR;AAGEC,IAAAA,IAAI,EACF;AAJJ,GA1Ec,CAAhB;AAwFA;;AACA,QAAMC,IAAI,oIAIQT,KAJR,oCAKSC,OAAO,GAAG,QAAH,GAAc,SAL9B,kCAMSC,OAAO,GAAG,QAAH,GAAc,SAN9B,iCAOQC,KAAK,GAAG,GAPhB,gJAS0CO,IAT1C,kFAU2CV,KAV3C,yPAAV;AAiBA,SAAO,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEI,YAApB;AAAkC,IAAA,OAAO,EAAEC,OAA3C;AAAoD,IAAA,IAAI,EAAEI,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAlHM","sourcesContent":["import React from \"react\";\r\nimport { Overview } from \"../OverviewComponent\";\r\nimport { OverviewTemplate } from \"../OverviewText\";\r\n\r\nexport const API = props => {\r\n  const { color, animate, stripes, value } = props;\r\n\r\n  /**Overview */\r\n  const OverviewText = <OverviewTemplate name={\"ProgressBar\"} />;\r\n\r\n  /**API */\r\n  const APIData = [\r\n    {\r\n      prop: \"type\",\r\n      type: (\r\n        <>\r\n          string = <i>def</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          This prop set the shape of the component. Possible states:{\" \"}\r\n          <b> def </b>. The default state is <b>def</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"view\",\r\n      type: (\r\n        <>\r\n          string = <i>filled</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the view of the component. Possible states:{\" \"}\r\n          <b> filled </b>. The default state is <b>filled</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"color\",\r\n      type: (\r\n        <>\r\n          string = <i>default</i>\r\n        </>\r\n      ),\r\n      desc: (\r\n        <>\r\n          {\" \"}\r\n          This prop set the color of the component. Possible states:{\" \"}\r\n          <b>\r\n            {\" \"}\r\n            default | primary | warning | danger | success | primary_alt |\r\n            warning_alt | danger_alt | success_alt{\" \"}\r\n          </b>\r\n          / The default state is <b>default</b>.\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      prop: \"className\",\r\n      type: <>string</>,\r\n      desc:\r\n        \"A space-delimited list of class names to pass along to a child element.\"\r\n    },\r\n    {\r\n      prop: \"animate\",\r\n      type: (\r\n        <>\r\n          boolean = <i>true</i>\r\n        </>\r\n      ),\r\n      desc: <>Whether the background should animate.</>\r\n    },\r\n    {\r\n      prop: \"stripes\",\r\n      type: (\r\n        <>\r\n          boolean = <i>true</i>\r\n        </>\r\n      ),\r\n      desc: <>Whether the background should be striped.</>\r\n    },\r\n    {\r\n      prop: \"value\",\r\n      type: <>number</>,\r\n      desc: (\r\n        <>\r\n          A value between 0 and 1 (inclusive) representing how far along the\r\n          operation is. Values below 0 or above 1 will be interpreted as 0 or 1,\r\n          respectively. Omitting this prop will result in an \"indeterminate\"\r\n          progress meter that fills the entire bar.\r\n        </>\r\n      )\r\n    }\r\n  ];\r\n\r\n  /** Code source */\r\n  const Code = `  \r\n&lt;<span class=\"val\">ProgressBar</span>&gt;\r\n  <i>type</i> = 'def'\r\n  <i>view</i> = 'filled'\r\n  <i>color</i> = '${color}' \r\n  <i>animate</i> = ${animate ? \"{true}\" : \"{false}\"}\r\n  <i>stripes</i> = ${stripes ? \"{true}\" : \"{false}\"}\r\n  <i>value</i> = '${value / 100}'\r\n  <span class=\"attr\">type</span>=\"<span class=\"val\">def</span>\"\r\n  <span class=\"attr\">view</span>=\"<span class=\"val\">${view}</span>\"\r\n  <span class=\"attr\">color</span>=\"<span class=\"val\">${color}</span>\"\r\n  <span class=\"attr\">icon</span>=\"<span class=\"val\">cut</span>\"\r\n  <span class=\"attr\">text</span>=\"<span class=\"val\">Cut</span>\"\r\n  <span class=\"attr\">labelElement</span>=\"<span class=\"val\">⌘X</span>\"\r\n/&gt;\r\n `;\r\n\r\n  return <Overview overview={OverviewText} apidata={APIData} code={Code} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}